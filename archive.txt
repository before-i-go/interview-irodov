Archive Contents
================

Directory structure:
└── tweet-scrolls/
├── .git/
│   ├── hooks/
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── push-to-checkout.sample
│   │   └── update.sample
│   ├── info/
│   │   └── exclude
│   ├── logs/
│   │   ├── refs/
│   │   │   ├── heads/
│   │   │   │   └── main
│   │   │   └── remotes/
│   │   │       └── origin/
│   │   │           ├── HEAD
│   │   │           └── main
│   │   └── HEAD
│   ├── objects/
│   │   ├── 00/
│   │   │   └── 292222b3bb53000b4526d5f44d0b5840c86725
│   │   ├── 01/
│   │   │   ├── 493b4fd8c8710865e065459531e3fe0f7f7a44
│   │   │   └── d7c6f6bd0633456d05b68b47f55fdbc46e093f
│   │   ├── 03/
│   │   │   └── b167806bb43aaf19823822fc04eccbadf6f732
│   │   ├── 04/
│   │   │   └── 51a630248f6dd691c30956df0965006f7900f6
│   │   ├── 05/
│   │   │   └── a6b527527044e801ea0c4071ba73a94a55068c
│   │   ├── 06/
│   │   │   ├── 3cb9d59657e1cc3e218affeda12b40b79d5766
│   │   │   └── f46db4c152ad35f97ada0e8b3895f20c1e71de
│   │   ├── 07/
│   │   │   ├── 7ae2ac6f2bb312b65943a7bfca863d06137d89
│   │   │   └── 98cb1e2376a173dc1d642bb825c6e487f39234
│   │   ├── 0a/
│   │   │   └── 49256f8746efa7d2168c2912ca649b7a1e98d4
│   │   ├── 0d/
│   │   │   └── 13aa648a2eb8d901db18ff555459afd2852751
│   │   ├── 0f/
│   │   │   ├── ea98a09ec42929c81100eb23ad4d9e66c038b4
│   │   │   └── f71aed254b9972943da94fa54306f2d28716ec
│   │   ├── 11/
│   │   │   ├── 9f0baaf6076baf84be7336121396f81a0b1713
│   │   │   ├── b1138e401999c611f39128c0b82bba47ebfe83
│   │   │   ├── fdcdd272594d97c1f289398f737f4479589fde
│   │   │   └── ff40f5664b09ebd4cf7a7a5e9d7ed545c86aa8
│   │   ├── 12/
│   │   │   └── 13c82d150598b610dd0ddd2e47e09559620931
│   │   ├── 13/
│   │   │   └── 7f54d2d5e8aace5a2b5530b41d16d9e63a404f
│   │   ├── 14/
│   │   │   ├── 5871dcc6c0f34cd6a45fe0aa42433bee986b08
│   │   │   └── a88532f94a36f0e98280b32f47a6f7ce1cc461
│   │   ├── 15/
│   │   │   └── 9a3cf66ec8077802c80cd1633272743af5bf31
│   │   ├── 16/
│   │   │   ├── 35d74d376ad4497d33be8b76a608e9e2904756
│   │   │   ├── 8832d12dcf29a02aee190d41ac7869bdca178e
│   │   │   └── f1522d5876f08e2fad3551c1579cbc3d61b747
│   │   ├── 17/
│   │   │   └── 0e696992537b556ae01d92238c5468afbe0de1
│   │   ├── 19/
│   │   │   ├── 65b77a6a5971d4e899d53b3f596be1ef9241a3
│   │   │   └── 93a1b1fc34f9d5b1dfa21f19771872e2a57651
│   │   ├── 1a/
│   │   │   └── 6a78f0aeb4aba13c2e5a51e59ff455a4a9b6e1
│   │   ├── 1b/
│   │   │   ├── 20c9b5e044d63d43296471c7071fbbc4806879
│   │   │   └── 2f32e8938865d222d685833b99264ecba29d98
│   │   ├── 1c/
│   │   │   └── 5fac16b6ae72b416b7eb1b44639e20c4680dce
│   │   ├── 1e/
│   │   │   └── 85ff381c63244ed5230754e5d432bf79ad7182
│   │   ├── 1f/
│   │   │   ├── 494b29e29f47a5a0cd2399a7018e4aacca94e1
│   │   │   └── dd88171a425f242e83eba68a9400e14f8314d7
│   │   ├── 20/
│   │   │   ├── 0bbdeafcc2de8e5e75da2459ad7dfc914c3562
│   │   │   └── cbae6b330627680e4843cb45b5a3a4febee853
│   │   ├── 21/
│   │   │   ├── 38b2c8209577fc92ed06cede07c522f9b5a149
│   │   │   ├── 73a95579a0a78573a21ccfc4c896a8d584bff8
│   │   │   └── 8a9e0ba50db4d240706c03260f4360c37584db
│   │   ├── 22/
│   │   │   ├── 0ba0d3210a557bb92d972fac0506a361dfc763
│   │   │   ├── 5f1451b8e024a10bb3f57512ea303718eab333
│   │   │   └── edc834e7fd2f79392519b167f112a8f363823f
│   │   ├── 23/
│   │   │   ├── 195fc4857a42d701da9d191f5222b2199ea2c3
│   │   │   ├── 57dba6cb138e78a4c07ce13fd6cd085171b415
│   │   │   └── f170ffa9d64158281404e5cc180d8c7ea10b8c
│   │   ├── 25/
│   │   │   └── 21d4e7a43327d68ee3692782cd82c4e5bcc683
│   │   ├── 27/
│   │   │   ├── 08ad0ed066f503c20936fd643ba94fe6dee8af
│   │   │   └── 3e4cb38c3c59452f8ace94e803b07ce2377cc6
│   │   ├── 2a/
│   │   │   └── 28e971e039f96fe3365b5a4d6d8729ee9f3646
│   │   ├── 2b/
│   │   │   ├── 64595cd17decaa1cb5c53c0248a919e82729c6
│   │   │   └── 6ead5ed38429257ebfc61c456102556fda7522
│   │   ├── 2c/
│   │   │   ├── 2a6b063eb43073388b0e2d3a364e174c99d2ef
│   │   │   ├── 3816129d1b44003c52f600fbe226fdabb9648d
│   │   │   ├── 5a7536ea72b9d2feec4e2fa58cfbbabc866dae
│   │   │   ├── 845e72e0ae8166e8a803f9d55174f6d0d89105
│   │   │   └── dcd922ba8d18163ff0ea9419000fc1fe7448c9
│   │   ├── 2d/
│   │   │   ├── 0850992136623b0f0923e5b4b0042d631d8dd7
│   │   │   └── 43986f0bb43e1c03bd7c2606c4223791a11826
│   │   ├── 2e/
│   │   │   ├── 8bbd4436f4fdd993d0f7c2515a7c2deec5d0ec
│   │   │   └── bc1b4a6604ad4fe4496386a2ab73c7e509746e
│   │   ├── 30/
│   │   │   └── a768b6443b7463756ef156d6831841b31d166d
│   │   ├── 32/
│   │   │   ├── 147e19176c4679977976345fc109f0ea7b378c
│   │   │   └── be26232733f49a052d6d644897303bc5d0db32
│   │   ├── 33/
│   │   │   ├── 2123eee263fdaf700d2ff8dbfb0b6ab0c19a18
│   │   │   └── 76fc4b87cc9074df888eb5ec60b9d33f011fa6
│   │   ├── 34/
│   │   │   ├── 5ffeda8ca67b1cfac5cdf9372a3bcf9cfc2d72
│   │   │   ├── 78c49daaf666d0c79dd11b5cb6cd95c6690890
│   │   │   └── bc926b4ef90929dcae3be02c736e20e508e1d7
│   │   ├── 35/
│   │   │   ├── d3caf8f65bf7c9af6eb94fc7cc492400fb05a8
│   │   │   └── eac6652bab031a0e43bcbae54ec1d0def38b95
│   │   ├── 36/
│   │   │   ├── 20822e0c10916b275a1531b7a94ef95bccfbc0
│   │   │   ├── 59b29d9ebadaf8fc28c6597344a9c29537c0a8
│   │   │   └── e42738dab01a88da1bd9990bd4ce800cf5e618
│   │   ├── 37/
│   │   │   └── defba09aa0eb01da42a30a945587b8aa6a65a8
│   │   ├── 38/
│   │   │   └── ec00291ecfb3904132e42b069c17e50f20bb54
│   │   ├── 3a/
│   │   │   └── 5a8f2d4dcd84ad1238c8bdca620c795a23043d
│   │   ├── 3b/
│   │   │   ├── 1f472154b2e96c05377d6c4a33d2c3f26a61c4
│   │   │   └── e62593f51726b404944e86912bdad6d0e40685
│   │   ├── 3e/
│   │   │   └── db2b979a3a6532549a2647153650b1ac2a71ba
│   │   ├── 3f/
│   │   │   └── 18e93041e98c8f58bb8b99beb51bb6dd0de600
│   │   ├── 40/
│   │   │   └── 1c75671d4a7b5ee3e3761cfc390bdf9f651d66
│   │   ├── 41/
│   │   │   ├── c9474e69f654af9226fdfae601eec29c09593a
│   │   │   └── fbcd72644d9c018c9f7ab64b182fb4c2ca74a1
│   │   ├── 42/
│   │   │   └── ac4177723637eac72815cb700f03d62a743aa2
│   │   ├── 43/
│   │   │   └── 7eeaececbca7c362a61eb9b380ca9bf40ee896
│   │   ├── 44/
│   │   │   └── 9bc4d27c8a8e2ec97372d5bcb79ccdd4213072
│   │   ├── 46/
│   │   │   └── 186e259b356511a0a91fcc4209188da4adc3f3
│   │   ├── 47/
│   │   │   ├── 112654546fa6e5baa8a265e6d7cae6208efb25
│   │   │   ├── b3a82bba89d28cc5918ed459289e1627677b14
│   │   │   └── b8d8930b60958b939037c798d9921eaa91c873
│   │   ├── 49/
│   │   │   └── 8a8030bfcfafecb31ffc4b90d201dcd75026be
│   │   ├── 4e/
│   │   │   ├── b26cb05116ed6f850cfb8ab43fe3a4842b6b39
│   │   │   └── b618391142b54b388aed7c84c3abf16c64600e
│   │   ├── 50/
│   │   │   ├── 115e8812980ac2862109b1de25166b9638eb8d
│   │   │   ├── d4fa58614acec70d6354461501357566d89a22
│   │   │   └── dc66660ea7765059314f4c1e6efdea455bb4a4
│   │   ├── 51/
│   │   │   └── 37cec3b9d367c3f5eb69929fa1f3aa85a1c82e
│   │   ├── 52/
│   │   │   └── 2e67cbd59ca05f18ffc3aec04d5aadb5b56ca5
│   │   ├── 55/
│   │   │   ├── 37710250c1d404da84afa68b1a3e9efe98a823
│   │   │   ├── 865c7a26f2518b9cd83fe00bd426c290161521
│   │   │   └── e37e1a799573d3ed1e87e5bc9206e650ed0707
│   │   ├── 56/
│   │   │   └── f7b6886fa70f0945b5eb246661d38d11c82f99
│   │   ├── 59/
│   │   │   ├── 8d7458e3ff61160b8ae4b5d0a74eba136b12b4
│   │   │   └── b0e9e267ef80d8ac7a2546ca6506eac5a2b36c
│   │   ├── 5c/
│   │   │   ├── 16527e59eeb8d4c14a741fae591b9936e20ee3
│   │   │   └── cf18cfb6bf670cbc3b288599355fd5d7541910
│   │   ├── 5d/
│   │   │   ├── 06418ac53755d75735160b87d47f4d3b407d1a
│   │   │   └── eeceb78e5106295171890e3bfae0f16cb8bbed
│   │   ├── 5e/
│   │   │   ├── 6161e21b3c392d6db5895c1dd286633da64bdd
│   │   │   ├── 721726a9e92a4f2974fad9543bcd443904cd9c
│   │   │   └── c4653dfc4fac3d921f48188e5aea89aa18e344
│   │   ├── 61/
│   │   │   └── 1293dfe18865582b1e6d1cb4a11c525f9bd40e
│   │   ├── 62/
│   │   │   ├── 485cec0ed2177751e04ec499b61cfccac47a9f
│   │   │   ├── 4f5e0bf1f4b02e40d1bcb3f3b522be396d27de
│   │   │   └── 90ad0fabd25f422ba48b3c9d4d456a2c07a751
│   │   ├── 63/
│   │   │   ├── 2bfc53662ada6a2915f84916f25bb6aff5e826
│   │   │   ├── 768d0723ab546b4bb1ba67438fc62a1569c074
│   │   │   ├── 99d345900eae3f1f36f10b8266ff97c1f97e7c
│   │   │   └── fabb4c4698f3b10221a06a441b23f2a170048a
│   │   ├── 64/
│   │   │   └── 68c015b3c6e73fa2a4b6a72c99fae613a5aa6e
│   │   ├── 66/
│   │   │   └── 0afdeb0223d83a48f12d2dc966169db870565d
│   │   ├── 67/
│   │   │   └── a7bdc58d18a091be20cba8b741630bc6258d27
│   │   ├── 68/
│   │   │   ├── 9c87ce855a0787f8e4da73e280f9ef8baa2707
│   │   │   └── a62618e39dcdd6b97dac9649817c445b853c3a
│   │   ├── 69/
│   │   │   └── 3dfb963bea462df2cd4d64667e4f2bd89b753c
│   │   ├── 6a/
│   │   │   └── ffdddeac12151a852972ee30d730658648b18a
│   │   ├── 6c/
│   │   │   └── 05f814363256492c2817229ac7f4663855f2e2
│   │   ├── 6d/
│   │   │   ├── 3264c7dab77b174791db841eb616da412dfdb3
│   │   │   ├── 7ea12828a70f3b2c40176a55cb72108527f8f7
│   │   │   └── 802d0da152eaf1457defe6c2a7e75f7db7a93d
│   │   ├── 6e/
│   │   │   ├── 26bf71aa697a20c0edf7f513e0edf1e3e44ec1
│   │   │   ├── 4d2c3d3eccc8a745f53f15ad43eaf4da3cc298
│   │   │   └── 7ffb3ce5e1687c2d303c0b2e064c74c44b5953
│   │   ├── 6f/
│   │   │   ├── 3f8832a3333b20abdb81edd85de5c5430f3b11
│   │   │   ├── 46ef5a2e1927da866610ffd0bc46789ae51627
│   │   │   └── 95251ae851ad00ccac88e4ecaabd6189512c17
│   │   ├── 71/
│   │   │   └── aaea2b5a2d6ff0e14f3ad8a79246c04a742827
│   │   ├── 72/
│   │   │   └── a37f0ed5674e81c77ec7badf43a19c8cd426f1
│   │   ├── 73/
│   │   │   └── 324a60e5185724b4781a50e4e263881a53d8b7
│   │   ├── 74/
│   │   │   └── 4884c933de4ca3707eaed4e305adb069000815
│   │   ├── 76/
│   │   │   ├── 7672dbb40f254c5c9aaa7e8804f656a86bfdeb
│   │   │   └── dd9a7de284f4ff056e4072ccb5715c0798a513
│   │   ├── 78/
│   │   │   ├── 6a34f9875f26493f5b0f11aaf1bdcaa83db538
│   │   │   ├── 851d203e9ec8c070ad8b9243353b24affb2d32
│   │   │   └── a51b6b5f03a4b33640f6448cd8ea0d62322e0e
│   │   ├── 79/
│   │   │   ├── 9770ef7d830acfbf6d9afff78c49df8128ab2f
│   │   │   └── f5653bb9ecf7b634442c5371a5024ad5f815cb
│   │   ├── 7c/
│   │   │   ├── 6504d2dfbe7c8321b188a04972cd959a65efd1
│   │   │   └── 7d992aa227a08c1bd251f0ec39e32aa832ec39
│   │   ├── 7d/
│   │   │   └── 2a3c5e7d24758d0db9bb26c805cefe52a60e62
│   │   ├── 7f/
│   │   │   └── d88d6c47d094e9e6cbad48d2871f11de4f0741
│   │   ├── 81/
│   │   │   └── 28112d5afd02232f4948be60e8090b0d9c197e
│   │   ├── 82/
│   │   │   ├── 56111f54481b8942a8def874ecbc8747e79fe1
│   │   │   └── ecd35585753fd571eced01d06fc6a4bb1155b8
│   │   ├── 83/
│   │   │   ├── 17b86bc599d52ac252bf584049204c580f6ffe
│   │   │   ├── 6bac914da14e4271ed4a53c783f720d4a040d8
│   │   │   └── ea15fc5a26d703474dcb027618741a9ffcbabf
│   │   ├── 86/
│   │   │   ├── 11024adfcf88cd0c68b94738f8603243013df1
│   │   │   └── c81b6c7106641494d6c860f5d5622b74bbb571
│   │   ├── 87/
│   │   │   ├── 9b5f47e5e3f493442958287c66902fb78f2a99
│   │   │   └── e7f6ba7a061c8f31ee5227d86b141368704086
│   │   ├── 89/
│   │   │   └── bc970ab1f28949d9af70b6b6b7ba57498690ea
│   │   ├── 8a/
│   │   │   ├── 166c0e615a73441a38df64bfaa19c118d76558
│   │   │   └── fa80e6f4b81ea0cdb163c9efa05c80042ed7af
│   │   ├── 8f/
│   │   │   ├── 6d38590eee3a05fc06db8c60adf12e9b5e97eb
│   │   │   └── ca07571fedb87b10f5e02e7037f0cbf1ca746f
│   │   ├── 90/
│   │   │   └── fbaa1504ab0cc937afca51567fda61241d9d80
│   │   ├── 91/
│   │   │   └── 1c0dd73a1c97110b03b39044de2987de3b1b45
│   │   ├── 92/
│   │   │   └── 4814d5a631fd4217e6c337047b8507052ad098
│   │   ├── 93/
│   │   │   └── d5db6f67df3a4f298a3cb172320ce38e370cc0
│   │   ├── 94/
│   │   │   ├── a5b8eb83565b919b1548ae2bdfd761e0a4231b
│   │   │   └── cfd087ac5bc5d75e971ee49725dfbc0140a21e
│   │   ├── 99/
│   │   │   ├── 883af5bfaf2ed88fec3b7da3576a376bf56607
│   │   │   └── a8083bc31c589f6b422ec331853c44f159f430
│   │   ├── 9a/
│   │   │   └── eaf5e6290b8110b374c2d8cca41ed3f1587b7a
│   │   ├── 9b/
│   │   │   ├── 5dc3a9fa578dba8be1adac05786b3cd4011fe4
│   │   │   └── 7a8eb06ad0fba6f6e72d1e74e3b63ca51b3a6c
│   │   ├── 9c/
│   │   │   └── fe4270061cc1797b315b40dca7109f77dcc82e
│   │   ├── 9d/
│   │   │   └── d5d7929673072fc58c842bbda5f0401ce3e437
│   │   ├── 9e/
│   │   │   └── 575ada976039ba72a4019320be737a0e6400b6
│   │   ├── 9f/
│   │   │   └── 51ebd3236b2a52dae708b82cbd1e34c2d625c8
│   │   ├── a1/
│   │   │   ├── b9d24a3e43ab6668131044f84409f8043a18df
│   │   │   └── eb6bf22bf34009f09845ece9f5d3f1ba2c113c
│   │   ├── a2/
│   │   │   ├── a10eca1184680ffd6ca0562d1c46b1de8a7861
│   │   │   └── bff8b301553908aa0d8b7ad1f273995b876c65
│   │   ├── a4/
│   │   │   └── a544e85ad73e1381529dcdeaf378a163b6bfa3
│   │   ├── a6/
│   │   │   ├── 1e1a2dfc6807526d7360a14920421da842abd0
│   │   │   ├── 9f1892745ec16a18c5fe935e54a61b4e45b3fb
│   │   │   └── fc28edf73d0573f01196e2496b37f34deb155e
│   │   ├── a7/
│   │   │   ├── 03e57179fcd536295ba9664692ffa0eed59e3c
│   │   │   └── 8d2ba451c3062c36ff3758a34651ad15fb5ad1
│   │   ├── a8/
│   │   │   ├── 3cd2b3df7b08790e654f7927abe4a0e54078fb
│   │   │   ├── 8648f1d34990ffa417e5e08e1bc96a5e6827a7
│   │   │   └── e846e506d762f84ad607ac9abb4219f8bf2bea
│   │   ├── ab/
│   │   │   ├── 426d0fe011a413150199ca8977d7646cbb22a8
│   │   │   └── 992b994a9e61f504a08ad60b66f461708854af
│   │   ├── ac/
│   │   │   ├── b19e4216fc736964f333485af4383e5f51fee9
│   │   │   ├── bbc36c1686e1735c99c807df8b2b46126a98fd
│   │   │   └── c5e8011640ee882f4f06278776557adcde5187
│   │   ├── af/
│   │   │   └── 740cae68ada1da8d215784cec528b89e2e3205
│   │   ├── b0/
│   │   │   ├── 7191d3e88d05ad72b427e910621f5cdc6c701a
│   │   │   └── f3bcf12aac64ec539153631661c4899bb8320a
│   │   ├── b1/
│   │   │   └── 372be275ca3f319788fd3c6102968743bf807a
│   │   ├── b3/
│   │   │   └── 65e06a2c26c0f0e692d6c36172a4a730a8ea0b
│   │   ├── b4/
│   │   │   ├── 2ca1ba2df25e13b9bbf87d92cc5504a834a176
│   │   │   ├── 7e82548d810148b3f321ece8d87f602ed00e8b
│   │   │   └── afa04b8be768fc2a36e8d0cd06bdd6ec68a65d
│   │   ├── b5/
│   │   │   └── c1075c775dd47015159dc9c0c247e50fc241c7
│   │   ├── b6/
│   │   │   ├── 7d2d452768bfaf77f6ec14669d71ac6ce32eda
│   │   │   ├── 8f50e37b697f7a2379240f29451abdb3877c9e
│   │   │   └── e10f1f5a88882df10c150c721ddd343224e1f0
│   │   ├── b8/
│   │   │   └── dcf496a67360a4e307800feedcd8e5db00ec24
│   │   ├── b9/
│   │   │   └── 227e73b96f479b02277934340a2974bfc03964
│   │   ├── ba/
│   │   │   ├── 9880d0e4238b6ceb38febb566e90ff3fcd4fd8
│   │   │   └── eaf584446ae60623ef42ced8907bd5d180c64c
│   │   ├── bb/
│   │   │   ├── adc0da667b9de46beb734adbf428d8a2a269df
│   │   │   ├── d8764668813fc3df5af906b8ee059ec5fc2073
│   │   │   └── ea5ccc2dc1f3e18dc3ad7211cb7c70cdaa2d3d
│   │   ├── bc/
│   │   │   ├── 03ab4a76d3b2fdab8c5dca96c4ee78855d864b
│   │   │   ├── f2672283d7784be1e4379ea1b1b8bf8a05a8af
│   │   │   └── fdcbcea944718751c004632d87fa9cf4b3fde8
│   │   ├── bd/
│   │   │   └── e9066074449620f22bbea6244b8e2e36e79ccf
│   │   ├── bf/
│   │   │   ├── 3d5695c81f0fd89b132766642a69a43d801c1c
│   │   │   ├── 9f1559d85037a931ce71bc7ec3a0757497345f
│   │   │   └── c6975a2d2bd1413e13828cd98e4903b132f937
│   │   ├── c0/
│   │   │   └── bd89bf635ad22a733ab02d295e3aa06cba0a31
│   │   ├── c1/
│   │   │   ├── 0ce0e6bde423ac6a77ecf9acd11e50daaeabc2
│   │   │   └── 7450ca223d87c3838b712f57ac04673c5684a7
│   │   ├── c2/
│   │   │   ├── bbe2c3b67c12d4884a52f476ef087f59bed845
│   │   │   └── dfc54a25777532e9276ad89fc3b352c7f9ebd9
│   │   ├── c3/
│   │   │   ├── cdbfcb6c1695b64d4fcf2bae6b16a36a1e7766
│   │   │   └── ff8ac1bfa4490afac70ae657b1bf66e5a911e2
│   │   ├── c4/
│   │   │   └── 322c38d541ed148bd21d2167c6f18640c32e06
│   │   ├── c5/
│   │   │   └── c8482200a4855d6c7e5bc5789bd720d6673b80
│   │   ├── c6/
│   │   │   └── fb1491f86c339c123a399ba09a5dc8cc529018
│   │   ├── c7/
│   │   │   ├── 2024d3314c6b9718d0d3d5ecc4fe85e34c427c
│   │   │   └── 9024d3178b7038219bbcbb5d3cadb59fbf9457
│   │   ├── c9/
│   │   │   ├── 70e4c9304476a5e69d0b4dfddad0da7cf5a6d5
│   │   │   └── 87d7090487ee77f8cd2604753da03547b9529f
│   │   ├── ca/
│   │   │   ├── 62c15ccb2247a1c4919d07e7460ed361b6ff72
│   │   │   ├── 632621a58d8bd78a19bc14a3f42271fc5c641b
│   │   │   ├── 94d2e416e75a8575860c24e8ceea09d3386ad2
│   │   │   ├── caa3d7ab5abeba6261348241ef8cf77f63988f
│   │   │   └── eae74044d999b79b6dabe63837a7a436b83b77
│   │   ├── cb/
│   │   │   └── 57ad72203f7088b5ae171ee390773332a65482
│   │   ├── cc/
│   │   │   ├── 040889b9f2a5909acf033f3cb9674e110aea5c
│   │   │   └── ed18c949e06e0f066f2951db50ee279a56b4f1
│   │   ├── cf/
│   │   │   └── dce0d08ddc62da7f03c6915e4aa6fb172319ff
│   │   ├── d0/
│   │   │   ├── 39838ad5e826b34033f7fc34a90ac4954a9714
│   │   │   └── b8ec95d3875caf7b80a4d0d3b8dd3d07acf519
│   │   ├── d1/
│   │   │   ├── 35c76ebb2029ea71e604937a2eda9fa4d67be2
│   │   │   └── d343b0fa13ee2faafa531bbdda0912245723fb
│   │   ├── d3/
│   │   │   └── 77d253c3e835b2e6197f359f4265035676beb7
│   │   ├── d4/
│   │   │   └── 2ec741be862b06470ea7d8b9e60fd977d7c6ea
│   │   ├── d6/
│   │   │   └── 5ee1ea9abff6177e44c70e61f8dbd0d15ec525
│   │   ├── d7/
│   │   │   ├── db90826c91b15de895cf787040949533bb60a0
│   │   │   └── fc10ad27a54612faa0a82a88364cad2260f9c9
│   │   ├── d8/
│   │   │   ├── 200b97931353ed42873deeeaba3cb92f11b23b
│   │   │   ├── b4915bf02bf6ba14fa087dcc5d6bdbdf0d80a4
│   │   │   └── e360738db333134ed44b00e6128a7241ef0734
│   │   ├── da/
│   │   │   └── 151a0370a7339d73799ee9d7af5874f0ea9557
│   │   ├── db/
│   │   │   └── 188bb455f812369ec4dabc7b70822301b8e6f3
│   │   ├── dc/
│   │   │   └── 4da7d70fac29fff9cabe0cf87dbef3a8bb1960
│   │   ├── df/
│   │   │   └── 3c917f7b76484991750faaf15cc2027a4ffa4b
│   │   ├── e0/
│   │   │   ├── 10e8caca88811d54ab287587587a05970d2d3e
│   │   │   └── 2ebfbe0140f569e4ac4b796667e1b599957404
│   │   ├── e1/
│   │   │   └── 5481cbada794e1fb4565ed4089f6881430c9d6
│   │   ├── e3/
│   │   │   ├── 18790de8be096bd1649b6b8be09844f029e4f2
│   │   │   └── 23d7b259b6cdc90cc31530a708ea2fcf1ad1d1
│   │   ├── e4/
│   │   │   └── 7c0fa8b1ba13b06957d33b7dc00f4dca141909
│   │   ├── e5/
│   │   │   ├── e58d95119639d8e3f9795cdb965072ac2b92ec
│   │   │   └── fe1c4df88f8cd00851934f3764cee461ae5c4d
│   │   ├── e7/
│   │   │   └── bb4e4482612008278d8843f7a3f7a8ac378e79
│   │   ├── e8/
│   │   │   └── d6981c77581e59e82b24812a94aa07efadd80a
│   │   ├── e9/
│   │   │   └── 4714dbfbc16e345f63781d05b71f8b569b4c5c
│   │   ├── ea/
│   │   │   └── 85202a7815a55ac2e0b32218a1f9e0c8f7c772
│   │   ├── eb/
│   │   │   └── 26134ef9884c8bf6e9ba24c1e919f5a685e8fb
│   │   ├── ed/
│   │   │   └── 4968fa1d2116dd42f457f42e8dd8707b73f755
│   │   ├── f0/
│   │   │   └── 2cdc9041bd31c638431fac4f6122902f094cd6
│   │   ├── f1/
│   │   │   └── 3ef21fd3f5a39f3825480e16c6b1868556993f
│   │   ├── f2/
│   │   │   └── fe8f277523a78ff2c6c65de1726e7fc5bb7a1f
│   │   ├── f3/
│   │   │   └── b37747f50bdae120db789c02e4ce37925594b1
│   │   ├── f5/
│   │   │   ├── 19396329727da712a94bcfc839aaf65f2c93ee
│   │   │   └── fe81f51faa76300472d1bf39d730c5fca47310
│   │   ├── f6/
│   │   │   ├── 45e1c2b102ec1d97f3f4578680369cb883ae06
│   │   │   └── eb0400138d738985021f6b1af3ab86559795fd
│   │   ├── f7/
│   │   │   └── cbb2447587c6122ed469cfae1732b1d3914320
│   │   ├── f8/
│   │   │   ├── 1b531d7785ce84e096c34b88c113c2b8bbb347
│   │   │   └── 471ec0e5a7883bb46bc2684d3a1d883cbcd07b
│   │   ├── f9/
│   │   │   └── da2edc03623b01a494dc0ab136d13caf61da6d
│   │   ├── fa/
│   │   │   └── be728ec8fa467f58e22769ea797d13af88e543
│   │   ├── fb/
│   │   │   └── 71f695675700cd63c21112ed31c4b1662da306
│   │   ├── fc/
│   │   │   └── 8d18d9dee29728fc35d5ceb0011edc5b7aff3d
│   │   ├── fe/
│   │   │   ├── 357bb315adb3dd45fea391fc91c144261323e1
│   │   │   ├── 7af4ccf493af4716f6980f7cdf8b1cc8ccf08e
│   │   │   ├── 843a8575f6ff1ebe0d909d653baa026d98a32f
│   │   │   └── 963c71078f7b529dff09d0c41b0183daf42aa1
│   │   └── pack/
│   │       ├── pack-9dbe3d8a60598871f3410a0ea80b0e77f876ec3e.idx
│   │       └── pack-9dbe3d8a60598871f3410a0ea80b0e77f876ec3e.pack
│   ├── refs/
│   │   ├── heads/
│   │   │   └── main
│   │   ├── remotes/
│   │   │   └── origin/
│   │   │       ├── HEAD
│   │   │       └── main
│   │   └── tags/
│   │       └── v0.1.0
│   ├── COMMIT_EDITMSG
│   ├── HEAD
│   ├── config
│   ├── description
│   ├── index
│   └── packed-refs
├── .kiro/
│   └── steering/
│       ├── current_status.md
│       ├── directives.md
│       ├── file_management.md
│       ├── i00-pattern-list.txt
│       ├── idiomatic_rust_tdd_patterns.md
│       ├── json_schema_discovery.md
│       ├── product.md
│       ├── rust_minimalism.md
│       └── structure.md
├── REALDATA/
│   ├── output_user_1754617090/
│   │   ├── dm_conversations_user_1754617090.csv
│   │   ├── dm_results_user_1754617090.txt
│   │   ├── results_user_1754617090.txt
│   │   ├── threads_user_1754617090.csv
│   │   ├── threads_user_1754617090.txt
│   │   ├── timeline_analysis_user_1754617090.csv
│   │   └── timeline_analysis_user_1754617090.txt
│   ├── output_user_1754621124/
│   │   ├── dm_conversations_user_1754621124.csv
│   │   ├── dm_results_user_1754621124.txt
│   │   ├── dm_threads_user_1754621124.csv
│   │   ├── results_user_1754621124.txt
│   │   ├── threads_user_1754621124.csv
│   │   ├── threads_user_1754621124.txt
│   │   ├── timeline_analysis_user_1754621124.csv
│   │   └── timeline_analysis_user_1754621124.txt
│   ├── output_user_1754621233/
│   │   ├── dm_conversations_user_1754621233.csv
│   │   ├── dm_results_user_1754621233.txt
│   │   ├── dm_threads_user_1754621233.csv
│   │   ├── results_user_1754621233.txt
│   │   ├── threads_user_1754621233.csv
│   │   ├── threads_user_1754621233.txt
│   │   ├── timeline_analysis_user_1754621233.csv
│   │   └── timeline_analysis_user_1754621233.txt
│   ├── output_user_1754626290/
│   │   ├── dm_conversations_user_1754626290.csv
│   │   ├── dm_results_user_1754626290.txt
│   │   ├── dm_threads_user_1754626290-001.txt
│   │   ├── dm_threads_user_1754626290-002.txt
│   │   ├── dm_threads_user_1754626290-003.txt
│   │   ├── dm_threads_user_1754626290-004.txt
│   │   ├── dm_threads_user_1754626290-005.txt
│   │   ├── dm_threads_user_1754626290-006.txt
│   │   ├── dm_threads_user_1754626290-007.txt
│   │   ├── dm_threads_user_1754626290-008.txt
│   │   ├── dm_threads_user_1754626290-009.txt
│   │   ├── dm_threads_user_1754626290-010.txt
│   │   ├── dm_threads_user_1754626290-011.txt
│   │   ├── dm_threads_user_1754626290-012.txt
│   │   ├── dm_threads_user_1754626290-013.txt
│   │   ├── dm_threads_user_1754626290-014.txt
│   │   ├── dm_threads_user_1754626290-015.txt
│   │   ├── dm_threads_user_1754626290-016.txt
│   │   ├── dm_threads_user_1754626290-017.txt
│   │   ├── dm_threads_user_1754626290-018.txt
│   │   ├── dm_threads_user_1754626290-019.txt
│   │   ├── dm_threads_user_1754626290-020.txt
│   │   ├── dm_threads_user_1754626290-021.txt
│   │   ├── dm_threads_user_1754626290-022.txt
│   │   ├── dm_threads_user_1754626290-023.txt
│   │   ├── dm_threads_user_1754626290-024.txt
│   │   ├── dm_threads_user_1754626290-025.txt
│   │   ├── dm_threads_user_1754626290-026.txt
│   │   ├── dm_threads_user_1754626290-027.txt
│   │   ├── dm_threads_user_1754626290-028.txt
│   │   ├── dm_threads_user_1754626290.csv
│   │   ├── results_user_1754626290.txt
│   │   ├── threads_user_1754626290-001.txt
│   │   ├── threads_user_1754626290-002.txt
│   │   ├── threads_user_1754626290-003.txt
│   │   ├── threads_user_1754626290-004.txt
│   │   ├── threads_user_1754626290-005.txt
│   │   ├── threads_user_1754626290-006.txt
│   │   ├── threads_user_1754626290-007.txt
│   │   ├── threads_user_1754626290-008.txt
│   │   ├── threads_user_1754626290.csv
│   │   ├── threads_user_1754626290.txt
│   │   ├── timeline_analysis_user_1754626290.csv
│   │   └── timeline_analysis_user_1754626290.txt
│   └── test_new_format/
│       ├── dm_conversations_user_1754627768.csv
│       ├── dm_results_user_1754627768.txt
│       ├── dm_threads_user_1754627768-001.txt
│       ├── dm_threads_user_1754627768-002.txt
│       ├── dm_threads_user_1754627768-003.txt
│       ├── dm_threads_user_1754627768-004.txt
│       ├── dm_threads_user_1754627768-005.txt
│       ├── dm_threads_user_1754627768-006.txt
│       ├── dm_threads_user_1754627768-007.txt
│       ├── dm_threads_user_1754627768-008.txt
│       ├── dm_threads_user_1754627768-009.txt
│       ├── dm_threads_user_1754627768-010.txt
│       ├── dm_threads_user_1754627768-011.txt
│       ├── dm_threads_user_1754627768.csv
│       ├── results_user_1754627768.txt
│       ├── threads_user_1754627768.csv
│       ├── threads_user_1754627768.txt
│       ├── timeline_analysis_user_1754627768.csv
│       └── timeline_analysis_user_1754627768.txt
├── docs/
│   ├── CLEANUP_FINAL_SUMMARY.md
│   └── Context20250807.md
├── samples/
│   ├── direct-messages_end.js
│   ├── direct-messages_middle1.js
│   ├── direct-messages_middle2.js
│   ├── direct-messages_middle3.js
│   └── direct-messages_start.js
├── src/
│   ├── bin/
│   │   ├── file_splitter.rs
│   │   ├── schema_discovery.rs
│   │   ├── test_dm_headers.rs
│   │   ├── test_mvp_simple.rs
│   │   ├── test_parsing.rs
│   │   └── tweet_coverage_analysis.rs
│   ├── models/
│   │   ├── direct_message.rs
│   │   ├── dm_headers.rs
│   │   ├── interaction.rs
│   │   ├── mod.rs
│   │   ├── profile.rs
│   │   ├── statistics.rs
│   │   ├── timeline.rs
│   │   └── tweet_classification.rs
│   ├── processing/
│   │   ├── data_structures.rs
│   │   ├── direct_messages.rs
│   │   ├── dm_headers_analyzer.rs
│   │   ├── dm_threads.rs
│   │   ├── file_io.rs
│   │   ├── mod.rs
│   │   ├── mvp_analyzer.rs
│   │   ├── reply_threads.rs
│   │   └── tweets.rs
│   ├── relationship/
│   │   ├── analyzer.rs
│   │   ├── anonymization.rs
│   │   ├── communication.rs
│   │   ├── file_generation.rs
│   │   ├── file_writer.rs
│   │   ├── mod.rs
│   │   ├── prompts_generator.rs
│   │   ├── text_generators.rs
│   │   ├── timeline_integration.rs
│   │   └── timeline_text.rs
│   ├── services/
│   │   ├── analyzer.rs
│   │   ├── mod.rs
│   │   ├── timeline.rs
│   │   └── timeline_analyzer.rs
│   ├── utils/
│   │   ├── enhanced_csv_writer.rs
│   │   ├── file_splitter.rs
│   │   ├── mod.rs
│   │   ├── schema_discovery.rs
│   │   └── tweet_classifier.rs
│   ├── cli.rs
│   ├── lib.rs
│   ├── main.rs
│   ├── main_integration.rs
│   └── main_process.rs
├── target/
│   ├── debug/
│   │   ├── .fingerprint/
│   │   │   ├── aho-corasick-bf78833d83099a98/
│   │   │   │   ├── dep-lib-aho_corasick
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-aho_corasick
│   │   │   │   └── lib-aho_corasick.json
│   │   │   ├── aho-corasick-dd05ff9ce8a4d233/
│   │   │   │   ├── dep-lib-aho_corasick
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-aho_corasick
│   │   │   │   └── lib-aho_corasick.json
│   │   │   ├── anyhow-3983b80c02c87e8d/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── anyhow-576588ce1912ba72/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── anyhow-63da0aae709648a4/
│   │   │   │   ├── dep-lib-anyhow
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-anyhow
│   │   │   │   └── lib-anyhow.json
│   │   │   ├── anyhow-f6ff93c6c71753a8/
│   │   │   │   ├── dep-lib-anyhow
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-anyhow
│   │   │   │   └── lib-anyhow.json
│   │   │   ├── arrayref-472dedde991e7fdd/
│   │   │   │   ├── dep-lib-arrayref
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-arrayref
│   │   │   │   └── lib-arrayref.json
│   │   │   ├── arrayref-8810d36dfce84b89/
│   │   │   │   ├── dep-lib-arrayref
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-arrayref
│   │   │   │   └── lib-arrayref.json
│   │   │   ├── arrayvec-a3b52b06a1e3d505/
│   │   │   │   ├── dep-lib-arrayvec
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-arrayvec
│   │   │   │   └── lib-arrayvec.json
│   │   │   ├── arrayvec-e748fabf2b02b1bc/
│   │   │   │   ├── dep-lib-arrayvec
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-arrayvec
│   │   │   │   └── lib-arrayvec.json
│   │   │   ├── autocfg-838bb28b09540f8f/
│   │   │   │   ├── dep-lib-autocfg
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-autocfg
│   │   │   │   └── lib-autocfg.json
│   │   │   ├── bitflags-8223004ab2314a05/
│   │   │   │   ├── dep-lib-bitflags
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-bitflags
│   │   │   │   └── lib-bitflags.json
│   │   │   ├── bitflags-fbb92cf157890939/
│   │   │   │   ├── dep-lib-bitflags
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-bitflags
│   │   │   │   └── lib-bitflags.json
│   │   │   ├── blake3-1faee5c13e575155/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── blake3-312c8930c3f1f14f/
│   │   │   │   ├── dep-lib-blake3
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-blake3
│   │   │   │   └── lib-blake3.json
│   │   │   ├── blake3-53c8ddfac0903482/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── blake3-6e0eb2bd0b8d1f1a/
│   │   │   │   ├── dep-lib-blake3
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-blake3
│   │   │   │   └── lib-blake3.json
│   │   │   ├── bytes-2494798bf6c9c10a/
│   │   │   │   ├── dep-lib-bytes
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-bytes
│   │   │   │   └── lib-bytes.json
│   │   │   ├── bytes-65cf51464acf5aed/
│   │   │   │   ├── dep-lib-bytes
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-bytes
│   │   │   │   └── lib-bytes.json
│   │   │   ├── cc-912944931342a878/
│   │   │   │   ├── dep-lib-cc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-cc
│   │   │   │   └── lib-cc.json
│   │   │   ├── cfg-if-bccabb5d440a8c74/
│   │   │   │   ├── dep-lib-cfg_if
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-cfg_if
│   │   │   │   └── lib-cfg_if.json
│   │   │   ├── cfg-if-fef044fd1169f9d7/
│   │   │   │   ├── dep-lib-cfg_if
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-cfg_if
│   │   │   │   └── lib-cfg_if.json
│   │   │   ├── chrono-bb920937a5e754b2/
│   │   │   │   ├── dep-lib-chrono
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-chrono
│   │   │   │   └── lib-chrono.json
│   │   │   ├── chrono-ffb2d3f254c32510/
│   │   │   │   ├── dep-lib-chrono
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-chrono
│   │   │   │   └── lib-chrono.json
│   │   │   ├── console-2b2a07baaadda64b/
│   │   │   │   ├── dep-lib-console
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-console
│   │   │   │   └── lib-console.json
│   │   │   ├── console-bfe2e0af22e5eaad/
│   │   │   │   ├── dep-lib-console
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-console
│   │   │   │   └── lib-console.json
│   │   │   ├── constant_time_eq-7b09f7b0b46b3ae8/
│   │   │   │   ├── dep-lib-constant_time_eq
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-constant_time_eq
│   │   │   │   └── lib-constant_time_eq.json
│   │   │   ├── constant_time_eq-d0dd5e4a2b6da121/
│   │   │   │   ├── dep-lib-constant_time_eq
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-constant_time_eq
│   │   │   │   └── lib-constant_time_eq.json
│   │   │   ├── csv-993e3938b6ad8375/
│   │   │   │   ├── dep-lib-csv
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-csv
│   │   │   │   └── lib-csv.json
│   │   │   ├── csv-core-0b79482fc9b73826/
│   │   │   │   ├── dep-lib-csv_core
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-csv_core
│   │   │   │   └── lib-csv_core.json
│   │   │   ├── csv-core-7c6c627743d8aa01/
│   │   │   │   ├── dep-lib-csv_core
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-csv_core
│   │   │   │   └── lib-csv_core.json
│   │   │   ├── csv-d29ebc8e60b6cb12/
│   │   │   │   ├── dep-lib-csv
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-csv
│   │   │   │   └── lib-csv.json
│   │   │   ├── fastrand-421b3eec792ef00b/
│   │   │   │   ├── dep-lib-fastrand
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-fastrand
│   │   │   │   └── lib-fastrand.json
│   │   │   ├── fastrand-4fbc03669feade46/
│   │   │   │   ├── dep-lib-fastrand
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-fastrand
│   │   │   │   └── lib-fastrand.json
│   │   │   ├── float-cmp-393023b0080ab75a/
│   │   │   │   ├── dep-lib-float_cmp
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-float_cmp
│   │   │   │   └── lib-float_cmp.json
│   │   │   ├── float-cmp-78d21334b6d974ab/
│   │   │   │   ├── dep-lib-float_cmp
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-float_cmp
│   │   │   │   └── lib-float_cmp.json
│   │   │   ├── getrandom-0750ac7126e00fb4/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── getrandom-325c9e82d42539c3/
│   │   │   │   ├── dep-lib-getrandom
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-getrandom
│   │   │   │   └── lib-getrandom.json
│   │   │   ├── getrandom-92541474e5b7ec0b/
│   │   │   │   ├── dep-lib-getrandom
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-getrandom
│   │   │   │   └── lib-getrandom.json
│   │   │   ├── getrandom-d3c24bec6ce15115/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── iana-time-zone-e247134c535585ad/
│   │   │   │   ├── dep-lib-iana_time_zone
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-iana_time_zone
│   │   │   │   └── lib-iana_time_zone.json
│   │   │   ├── iana-time-zone-f35e8b92c117541d/
│   │   │   │   ├── dep-lib-iana_time_zone
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-iana_time_zone
│   │   │   │   └── lib-iana_time_zone.json
│   │   │   ├── indicatif-06f47c947b7f770e/
│   │   │   │   ├── dep-lib-indicatif
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-indicatif
│   │   │   │   └── lib-indicatif.json
│   │   │   ├── indicatif-32e548b034e6c7ae/
│   │   │   │   ├── dep-lib-indicatif
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-indicatif
│   │   │   │   └── lib-indicatif.json
│   │   │   ├── itoa-1bcb368356bf449a/
│   │   │   │   ├── dep-lib-itoa
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-itoa
│   │   │   │   └── lib-itoa.json
│   │   │   ├── itoa-4251cf9dbda9db70/
│   │   │   │   ├── dep-lib-itoa
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-itoa
│   │   │   │   └── lib-itoa.json
│   │   │   ├── libc-3cb8cd7c460bf4d0/
│   │   │   │   ├── dep-lib-libc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-libc
│   │   │   │   └── lib-libc.json
│   │   │   ├── libc-6a0d2fa0357afec8/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── libc-81472a11ec80f9bf/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── libc-ad50e0119d53a6a7/
│   │   │   │   ├── dep-lib-libc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-libc
│   │   │   │   └── lib-libc.json
│   │   │   ├── libmimalloc-sys-3b6ff8c782a2e53f/
│   │   │   │   ├── dep-lib-libmimalloc_sys
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-libmimalloc_sys
│   │   │   │   └── lib-libmimalloc_sys.json
│   │   │   ├── libmimalloc-sys-b83d869c36c06d62/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── libmimalloc-sys-cd19445c8fb99018/
│   │   │   │   ├── dep-lib-libmimalloc_sys
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-libmimalloc_sys
│   │   │   │   └── lib-libmimalloc_sys.json
│   │   │   ├── libmimalloc-sys-d8dda4db6e1874dd/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── linux-raw-sys-7db915187bbfa99f/
│   │   │   │   ├── dep-lib-linux_raw_sys
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-linux_raw_sys
│   │   │   │   └── lib-linux_raw_sys.json
│   │   │   ├── linux-raw-sys-f4c5a5247e144062/
│   │   │   │   ├── dep-lib-linux_raw_sys
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-linux_raw_sys
│   │   │   │   └── lib-linux_raw_sys.json
│   │   │   ├── lock_api-0650ffb97f75b6c8/
│   │   │   │   ├── dep-lib-lock_api
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-lock_api
│   │   │   │   └── lib-lock_api.json
│   │   │   ├── lock_api-2c85fbb99ba6bd11/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── lock_api-374c6c4c0575362e/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── lock_api-ca81c95bd8e24e2c/
│   │   │   │   ├── dep-lib-lock_api
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-lock_api
│   │   │   │   └── lib-lock_api.json
│   │   │   ├── memchr-78a7b53c9e3fce39/
│   │   │   │   ├── dep-lib-memchr
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-memchr
│   │   │   │   └── lib-memchr.json
│   │   │   ├── memchr-ccc49080a94bc177/
│   │   │   │   ├── dep-lib-memchr
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-memchr
│   │   │   │   └── lib-memchr.json
│   │   │   ├── mimalloc-1097d240e664096b/
│   │   │   │   ├── dep-lib-mimalloc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-mimalloc
│   │   │   │   └── lib-mimalloc.json
│   │   │   ├── mimalloc-5bc3996fbad6e211/
│   │   │   │   ├── dep-lib-mimalloc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-mimalloc
│   │   │   │   └── lib-mimalloc.json
│   │   │   ├── mio-33e73a15b9ad75ba/
│   │   │   │   ├── dep-lib-mio
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-mio
│   │   │   │   └── lib-mio.json
│   │   │   ├── mio-b51a3b7665de9dc8/
│   │   │   │   ├── dep-lib-mio
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-mio
│   │   │   │   └── lib-mio.json
│   │   │   ├── num-traits-76745a1ad5157120/
│   │   │   │   ├── dep-lib-num_traits
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-num_traits
│   │   │   │   └── lib-num_traits.json
│   │   │   ├── num-traits-804b22f785e72b8b/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── num-traits-97af914fd8aa808b/
│   │   │   │   ├── dep-lib-num_traits
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-num_traits
│   │   │   │   └── lib-num_traits.json
│   │   │   ├── num-traits-d6ded1e9e6011fe4/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── number_prefix-8151130432547dfc/
│   │   │   │   ├── dep-lib-number_prefix
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-number_prefix
│   │   │   │   └── lib-number_prefix.json
│   │   │   ├── number_prefix-d745c5aa15134906/
│   │   │   │   ├── dep-lib-number_prefix
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-number_prefix
│   │   │   │   └── lib-number_prefix.json
│   │   │   ├── once_cell-1312a3b7504e084f/
│   │   │   │   ├── dep-lib-once_cell
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-once_cell
│   │   │   │   └── lib-once_cell.json
│   │   │   ├── once_cell-fd0cb448d3c3ba68/
│   │   │   │   ├── dep-lib-once_cell
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-once_cell
│   │   │   │   └── lib-once_cell.json
│   │   │   ├── parking_lot-6f8afbe641187745/
│   │   │   │   ├── dep-lib-parking_lot
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-parking_lot
│   │   │   │   └── lib-parking_lot.json
│   │   │   ├── parking_lot-d349638518deecb1/
│   │   │   │   ├── dep-lib-parking_lot
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-parking_lot
│   │   │   │   └── lib-parking_lot.json
│   │   │   ├── parking_lot_core-1ef48b14fa3a5d36/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── parking_lot_core-3a57758d45edf910/
│   │   │   │   ├── dep-lib-parking_lot_core
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-parking_lot_core
│   │   │   │   └── lib-parking_lot_core.json
│   │   │   ├── parking_lot_core-3c0fd58bb02c7b32/
│   │   │   │   ├── dep-lib-parking_lot_core
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-parking_lot_core
│   │   │   │   └── lib-parking_lot_core.json
│   │   │   ├── parking_lot_core-51a4a0b9def35e30/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── pin-project-lite-3105ca702ac211cc/
│   │   │   │   ├── dep-lib-pin_project_lite
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-pin_project_lite
│   │   │   │   └── lib-pin_project_lite.json
│   │   │   ├── pin-project-lite-34e36f5fb14d188f/
│   │   │   │   ├── dep-lib-pin_project_lite
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-pin_project_lite
│   │   │   │   └── lib-pin_project_lite.json
│   │   │   ├── portable-atomic-3c6cf0447b8ab1da/
│   │   │   │   ├── dep-lib-portable_atomic
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-portable_atomic
│   │   │   │   └── lib-portable_atomic.json
│   │   │   ├── portable-atomic-c12e5e5e6b481c60/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── portable-atomic-daab7383681b36e4/
│   │   │   │   ├── dep-lib-portable_atomic
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-portable_atomic
│   │   │   │   └── lib-portable_atomic.json
│   │   │   ├── portable-atomic-e95d0732ba650788/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── proc-macro2-088e3658df3bfa80/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── proc-macro2-56b738f29d907136/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── proc-macro2-864a640ffc352dc4/
│   │   │   │   ├── dep-lib-proc_macro2
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-proc_macro2
│   │   │   │   └── lib-proc_macro2.json
│   │   │   ├── quote-37bb756b6b63edfd/
│   │   │   │   ├── dep-lib-quote
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-quote
│   │   │   │   └── lib-quote.json
│   │   │   ├── regex-0ce20365a54a7e9b/
│   │   │   │   ├── dep-lib-regex
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex
│   │   │   │   └── lib-regex.json
│   │   │   ├── regex-4846e953dc341daf/
│   │   │   │   ├── dep-lib-regex
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex
│   │   │   │   └── lib-regex.json
│   │   │   ├── regex-automata-13ad418a11196426/
│   │   │   │   ├── dep-lib-regex_automata
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex_automata
│   │   │   │   └── lib-regex_automata.json
│   │   │   ├── regex-automata-6935fd0035d6c3f2/
│   │   │   │   ├── dep-lib-regex_automata
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex_automata
│   │   │   │   └── lib-regex_automata.json
│   │   │   ├── regex-syntax-288020931f6ed2e9/
│   │   │   │   ├── dep-lib-regex_syntax
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex_syntax
│   │   │   │   └── lib-regex_syntax.json
│   │   │   ├── regex-syntax-b256970c651b9dfd/
│   │   │   │   ├── dep-lib-regex_syntax
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex_syntax
│   │   │   │   └── lib-regex_syntax.json
│   │   │   ├── rustix-58a2edf3e7298cd1/
│   │   │   │   ├── dep-lib-rustix
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-rustix
│   │   │   │   └── lib-rustix.json
│   │   │   ├── rustix-7b1a3ad741ce33be/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── rustix-7f2ebfc0cedee8c6/
│   │   │   │   ├── dep-lib-rustix
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-rustix
│   │   │   │   └── lib-rustix.json
│   │   │   ├── rustix-f50c41acdcaafe2b/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── ryu-0c804e03277ff251/
│   │   │   │   ├── dep-lib-ryu
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-ryu
│   │   │   │   └── lib-ryu.json
│   │   │   ├── ryu-2b029fb75f642309/
│   │   │   │   ├── dep-lib-ryu
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-ryu
│   │   │   │   └── lib-ryu.json
│   │   │   ├── scopeguard-ad99cde617213d11/
│   │   │   │   ├── dep-lib-scopeguard
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-scopeguard
│   │   │   │   └── lib-scopeguard.json
│   │   │   ├── scopeguard-b9526facf6e3d829/
│   │   │   │   ├── dep-lib-scopeguard
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-scopeguard
│   │   │   │   └── lib-scopeguard.json
│   │   │   ├── serde-357d6bd45c82aff9/
│   │   │   │   ├── dep-lib-serde
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde
│   │   │   │   └── lib-serde.json
│   │   │   ├── serde-3ffad2cabf6c7dc3/
│   │   │   │   ├── dep-lib-serde
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde
│   │   │   │   └── lib-serde.json
│   │   │   ├── serde-70d818a8ac4e8e84/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── serde-f27acb38fde803f5/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── serde_derive-7454b631601a5c65/
│   │   │   │   ├── dep-lib-serde_derive
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde_derive
│   │   │   │   └── lib-serde_derive.json
│   │   │   ├── serde_json-11e550c8b893c871/
│   │   │   │   ├── dep-lib-serde_json
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde_json
│   │   │   │   └── lib-serde_json.json
│   │   │   ├── serde_json-25fb346684fe65ff/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── serde_json-32e9ee68e75b0ae1/
│   │   │   │   ├── dep-lib-serde_json
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde_json
│   │   │   │   └── lib-serde_json.json
│   │   │   ├── serde_json-a0cf46d8eebaa38b/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── shlex-d106222457ada843/
│   │   │   │   ├── dep-lib-shlex
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-shlex
│   │   │   │   └── lib-shlex.json
│   │   │   ├── signal-hook-registry-27db3fa2ed282ba8/
│   │   │   │   ├── dep-lib-signal_hook_registry
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-signal_hook_registry
│   │   │   │   └── lib-signal_hook_registry.json
│   │   │   ├── signal-hook-registry-db541058a1842b04/
│   │   │   │   ├── dep-lib-signal_hook_registry
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-signal_hook_registry
│   │   │   │   └── lib-signal_hook_registry.json
│   │   │   ├── smallvec-9d6f30967df905ea/
│   │   │   │   ├── dep-lib-smallvec
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-smallvec
│   │   │   │   └── lib-smallvec.json
│   │   │   ├── smallvec-c0d6a721d64fb601/
│   │   │   │   ├── dep-lib-smallvec
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-smallvec
│   │   │   │   └── lib-smallvec.json
│   │   │   ├── socket2-605f5575297e2fdf/
│   │   │   │   ├── dep-lib-socket2
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-socket2
│   │   │   │   └── lib-socket2.json
│   │   │   ├── socket2-aac956178f46dff5/
│   │   │   │   ├── dep-lib-socket2
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-socket2
│   │   │   │   └── lib-socket2.json
│   │   │   ├── syn-c0d138b435d8ffc0/
│   │   │   │   ├── dep-lib-syn
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-syn
│   │   │   │   └── lib-syn.json
│   │   │   ├── tempfile-4d76dcfad8e94c94/
│   │   │   │   ├── dep-lib-tempfile
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tempfile
│   │   │   │   └── lib-tempfile.json
│   │   │   ├── tempfile-f5a38718c3971818/
│   │   │   │   ├── dep-lib-tempfile
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tempfile
│   │   │   │   └── lib-tempfile.json
│   │   │   ├── tokio-5f1961ef97b4ae30/
│   │   │   │   ├── dep-lib-tokio
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tokio
│   │   │   │   └── lib-tokio.json
│   │   │   ├── tokio-ee6299d4ebcb6868/
│   │   │   │   ├── dep-lib-tokio
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tokio
│   │   │   │   └── lib-tokio.json
│   │   │   ├── tokio-macros-d46ab2ba720f1bfd/
│   │   │   │   ├── dep-lib-tokio_macros
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tokio_macros
│   │   │   │   └── lib-tokio_macros.json
│   │   │   ├── tweet-scrolls-059bfae2bb171275/
│   │   │   │   ├── dep-test-bin-test_parsing
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_parsing
│   │   │   │   └── test-bin-test_parsing.json
│   │   │   ├── tweet-scrolls-079987a384dd2f4f/
│   │   │   │   ├── dep-test-integration-test-cli_args_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output-test-integration-test-cli_args_tests
│   │   │   │   ├── test-integration-test-cli_args_tests
│   │   │   │   └── test-integration-test-cli_args_tests.json
│   │   │   ├── tweet-scrolls-0964cfb282345c8e/
│   │   │   │   ├── dep-test-bin-test_mvp_simple
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_mvp_simple
│   │   │   │   └── test-bin-test_mvp_simple.json
│   │   │   ├── tweet-scrolls-096c287d7fa53d9a/
│   │   │   │   ├── dep-test-integration-test-file_generation_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-file_generation_tests
│   │   │   │   └── test-integration-test-file_generation_tests.json
│   │   │   ├── tweet-scrolls-0a0269251fde060f/
│   │   │   │   ├── dep-test-bin-schema_discovery
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-schema_discovery
│   │   │   │   └── test-bin-schema_discovery.json
│   │   │   ├── tweet-scrolls-0aadb9c13261ba59/
│   │   │   │   ├── dep-test-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-lib-tweet_scrolls
│   │   │   │   └── test-lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-0c4e985970f8dfe4/
│   │   │   │   ├── dep-test-integration-test-enhanced_csv_writer_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-enhanced_csv_writer_tests
│   │   │   │   └── test-integration-test-enhanced_csv_writer_tests.json
│   │   │   ├── tweet-scrolls-0d34e443ca027259/
│   │   │   │   ├── dep-test-bin-tweet_coverage_analysis
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-tweet_coverage_analysis
│   │   │   │   └── test-bin-tweet_coverage_analysis.json
│   │   │   ├── tweet-scrolls-0d868e6da0db8eef/
│   │   │   │   ├── dep-test-bin-schema_discovery
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-schema_discovery
│   │   │   │   └── test-bin-schema_discovery.json
│   │   │   ├── tweet-scrolls-12b8d75a70e27f51/
│   │   │   │   ├── dep-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tweet_scrolls
│   │   │   │   └── lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-13697124a1683611/
│   │   │   │   ├── dep-test-integration-test-working_enhanced_features_test
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-working_enhanced_features_test
│   │   │   │   └── test-integration-test-working_enhanced_features_test.json
│   │   │   ├── tweet-scrolls-13d2cff3660eaecb/
│   │   │   │   ├── dep-test-integration-test-main_function_integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-main_function_integration_tests
│   │   │   │   └── test-integration-test-main_function_integration_tests.json
│   │   │   ├── tweet-scrolls-1dcece7e78a7d288/
│   │   │   │   ├── bin-test_dm_headers
│   │   │   │   ├── bin-test_dm_headers.json
│   │   │   │   ├── dep-bin-test_dm_headers
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-21a12f1deaee5d1e/
│   │   │   │   ├── dep-test-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-lib-tweet_scrolls
│   │   │   │   └── test-lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-220c94be201af150/
│   │   │   │   ├── dep-test-bin-tweet_coverage_analysis
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-tweet_coverage_analysis
│   │   │   │   └── test-bin-tweet_coverage_analysis.json
│   │   │   ├── tweet-scrolls-31accbf11bb115de/
│   │   │   │   ├── dep-test-integration-test-file_generation_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-file_generation_tests
│   │   │   │   └── test-integration-test-file_generation_tests.json
│   │   │   ├── tweet-scrolls-327e3db5f26cc173/
│   │   │   │   ├── dep-test-integration-test-enhanced_csv_writer_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-enhanced_csv_writer_tests
│   │   │   │   └── test-integration-test-enhanced_csv_writer_tests.json
│   │   │   ├── tweet-scrolls-34c4116aafd40b6e/
│   │   │   │   ├── dep-test-integration-test-main_integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-main_integration_tests
│   │   │   │   └── test-integration-test-main_integration_tests.json
│   │   │   ├── tweet-scrolls-351ea21092e036df/
│   │   │   │   ├── dep-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tweet_scrolls
│   │   │   │   └── lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-39ed21a29c2ae47f/
│   │   │   │   ├── dep-test-integration-test-integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-integration_tests
│   │   │   │   └── test-integration-test-integration_tests.json
│   │   │   ├── tweet-scrolls-3b00f0bf5b0e240b/
│   │   │   │   ├── dep-test-integration-test-file_generation_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-file_generation_tests
│   │   │   │   └── test-integration-test-file_generation_tests.json
│   │   │   ├── tweet-scrolls-3f1780e034254446/
│   │   │   │   ├── dep-test-bin-tweet-scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-tweet-scrolls
│   │   │   │   └── test-bin-tweet-scrolls.json
│   │   │   ├── tweet-scrolls-481ecd10127d8a48/
│   │   │   │   ├── dep-test-integration-test-integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-integration_tests
│   │   │   │   └── test-integration-test-integration_tests.json
│   │   │   ├── tweet-scrolls-4846fe7013c99397/
│   │   │   │   ├── bin-schema_discovery
│   │   │   │   ├── bin-schema_discovery.json
│   │   │   │   ├── dep-bin-schema_discovery
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-4c06271d3e074b7d/
│   │   │   │   ├── bin-test_parsing
│   │   │   │   ├── bin-test_parsing.json
│   │   │   │   ├── dep-bin-test_parsing
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-5611ce84cffa0812/
│   │   │   │   ├── dep-test-bin-test_dm_headers
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_dm_headers
│   │   │   │   └── test-bin-test_dm_headers.json
│   │   │   ├── tweet-scrolls-57f8920ce02b4e37/
│   │   │   │   ├── bin-tweet-scrolls
│   │   │   │   ├── bin-tweet-scrolls.json
│   │   │   │   ├── dep-bin-tweet-scrolls
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-58cf6c074c3f9bd1/
│   │   │   │   ├── dep-test-integration-test-main_integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-main_integration_tests
│   │   │   │   └── test-integration-test-main_integration_tests.json
│   │   │   ├── tweet-scrolls-63e757ff24196ad4/
│   │   │   │   ├── bin-tweet-scrolls
│   │   │   │   ├── bin-tweet-scrolls.json
│   │   │   │   ├── dep-bin-tweet-scrolls
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-6407b69ab4ae8310/
│   │   │   │   ├── dep-test-integration-test-cli_args_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output-test-integration-test-cli_args_tests
│   │   │   │   ├── test-integration-test-cli_args_tests
│   │   │   │   └── test-integration-test-cli_args_tests.json
│   │   │   ├── tweet-scrolls-671878e071352054/
│   │   │   │   ├── dep-test-bin-test_dm_headers
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_dm_headers
│   │   │   │   └── test-bin-test_dm_headers.json
│   │   │   ├── tweet-scrolls-734f10c10c028c22/
│   │   │   │   ├── dep-test-integration-test-file_generation_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-file_generation_tests
│   │   │   │   └── test-integration-test-file_generation_tests.json
│   │   │   ├── tweet-scrolls-7d7db5953e8c397f/
│   │   │   │   ├── dep-test-bin-test_mvp_simple
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_mvp_simple
│   │   │   │   └── test-bin-test_mvp_simple.json
│   │   │   ├── tweet-scrolls-866fa54413965349/
│   │   │   │   ├── bin-test_dm_headers
│   │   │   │   ├── bin-test_dm_headers.json
│   │   │   │   ├── dep-bin-test_dm_headers
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-86b38b28aacb8915/
│   │   │   │   ├── bin-test_parsing
│   │   │   │   ├── bin-test_parsing.json
│   │   │   │   ├── dep-bin-test_parsing
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-86ed3a3ec640be1c/
│   │   │   │   ├── dep-test-integration-test-enhanced_csv_writer_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-enhanced_csv_writer_tests
│   │   │   │   └── test-integration-test-enhanced_csv_writer_tests.json
│   │   │   ├── tweet-scrolls-8a936d30456c7107/
│   │   │   │   ├── dep-test-integration-test-enhanced_tweet_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-enhanced_tweet_tests
│   │   │   │   └── test-integration-test-enhanced_tweet_tests.json
│   │   │   ├── tweet-scrolls-8f0ca6b2ca3660d8/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output-test-bin-file-splitter
│   │   │   │   ├── test-bin-file-splitter
│   │   │   │   └── test-bin-file-splitter.json
│   │   │   ├── tweet-scrolls-9044a2c4e3f9da59/
│   │   │   │   ├── dep-test-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-lib-tweet_scrolls
│   │   │   │   └── test-lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-9103f07434908a4f/
│   │   │   │   ├── dep-test-bin-tweet-scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-tweet-scrolls
│   │   │   │   └── test-bin-tweet-scrolls.json
│   │   │   ├── tweet-scrolls-94a5e9515e8c797a/
│   │   │   │   ├── bin-file-splitter
│   │   │   │   ├── bin-file-splitter.json
│   │   │   │   ├── dep-bin-file-splitter
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-964a96a6d80cd530/
│   │   │   │   ├── doc-bin-schema_discovery
│   │   │   │   ├── doc-bin-schema_discovery.json
│   │   │   │   ├── doc-bin-test_dm_headers
│   │   │   │   ├── doc-bin-test_dm_headers.json
│   │   │   │   ├── doc-bin-test_mvp_simple
│   │   │   │   ├── doc-bin-test_mvp_simple.json
│   │   │   │   ├── doc-bin-test_parsing
│   │   │   │   ├── doc-bin-test_parsing.json
│   │   │   │   ├── doc-bin-tweet_coverage_analysis
│   │   │   │   ├── doc-bin-tweet_coverage_analysis.json
│   │   │   │   ├── doc-lib-tweet_scrolls
│   │   │   │   └── doc-lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-98a3e9d1dbbf0aa0/
│   │   │   │   ├── dep-test-integration-test-timeline_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-timeline_tests
│   │   │   │   └── test-integration-test-timeline_tests.json
│   │   │   ├── tweet-scrolls-a94f284ffb61cb2d/
│   │   │   │   ├── dep-test-bin-test_mvp_simple
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_mvp_simple
│   │   │   │   └── test-bin-test_mvp_simple.json
│   │   │   ├── tweet-scrolls-ac7f51546c9c4d06/
│   │   │   │   ├── dep-test-integration-test-enhanced_csv_writer_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-enhanced_csv_writer_tests
│   │   │   │   └── test-integration-test-enhanced_csv_writer_tests.json
│   │   │   ├── tweet-scrolls-acdc57913bc53b47/
│   │   │   │   ├── bin-file-splitter
│   │   │   │   ├── bin-file-splitter.json
│   │   │   │   ├── invoked.timestamp
│   │   │   │   └── output-bin-file-splitter
│   │   │   ├── tweet-scrolls-ae56311c73706f74/
│   │   │   │   ├── dep-test-bin-tweet-scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-tweet-scrolls
│   │   │   │   └── test-bin-tweet-scrolls.json
│   │   │   ├── tweet-scrolls-b10db88b4829b50f/
│   │   │   │   ├── dep-test-bin-tweet_coverage_analysis
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-tweet_coverage_analysis
│   │   │   │   └── test-bin-tweet_coverage_analysis.json
│   │   │   ├── tweet-scrolls-b23161166a15c102/
│   │   │   │   ├── bin-test_dm_headers
│   │   │   │   ├── bin-test_dm_headers.json
│   │   │   │   ├── dep-bin-test_dm_headers
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-bf6f0d3ea1db6ed3/
│   │   │   │   ├── dep-test-integration-test-main_function_integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-main_function_integration_tests
│   │   │   │   └── test-integration-test-main_function_integration_tests.json
│   │   │   ├── tweet-scrolls-c40fda6595b8e2cf/
│   │   │   │   ├── dep-test-integration-test-working_enhanced_features_test
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-working_enhanced_features_test
│   │   │   │   └── test-integration-test-working_enhanced_features_test.json
│   │   │   ├── tweet-scrolls-c6061ebb39aa3e2f/
│   │   │   │   ├── dep-test-bin-test_parsing
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_parsing
│   │   │   │   └── test-bin-test_parsing.json
│   │   │   ├── tweet-scrolls-cb858ec5ad83cff1/
│   │   │   │   ├── bin-test_mvp_simple
│   │   │   │   ├── bin-test_mvp_simple.json
│   │   │   │   ├── dep-bin-test_mvp_simple
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-d13e31d6a0ec629f/
│   │   │   │   ├── bin-schema_discovery
│   │   │   │   ├── bin-schema_discovery.json
│   │   │   │   ├── dep-bin-schema_discovery
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-d682df8be2c0fee8/
│   │   │   │   ├── bin-test_mvp_simple
│   │   │   │   ├── bin-test_mvp_simple.json
│   │   │   │   ├── dep-bin-test_mvp_simple
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-d79c2b9bf78e4d5b/
│   │   │   │   ├── bin-test_mvp_simple
│   │   │   │   ├── bin-test_mvp_simple.json
│   │   │   │   ├── dep-bin-test_mvp_simple
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-d93a28ef229ef3d2/
│   │   │   │   ├── bin-tweet_coverage_analysis
│   │   │   │   ├── bin-tweet_coverage_analysis.json
│   │   │   │   ├── dep-bin-tweet_coverage_analysis
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-de73f80423528249/
│   │   │   │   ├── bin-tweet_coverage_analysis
│   │   │   │   ├── bin-tweet_coverage_analysis.json
│   │   │   │   ├── dep-bin-tweet_coverage_analysis
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-dee6085152f2067b/
│   │   │   │   ├── dep-test-bin-test_dm_headers
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_dm_headers
│   │   │   │   └── test-bin-test_dm_headers.json
│   │   │   ├── tweet-scrolls-df16a6f8ab4c2244/
│   │   │   │   ├── dep-test-bin-test_parsing
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-test_parsing
│   │   │   │   └── test-bin-test_parsing.json
│   │   │   ├── tweet-scrolls-df42d969ae47891b/
│   │   │   │   ├── dep-test-integration-test-timeline_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-timeline_tests
│   │   │   │   └── test-integration-test-timeline_tests.json
│   │   │   ├── tweet-scrolls-e345c04bbda7905b/
│   │   │   │   ├── dep-test-integration-test-timeline_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-timeline_tests
│   │   │   │   └── test-integration-test-timeline_tests.json
│   │   │   ├── tweet-scrolls-e7b9652ce6bf315b/
│   │   │   │   ├── dep-test-integration-test-timeline_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-timeline_tests
│   │   │   │   └── test-integration-test-timeline_tests.json
│   │   │   ├── tweet-scrolls-e8e5db72edb6185c/
│   │   │   │   ├── bin-tweet_coverage_analysis
│   │   │   │   ├── bin-tweet_coverage_analysis.json
│   │   │   │   ├── dep-bin-tweet_coverage_analysis
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-edd853c428e105ff/
│   │   │   │   ├── dep-test-bin-file-splitter
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-file-splitter
│   │   │   │   └── test-bin-file-splitter.json
│   │   │   ├── tweet-scrolls-f2aec2746bb858a8/
│   │   │   │   ├── dep-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tweet_scrolls
│   │   │   │   └── lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-f4883bcf8caf75e4/
│   │   │   │   ├── bin-test_parsing
│   │   │   │   ├── bin-test_parsing.json
│   │   │   │   ├── dep-bin-test_parsing
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-f53752a038ced85c/
│   │   │   │   ├── bin-schema_discovery
│   │   │   │   ├── bin-schema_discovery.json
│   │   │   │   ├── dep-bin-schema_discovery
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-f8774f0769305a65/
│   │   │   │   ├── bin-tweet-scrolls
│   │   │   │   ├── bin-tweet-scrolls.json
│   │   │   │   ├── dep-bin-tweet-scrolls
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-fa3070b418f434c6/
│   │   │   │   ├── dep-test-integration-test-main_integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-main_integration_tests
│   │   │   │   └── test-integration-test-main_integration_tests.json
│   │   │   ├── tweet-scrolls-fb5d9c0b54b763b6/
│   │   │   │   ├── dep-test-integration-test-integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-integration_tests
│   │   │   │   └── test-integration-test-integration_tests.json
│   │   │   ├── tweet-scrolls-fe89c9fe73f4e885/
│   │   │   │   ├── dep-test-integration-test-main_integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-main_integration_tests
│   │   │   │   └── test-integration-test-main_integration_tests.json
│   │   │   ├── tweet-scrolls-fed649b7c9b7fc9c/
│   │   │   │   ├── dep-test-bin-schema_discovery
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-bin-schema_discovery
│   │   │   │   └── test-bin-schema_discovery.json
│   │   │   ├── tweet-scrolls-ff7c2534b99c2132/
│   │   │   │   ├── dep-test-integration-test-integration_tests
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── test-integration-test-integration_tests
│   │   │   │   └── test-integration-test-integration_tests.json
│   │   │   ├── unicode-ident-72515b00c2ad622b/
│   │   │   │   ├── dep-lib-unicode_ident
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-unicode_ident
│   │   │   │   └── lib-unicode_ident.json
│   │   │   ├── unicode-width-161bcd06aa9015d7/
│   │   │   │   ├── dep-lib-unicode_width
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-unicode_width
│   │   │   │   └── lib-unicode_width.json
│   │   │   └── unicode-width-86c07edd1a7e8663/
│   │   │       ├── dep-lib-unicode_width
│   │   │       ├── invoked.timestamp
│   │   │       ├── lib-unicode_width
│   │   │       └── lib-unicode_width.json
│   │   ├── build/
│   │   │   ├── anyhow-3983b80c02c87e8d/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── anyhow-576588ce1912ba72/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-576588ce1912ba72
│   │   │   │   └── build_script_build-576588ce1912ba72.d
│   │   │   ├── blake3-1faee5c13e575155/
│   │   │   │   ├── out/
│   │   │   │   │   ├── b8423798394d5395-blake3_avx2_x86-64_unix.o
│   │   │   │   │   ├── b8423798394d5395-blake3_avx512_x86-64_unix.o
│   │   │   │   │   ├── b8423798394d5395-blake3_sse2_x86-64_unix.o
│   │   │   │   │   ├── b8423798394d5395-blake3_sse41_x86-64_unix.o
│   │   │   │   │   ├── flag_check
│   │   │   │   │   ├── flag_check.c
│   │   │   │   │   ├── libblake3_avx512_assembly.a
│   │   │   │   │   └── libblake3_sse2_sse41_avx2_assembly.a
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── blake3-53c8ddfac0903482/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-53c8ddfac0903482
│   │   │   │   └── build_script_build-53c8ddfac0903482.d
│   │   │   ├── getrandom-0750ac7126e00fb4/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── getrandom-d3c24bec6ce15115/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-d3c24bec6ce15115
│   │   │   │   └── build_script_build-d3c24bec6ce15115.d
│   │   │   ├── libc-6a0d2fa0357afec8/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── libc-81472a11ec80f9bf/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-81472a11ec80f9bf
│   │   │   │   └── build_script_build-81472a11ec80f9bf.d
│   │   │   ├── libmimalloc-sys-b83d869c36c06d62/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-b83d869c36c06d62
│   │   │   │   └── build_script_build-b83d869c36c06d62.d
│   │   │   ├── libmimalloc-sys-d8dda4db6e1874dd/
│   │   │   │   ├── out/
│   │   │   │   │   ├── 5a07bf3761bb5df8-static.o
│   │   │   │   │   ├── flag_check
│   │   │   │   │   ├── flag_check.c
│   │   │   │   │   └── libmimalloc.a
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── lock_api-2c85fbb99ba6bd11/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-2c85fbb99ba6bd11
│   │   │   │   └── build_script_build-2c85fbb99ba6bd11.d
│   │   │   ├── lock_api-374c6c4c0575362e/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── num-traits-804b22f785e72b8b/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── num-traits-d6ded1e9e6011fe4/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-d6ded1e9e6011fe4
│   │   │   │   └── build_script_build-d6ded1e9e6011fe4.d
│   │   │   ├── parking_lot_core-1ef48b14fa3a5d36/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-1ef48b14fa3a5d36
│   │   │   │   └── build_script_build-1ef48b14fa3a5d36.d
│   │   │   ├── parking_lot_core-51a4a0b9def35e30/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── portable-atomic-c12e5e5e6b481c60/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-c12e5e5e6b481c60
│   │   │   │   └── build_script_build-c12e5e5e6b481c60.d
│   │   │   ├── portable-atomic-e95d0732ba650788/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── proc-macro2-088e3658df3bfa80/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── proc-macro2-56b738f29d907136/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-56b738f29d907136
│   │   │   │   └── build_script_build-56b738f29d907136.d
│   │   │   ├── rustix-7b1a3ad741ce33be/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── rustix-f50c41acdcaafe2b/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-f50c41acdcaafe2b
│   │   │   │   └── build_script_build-f50c41acdcaafe2b.d
│   │   │   ├── serde-70d818a8ac4e8e84/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── serde-f27acb38fde803f5/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-f27acb38fde803f5
│   │   │   │   └── build_script_build-f27acb38fde803f5.d
│   │   │   ├── serde_json-25fb346684fe65ff/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   └── serde_json-a0cf46d8eebaa38b/
│   │   │       ├── build-script-build
│   │   │       ├── build_script_build-a0cf46d8eebaa38b
│   │   │       └── build_script_build-a0cf46d8eebaa38b.d
│   │   ├── deps/
│   │   │   ├── aho_corasick-bf78833d83099a98.d
│   │   │   ├── aho_corasick-dd05ff9ce8a4d233.d
│   │   │   ├── anyhow-63da0aae709648a4.d
│   │   │   ├── anyhow-f6ff93c6c71753a8.d
│   │   │   ├── arrayref-472dedde991e7fdd.d
│   │   │   ├── arrayref-8810d36dfce84b89.d
│   │   │   ├── arrayvec-a3b52b06a1e3d505.d
│   │   │   ├── arrayvec-e748fabf2b02b1bc.d
│   │   │   ├── autocfg-838bb28b09540f8f.d
│   │   │   ├── bitflags-8223004ab2314a05.d
│   │   │   ├── bitflags-fbb92cf157890939.d
│   │   │   ├── blake3-312c8930c3f1f14f.d
│   │   │   ├── blake3-6e0eb2bd0b8d1f1a.d
│   │   │   ├── bytes-2494798bf6c9c10a.d
│   │   │   ├── bytes-65cf51464acf5aed.d
│   │   │   ├── cc-912944931342a878.d
│   │   │   ├── cfg_if-bccabb5d440a8c74.d
│   │   │   ├── cfg_if-fef044fd1169f9d7.d
│   │   │   ├── chrono-bb920937a5e754b2.d
│   │   │   ├── chrono-ffb2d3f254c32510.d
│   │   │   ├── cli_args_tests-079987a384dd2f4f.d
│   │   │   ├── cli_args_tests-6407b69ab4ae8310.d
│   │   │   ├── console-2b2a07baaadda64b.d
│   │   │   ├── console-bfe2e0af22e5eaad.d
│   │   │   ├── constant_time_eq-7b09f7b0b46b3ae8.d
│   │   │   ├── constant_time_eq-d0dd5e4a2b6da121.d
│   │   │   ├── csv-993e3938b6ad8375.d
│   │   │   ├── csv-d29ebc8e60b6cb12.d
│   │   │   ├── csv_core-0b79482fc9b73826.d
│   │   │   ├── csv_core-7c6c627743d8aa01.d
│   │   │   ├── enhanced_csv_writer_tests-0c4e985970f8dfe4.d
│   │   │   ├── enhanced_csv_writer_tests-327e3db5f26cc173.d
│   │   │   ├── enhanced_csv_writer_tests-86ed3a3ec640be1c.d
│   │   │   ├── enhanced_csv_writer_tests-ac7f51546c9c4d06.d
│   │   │   ├── enhanced_tweet_tests-8a936d30456c7107.d
│   │   │   ├── fastrand-421b3eec792ef00b.d
│   │   │   ├── fastrand-4fbc03669feade46.d
│   │   │   ├── file_generation_tests-096c287d7fa53d9a.d
│   │   │   ├── file_generation_tests-31accbf11bb115de.d
│   │   │   ├── file_generation_tests-3b00f0bf5b0e240b.d
│   │   │   ├── file_generation_tests-734f10c10c028c22.d
│   │   │   ├── file_splitter-8f0ca6b2ca3660d8.d
│   │   │   ├── file_splitter-94a5e9515e8c797a.d
│   │   │   ├── file_splitter-acdc57913bc53b47.d
│   │   │   ├── file_splitter-edd853c428e105ff.d
│   │   │   ├── float_cmp-393023b0080ab75a.d
│   │   │   ├── float_cmp-78d21334b6d974ab.d
│   │   │   ├── getrandom-325c9e82d42539c3.d
│   │   │   ├── getrandom-92541474e5b7ec0b.d
│   │   │   ├── iana_time_zone-e247134c535585ad.d
│   │   │   ├── iana_time_zone-f35e8b92c117541d.d
│   │   │   ├── indicatif-06f47c947b7f770e.d
│   │   │   ├── indicatif-32e548b034e6c7ae.d
│   │   │   ├── integration_tests-39ed21a29c2ae47f.d
│   │   │   ├── integration_tests-481ecd10127d8a48.d
│   │   │   ├── integration_tests-fb5d9c0b54b763b6.d
│   │   │   ├── integration_tests-ff7c2534b99c2132.d
│   │   │   ├── itoa-1bcb368356bf449a.d
│   │   │   ├── itoa-4251cf9dbda9db70.d
│   │   │   ├── libaho_corasick-bf78833d83099a98.rmeta
│   │   │   ├── libaho_corasick-dd05ff9ce8a4d233.rmeta
│   │   │   ├── libanyhow-63da0aae709648a4.rmeta
│   │   │   ├── libanyhow-f6ff93c6c71753a8.rlib
│   │   │   ├── libanyhow-f6ff93c6c71753a8.rmeta
│   │   │   ├── libarrayref-472dedde991e7fdd.rmeta
│   │   │   ├── libarrayref-8810d36dfce84b89.rlib
│   │   │   ├── libarrayref-8810d36dfce84b89.rmeta
│   │   │   ├── libarrayvec-a3b52b06a1e3d505.rmeta
│   │   │   ├── libarrayvec-e748fabf2b02b1bc.rlib
│   │   │   ├── libarrayvec-e748fabf2b02b1bc.rmeta
│   │   │   ├── libautocfg-838bb28b09540f8f.rlib
│   │   │   ├── libautocfg-838bb28b09540f8f.rmeta
│   │   │   ├── libbitflags-8223004ab2314a05.rmeta
│   │   │   ├── libbitflags-fbb92cf157890939.rlib
│   │   │   ├── libbitflags-fbb92cf157890939.rmeta
│   │   │   ├── libblake3-312c8930c3f1f14f.rlib
│   │   │   ├── libblake3-312c8930c3f1f14f.rmeta
│   │   │   ├── libblake3-6e0eb2bd0b8d1f1a.rmeta
│   │   │   ├── libbytes-2494798bf6c9c10a.rmeta
│   │   │   ├── libbytes-65cf51464acf5aed.rlib
│   │   │   ├── libbytes-65cf51464acf5aed.rmeta
│   │   │   ├── libc-3cb8cd7c460bf4d0.d
│   │   │   ├── libc-ad50e0119d53a6a7.d
│   │   │   ├── libcc-912944931342a878.rlib
│   │   │   ├── libcc-912944931342a878.rmeta
│   │   │   ├── libcfg_if-bccabb5d440a8c74.rlib
│   │   │   ├── libcfg_if-bccabb5d440a8c74.rmeta
│   │   │   ├── libcfg_if-fef044fd1169f9d7.rmeta
│   │   │   ├── libchrono-bb920937a5e754b2.rmeta
│   │   │   ├── libchrono-ffb2d3f254c32510.rlib
│   │   │   ├── libchrono-ffb2d3f254c32510.rmeta
│   │   │   ├── libcli_args_tests-6407b69ab4ae8310.rmeta
│   │   │   ├── libconsole-2b2a07baaadda64b.rmeta
│   │   │   ├── libconsole-bfe2e0af22e5eaad.rlib
│   │   │   ├── libconsole-bfe2e0af22e5eaad.rmeta
│   │   │   ├── libconstant_time_eq-7b09f7b0b46b3ae8.rmeta
│   │   │   ├── libconstant_time_eq-d0dd5e4a2b6da121.rlib
│   │   │   ├── libconstant_time_eq-d0dd5e4a2b6da121.rmeta
│   │   │   ├── libcsv-993e3938b6ad8375.rlib
│   │   │   ├── libcsv-993e3938b6ad8375.rmeta
│   │   │   ├── libcsv-d29ebc8e60b6cb12.rmeta
│   │   │   ├── libcsv_core-0b79482fc9b73826.rmeta
│   │   │   ├── libcsv_core-7c6c627743d8aa01.rlib
│   │   │   ├── libcsv_core-7c6c627743d8aa01.rmeta
│   │   │   ├── libenhanced_csv_writer_tests-86ed3a3ec640be1c.rmeta
│   │   │   ├── libenhanced_csv_writer_tests-ac7f51546c9c4d06.rmeta
│   │   │   ├── libenhanced_tweet_tests-8a936d30456c7107.rmeta
│   │   │   ├── libfastrand-421b3eec792ef00b.rmeta
│   │   │   ├── libfastrand-4fbc03669feade46.rlib
│   │   │   ├── libfastrand-4fbc03669feade46.rmeta
│   │   │   ├── libfile_generation_tests-096c287d7fa53d9a.rmeta
│   │   │   ├── libfile_generation_tests-3b00f0bf5b0e240b.rmeta
│   │   │   ├── libfloat_cmp-393023b0080ab75a.rlib
│   │   │   ├── libfloat_cmp-393023b0080ab75a.rmeta
│   │   │   ├── libfloat_cmp-78d21334b6d974ab.rmeta
│   │   │   ├── libgetrandom-325c9e82d42539c3.rlib
│   │   │   ├── libgetrandom-325c9e82d42539c3.rmeta
│   │   │   ├── libgetrandom-92541474e5b7ec0b.rmeta
│   │   │   ├── libiana_time_zone-e247134c535585ad.rlib
│   │   │   ├── libiana_time_zone-e247134c535585ad.rmeta
│   │   │   ├── libiana_time_zone-f35e8b92c117541d.rmeta
│   │   │   ├── libindicatif-06f47c947b7f770e.rlib
│   │   │   ├── libindicatif-06f47c947b7f770e.rmeta
│   │   │   ├── libindicatif-32e548b034e6c7ae.rmeta
│   │   │   ├── libintegration_tests-481ecd10127d8a48.rmeta
│   │   │   ├── libintegration_tests-fb5d9c0b54b763b6.rmeta
│   │   │   ├── libitoa-1bcb368356bf449a.rmeta
│   │   │   ├── libitoa-4251cf9dbda9db70.rlib
│   │   │   ├── libitoa-4251cf9dbda9db70.rmeta
│   │   │   ├── liblibc-3cb8cd7c460bf4d0.rmeta
│   │   │   ├── liblibc-ad50e0119d53a6a7.rlib
│   │   │   ├── liblibc-ad50e0119d53a6a7.rmeta
│   │   │   ├── liblibmimalloc_sys-3b6ff8c782a2e53f.rmeta
│   │   │   ├── liblibmimalloc_sys-cd19445c8fb99018.rlib
│   │   │   ├── liblibmimalloc_sys-cd19445c8fb99018.rmeta
│   │   │   ├── liblinux_raw_sys-7db915187bbfa99f.rlib
│   │   │   ├── liblinux_raw_sys-7db915187bbfa99f.rmeta
│   │   │   ├── liblinux_raw_sys-f4c5a5247e144062.rmeta
│   │   │   ├── liblock_api-0650ffb97f75b6c8.rmeta
│   │   │   ├── liblock_api-ca81c95bd8e24e2c.rlib
│   │   │   ├── liblock_api-ca81c95bd8e24e2c.rmeta
│   │   │   ├── libmain_function_integration_tests-13d2cff3660eaecb.rmeta
│   │   │   ├── libmain_integration_tests-58cf6c074c3f9bd1.rmeta
│   │   │   ├── libmain_integration_tests-fe89c9fe73f4e885.rmeta
│   │   │   ├── libmemchr-78a7b53c9e3fce39.rmeta
│   │   │   ├── libmemchr-ccc49080a94bc177.rlib
│   │   │   ├── libmemchr-ccc49080a94bc177.rmeta
│   │   │   ├── libmimalloc-1097d240e664096b.rmeta
│   │   │   ├── libmimalloc-5bc3996fbad6e211.rlib
│   │   │   ├── libmimalloc-5bc3996fbad6e211.rmeta
│   │   │   ├── libmimalloc_sys-3b6ff8c782a2e53f.d
│   │   │   ├── libmimalloc_sys-cd19445c8fb99018.d
│   │   │   ├── libmio-33e73a15b9ad75ba.rlib
│   │   │   ├── libmio-33e73a15b9ad75ba.rmeta
│   │   │   ├── libmio-b51a3b7665de9dc8.rmeta
│   │   │   ├── libnum_traits-76745a1ad5157120.rmeta
│   │   │   ├── libnum_traits-97af914fd8aa808b.rlib
│   │   │   ├── libnum_traits-97af914fd8aa808b.rmeta
│   │   │   ├── libnumber_prefix-8151130432547dfc.rlib
│   │   │   ├── libnumber_prefix-8151130432547dfc.rmeta
│   │   │   ├── libnumber_prefix-d745c5aa15134906.rmeta
│   │   │   ├── libonce_cell-1312a3b7504e084f.rlib
│   │   │   ├── libonce_cell-1312a3b7504e084f.rmeta
│   │   │   ├── libonce_cell-fd0cb448d3c3ba68.rmeta
│   │   │   ├── libparking_lot-6f8afbe641187745.rlib
│   │   │   ├── libparking_lot-6f8afbe641187745.rmeta
│   │   │   ├── libparking_lot-d349638518deecb1.rmeta
│   │   │   ├── libparking_lot_core-3a57758d45edf910.rmeta
│   │   │   ├── libparking_lot_core-3c0fd58bb02c7b32.rlib
│   │   │   ├── libparking_lot_core-3c0fd58bb02c7b32.rmeta
│   │   │   ├── libpin_project_lite-3105ca702ac211cc.rmeta
│   │   │   ├── libpin_project_lite-34e36f5fb14d188f.rlib
│   │   │   ├── libpin_project_lite-34e36f5fb14d188f.rmeta
│   │   │   ├── libportable_atomic-3c6cf0447b8ab1da.rmeta
│   │   │   ├── libportable_atomic-daab7383681b36e4.rlib
│   │   │   ├── libportable_atomic-daab7383681b36e4.rmeta
│   │   │   ├── libproc_macro2-864a640ffc352dc4.rlib
│   │   │   ├── libproc_macro2-864a640ffc352dc4.rmeta
│   │   │   ├── libquote-37bb756b6b63edfd.rlib
│   │   │   ├── libquote-37bb756b6b63edfd.rmeta
│   │   │   ├── libregex-0ce20365a54a7e9b.rmeta
│   │   │   ├── libregex-4846e953dc341daf.rlib
│   │   │   ├── libregex-4846e953dc341daf.rmeta
│   │   │   ├── libregex_automata-13ad418a11196426.rmeta
│   │   │   ├── libregex_automata-6935fd0035d6c3f2.rmeta
│   │   │   ├── libregex_syntax-288020931f6ed2e9.rmeta
│   │   │   ├── libregex_syntax-b256970c651b9dfd.rmeta
│   │   │   ├── librustix-58a2edf3e7298cd1.rlib
│   │   │   ├── librustix-58a2edf3e7298cd1.rmeta
│   │   │   ├── librustix-7f2ebfc0cedee8c6.rmeta
│   │   │   ├── libryu-0c804e03277ff251.rlib
│   │   │   ├── libryu-0c804e03277ff251.rmeta
│   │   │   ├── libryu-2b029fb75f642309.rmeta
│   │   │   ├── libschema_discovery-0a0269251fde060f.rmeta
│   │   │   ├── libschema_discovery-0d868e6da0db8eef.rmeta
│   │   │   ├── libschema_discovery-4846fe7013c99397.rmeta
│   │   │   ├── libschema_discovery-f53752a038ced85c.rmeta
│   │   │   ├── libscopeguard-ad99cde617213d11.rmeta
│   │   │   ├── libscopeguard-b9526facf6e3d829.rlib
│   │   │   ├── libscopeguard-b9526facf6e3d829.rmeta
│   │   │   ├── libserde-357d6bd45c82aff9.rlib
│   │   │   ├── libserde-357d6bd45c82aff9.rmeta
│   │   │   ├── libserde-3ffad2cabf6c7dc3.rmeta
│   │   │   ├── libserde_derive-7454b631601a5c65.so
│   │   │   ├── libserde_json-11e550c8b893c871.rmeta
│   │   │   ├── libserde_json-32e9ee68e75b0ae1.rlib
│   │   │   ├── libserde_json-32e9ee68e75b0ae1.rmeta
│   │   │   ├── libshlex-d106222457ada843.rlib
│   │   │   ├── libshlex-d106222457ada843.rmeta
│   │   │   ├── libsignal_hook_registry-27db3fa2ed282ba8.rlib
│   │   │   ├── libsignal_hook_registry-27db3fa2ed282ba8.rmeta
│   │   │   ├── libsignal_hook_registry-db541058a1842b04.rmeta
│   │   │   ├── libsmallvec-9d6f30967df905ea.rlib
│   │   │   ├── libsmallvec-9d6f30967df905ea.rmeta
│   │   │   ├── libsmallvec-c0d6a721d64fb601.rmeta
│   │   │   ├── libsocket2-605f5575297e2fdf.rmeta
│   │   │   ├── libsocket2-aac956178f46dff5.rlib
│   │   │   ├── libsocket2-aac956178f46dff5.rmeta
│   │   │   ├── libsyn-c0d138b435d8ffc0.rlib
│   │   │   ├── libsyn-c0d138b435d8ffc0.rmeta
│   │   │   ├── libtempfile-4d76dcfad8e94c94.rlib
│   │   │   ├── libtempfile-4d76dcfad8e94c94.rmeta
│   │   │   ├── libtempfile-f5a38718c3971818.rmeta
│   │   │   ├── libtest_dm_headers-5611ce84cffa0812.rmeta
│   │   │   ├── libtest_dm_headers-866fa54413965349.rmeta
│   │   │   ├── libtest_dm_headers-b23161166a15c102.rmeta
│   │   │   ├── libtest_dm_headers-dee6085152f2067b.rmeta
│   │   │   ├── libtest_mvp_simple-0964cfb282345c8e.rmeta
│   │   │   ├── libtest_mvp_simple-a94f284ffb61cb2d.rmeta
│   │   │   ├── libtest_mvp_simple-d682df8be2c0fee8.rmeta
│   │   │   ├── libtest_mvp_simple-d79c2b9bf78e4d5b.rmeta
│   │   │   ├── libtest_parsing-059bfae2bb171275.rmeta
│   │   │   ├── libtest_parsing-86b38b28aacb8915.rmeta
│   │   │   ├── libtest_parsing-df16a6f8ab4c2244.rmeta
│   │   │   ├── libtest_parsing-f4883bcf8caf75e4.rmeta
│   │   │   ├── libtimeline_tests-98a3e9d1dbbf0aa0.rmeta
│   │   │   ├── libtimeline_tests-e7b9652ce6bf315b.rmeta
│   │   │   ├── libtokio-5f1961ef97b4ae30.rmeta
│   │   │   ├── libtokio-ee6299d4ebcb6868.rmeta
│   │   │   ├── libtokio_macros-d46ab2ba720f1bfd.so
│   │   │   ├── libtweet_coverage_analysis-0d34e443ca027259.rmeta
│   │   │   ├── libtweet_coverage_analysis-220c94be201af150.rmeta
│   │   │   ├── libtweet_coverage_analysis-d93a28ef229ef3d2.rmeta
│   │   │   ├── libtweet_coverage_analysis-de73f80423528249.rmeta
│   │   │   ├── libtweet_scrolls-12b8d75a70e27f51.rmeta
│   │   │   ├── libtweet_scrolls-21a12f1deaee5d1e.rmeta
│   │   │   ├── libtweet_scrolls-351ea21092e036df.rmeta
│   │   │   ├── libtweet_scrolls-3f1780e034254446.rmeta
│   │   │   ├── libtweet_scrolls-63e757ff24196ad4.rmeta
│   │   │   ├── libtweet_scrolls-9044a2c4e3f9da59.rmeta
│   │   │   ├── libtweet_scrolls-9103f07434908a4f.rmeta
│   │   │   ├── libtweet_scrolls-f2aec2746bb858a8.rmeta
│   │   │   ├── libtweet_scrolls-f8774f0769305a65.rmeta
│   │   │   ├── libunicode_ident-72515b00c2ad622b.rlib
│   │   │   ├── libunicode_ident-72515b00c2ad622b.rmeta
│   │   │   ├── libunicode_width-161bcd06aa9015d7.rmeta
│   │   │   ├── libunicode_width-86c07edd1a7e8663.rlib
│   │   │   ├── libunicode_width-86c07edd1a7e8663.rmeta
│   │   │   ├── libworking_enhanced_features_test-c40fda6595b8e2cf.rmeta
│   │   │   ├── linux_raw_sys-7db915187bbfa99f.d
│   │   │   ├── linux_raw_sys-f4c5a5247e144062.d
│   │   │   ├── lock_api-0650ffb97f75b6c8.d
│   │   │   ├── lock_api-ca81c95bd8e24e2c.d
│   │   │   ├── main_function_integration_tests-13d2cff3660eaecb.d
│   │   │   ├── main_function_integration_tests-bf6f0d3ea1db6ed3.d
│   │   │   ├── main_integration_tests-34c4116aafd40b6e.d
│   │   │   ├── main_integration_tests-58cf6c074c3f9bd1.d
│   │   │   ├── main_integration_tests-fa3070b418f434c6.d
│   │   │   ├── main_integration_tests-fe89c9fe73f4e885.d
│   │   │   ├── memchr-78a7b53c9e3fce39.d
│   │   │   ├── memchr-ccc49080a94bc177.d
│   │   │   ├── mimalloc-1097d240e664096b.d
│   │   │   ├── mimalloc-5bc3996fbad6e211.d
│   │   │   ├── mio-33e73a15b9ad75ba.d
│   │   │   ├── mio-b51a3b7665de9dc8.d
│   │   │   ├── num_traits-76745a1ad5157120.d
│   │   │   ├── num_traits-97af914fd8aa808b.d
│   │   │   ├── number_prefix-8151130432547dfc.d
│   │   │   ├── number_prefix-d745c5aa15134906.d
│   │   │   ├── once_cell-1312a3b7504e084f.d
│   │   │   ├── once_cell-fd0cb448d3c3ba68.d
│   │   │   ├── parking_lot-6f8afbe641187745.d
│   │   │   ├── parking_lot-d349638518deecb1.d
│   │   │   ├── parking_lot_core-3a57758d45edf910.d
│   │   │   ├── parking_lot_core-3c0fd58bb02c7b32.d
│   │   │   ├── pin_project_lite-3105ca702ac211cc.d
│   │   │   ├── pin_project_lite-34e36f5fb14d188f.d
│   │   │   ├── portable_atomic-3c6cf0447b8ab1da.d
│   │   │   ├── portable_atomic-daab7383681b36e4.d
│   │   │   ├── proc_macro2-864a640ffc352dc4.d
│   │   │   ├── quote-37bb756b6b63edfd.d
│   │   │   ├── regex-0ce20365a54a7e9b.d
│   │   │   ├── regex-4846e953dc341daf.d
│   │   │   ├── regex_automata-13ad418a11196426.d
│   │   │   ├── regex_automata-6935fd0035d6c3f2.d
│   │   │   ├── regex_syntax-288020931f6ed2e9.d
│   │   │   ├── regex_syntax-b256970c651b9dfd.d
│   │   │   ├── rustix-58a2edf3e7298cd1.d
│   │   │   ├── rustix-7f2ebfc0cedee8c6.d
│   │   │   ├── ryu-0c804e03277ff251.d
│   │   │   ├── ryu-2b029fb75f642309.d
│   │   │   ├── schema_discovery-0a0269251fde060f.d
│   │   │   ├── schema_discovery-0d868e6da0db8eef.d
│   │   │   ├── schema_discovery-4846fe7013c99397.d
│   │   │   ├── schema_discovery-d13e31d6a0ec629f.d
│   │   │   ├── schema_discovery-f53752a038ced85c.d
│   │   │   ├── schema_discovery-fed649b7c9b7fc9c
│   │   │   ├── schema_discovery-fed649b7c9b7fc9c.d
│   │   │   ├── scopeguard-ad99cde617213d11.d
│   │   │   ├── scopeguard-b9526facf6e3d829.d
│   │   │   ├── serde-357d6bd45c82aff9.d
│   │   │   ├── serde-3ffad2cabf6c7dc3.d
│   │   │   ├── serde_derive-7454b631601a5c65.d
│   │   │   ├── serde_json-11e550c8b893c871.d
│   │   │   ├── serde_json-32e9ee68e75b0ae1.d
│   │   │   ├── shlex-d106222457ada843.d
│   │   │   ├── signal_hook_registry-27db3fa2ed282ba8.d
│   │   │   ├── signal_hook_registry-db541058a1842b04.d
│   │   │   ├── smallvec-9d6f30967df905ea.d
│   │   │   ├── smallvec-c0d6a721d64fb601.d
│   │   │   ├── socket2-605f5575297e2fdf.d
│   │   │   ├── socket2-aac956178f46dff5.d
│   │   │   ├── syn-c0d138b435d8ffc0.d
│   │   │   ├── tempfile-4d76dcfad8e94c94.d
│   │   │   ├── tempfile-f5a38718c3971818.d
│   │   │   ├── test_dm_headers-1dcece7e78a7d288.d
│   │   │   ├── test_dm_headers-5611ce84cffa0812.d
│   │   │   ├── test_dm_headers-671878e071352054
│   │   │   ├── test_dm_headers-671878e071352054.d
│   │   │   ├── test_dm_headers-866fa54413965349.d
│   │   │   ├── test_dm_headers-b23161166a15c102.d
│   │   │   ├── test_dm_headers-dee6085152f2067b.d
│   │   │   ├── test_mvp_simple-0964cfb282345c8e.d
│   │   │   ├── test_mvp_simple-7d7db5953e8c397f
│   │   │   ├── test_mvp_simple-7d7db5953e8c397f.d
│   │   │   ├── test_mvp_simple-a94f284ffb61cb2d.d
│   │   │   ├── test_mvp_simple-cb858ec5ad83cff1.d
│   │   │   ├── test_mvp_simple-d682df8be2c0fee8.d
│   │   │   ├── test_mvp_simple-d79c2b9bf78e4d5b.d
│   │   │   ├── test_parsing-059bfae2bb171275.d
│   │   │   ├── test_parsing-4c06271d3e074b7d.d
│   │   │   ├── test_parsing-86b38b28aacb8915.d
│   │   │   ├── test_parsing-c6061ebb39aa3e2f
│   │   │   ├── test_parsing-c6061ebb39aa3e2f.d
│   │   │   ├── test_parsing-df16a6f8ab4c2244.d
│   │   │   ├── test_parsing-f4883bcf8caf75e4.d
│   │   │   ├── timeline_tests-98a3e9d1dbbf0aa0.d
│   │   │   ├── timeline_tests-df42d969ae47891b.d
│   │   │   ├── timeline_tests-e345c04bbda7905b.d
│   │   │   ├── timeline_tests-e7b9652ce6bf315b.d
│   │   │   ├── tokio-5f1961ef97b4ae30.d
│   │   │   ├── tokio-ee6299d4ebcb6868.d
│   │   │   ├── tokio_macros-d46ab2ba720f1bfd.d
│   │   │   ├── tweet_coverage_analysis-0d34e443ca027259.d
│   │   │   ├── tweet_coverage_analysis-220c94be201af150.d
│   │   │   ├── tweet_coverage_analysis-b10db88b4829b50f
│   │   │   ├── tweet_coverage_analysis-b10db88b4829b50f.d
│   │   │   ├── tweet_coverage_analysis-d93a28ef229ef3d2.d
│   │   │   ├── tweet_coverage_analysis-de73f80423528249.d
│   │   │   ├── tweet_coverage_analysis-e8e5db72edb6185c.d
│   │   │   ├── tweet_scrolls-0aadb9c13261ba59.d
│   │   │   ├── tweet_scrolls-12b8d75a70e27f51.d
│   │   │   ├── tweet_scrolls-21a12f1deaee5d1e.d
│   │   │   ├── tweet_scrolls-351ea21092e036df.d
│   │   │   ├── tweet_scrolls-3f1780e034254446.d
│   │   │   ├── tweet_scrolls-57f8920ce02b4e37.d
│   │   │   ├── tweet_scrolls-63e757ff24196ad4.d
│   │   │   ├── tweet_scrolls-9044a2c4e3f9da59.d
│   │   │   ├── tweet_scrolls-9103f07434908a4f.d
│   │   │   ├── tweet_scrolls-ae56311c73706f74.d
│   │   │   ├── tweet_scrolls-f2aec2746bb858a8.d
│   │   │   ├── tweet_scrolls-f8774f0769305a65.d
│   │   │   ├── unicode_ident-72515b00c2ad622b.d
│   │   │   ├── unicode_width-161bcd06aa9015d7.d
│   │   │   ├── unicode_width-86c07edd1a7e8663.d
│   │   │   ├── working_enhanced_features_test-13697124a1683611.d
│   │   │   └── working_enhanced_features_test-c40fda6595b8e2cf.d
│   │   ├── examples/
│   │   ├── incremental/
│   │   │   ├── cli_args_tests-1ecijpfa791kc/
│   │   │   │   ├── s-h9y7tgl52i-11o7j9e-9kcn2deqalg3l03w76xc2ei0r/
│   │   │   │   │   ├── 00grr5lq4633ygnfo177nzedj.o
│   │   │   │   │   ├── 0ooijde86x7m98h1wfz6na0uv.o
│   │   │   │   │   ├── 0q7px347swo86j3buuaty1na8.o
│   │   │   │   │   ├── 0rwlb2o6gqvse4cmqoi3bd186.o
│   │   │   │   │   ├── 1d9xcp5qfririlexwa5qh6bow.o
│   │   │   │   │   ├── 1gr85uluy8x7bopgeoqhrc2dc.o
│   │   │   │   │   ├── 1hrlbykkn6h98nyf7uozj4bd2.o
│   │   │   │   │   ├── 1l14k4mo79z8kr6t6f80txk4o.o
│   │   │   │   │   ├── 1u6e9364milvuwju83al4xg4s.o
│   │   │   │   │   ├── 1xllht8fq89w8b9ubnnzr5oo2.o
│   │   │   │   │   ├── 1zhshqsd6o8c58mvp6qj8zts0.o
│   │   │   │   │   ├── 24cxqjfanvjgoeaqmygiilwdg.o
│   │   │   │   │   ├── 2g9rxnkkfqc8g90kcup14viyk.o
│   │   │   │   │   ├── 2o8y4q31l0abj4in49lv6l6ee.o
│   │   │   │   │   ├── 2vra02fresnk4b8ip32eoirpw.o
│   │   │   │   │   ├── 31wuw00w53b21d9ljthhcvyfw.o
│   │   │   │   │   ├── 35933t4js95sskl9lb7yo5ugn.o
│   │   │   │   │   ├── 3pi3ohursju5yjf01ijkunwvz.o
│   │   │   │   │   ├── 3t49slact5wky02l2y9hnnzkh.o
│   │   │   │   │   ├── 3t88d8t1vzdrmex5y1talg1tp.o
│   │   │   │   │   ├── 495271zrbfi935l2snuwfnybu.o
│   │   │   │   │   ├── 4dl27yfyitwzbdphxlv94jifb.o
│   │   │   │   │   ├── 4nh9dphibm2b3vt55nvgmbqwn.o
│   │   │   │   │   ├── 4wny88l8ffbdo0v9e1m3ffshk.o
│   │   │   │   │   ├── 56ra77q40wl8ff16yzvs2a93t.o
│   │   │   │   │   ├── 5abfas93ggs5rrnkwchto2gxi.o
│   │   │   │   │   ├── 5crkh8kyjjgyzzrj6srjg1eha.o
│   │   │   │   │   ├── 5g9c2tgl7hsin1lh7q4w56z7q.o
│   │   │   │   │   ├── 5zw9h7rxy9g1n39o3c8xlofce.o
│   │   │   │   │   ├── 61pptpaggi0jmgvfmw0sf8s4r.o
│   │   │   │   │   ├── 6ammzeb31fuzhlto6umx6llnn.o
│   │   │   │   │   ├── 6hi03yth113o5lv5gpsrxd3rb.o
│   │   │   │   │   ├── 6n28u7b1bwdq1q2lh8uevlie0.o
│   │   │   │   │   ├── 6p67g63kvlugn45525ai3su3c.o
│   │   │   │   │   ├── 6tu6b6ror0lz75bdfhzssd8m5.o
│   │   │   │   │   ├── 7g4hsoym4pw4hk9g13cvz23cu.o
│   │   │   │   │   ├── 7jqme5gpm9jov01egp5dxicbg.o
│   │   │   │   │   ├── 7n8mynhk9po1rug5090ttz9uh.o
│   │   │   │   │   ├── 7sxxx36r9z6xddbeho66bpxyw.o
│   │   │   │   │   ├── 7ta1vbw7cp3njhgpnvepovq3u.o
│   │   │   │   │   ├── 7uxmi7k2ct0qi8k0k06xdjtml.o
│   │   │   │   │   ├── 848cyfb3q8v83y11b0zea02gm.o
│   │   │   │   │   ├── 8ejl8r9imghidxni3nmuiiqsx.o
│   │   │   │   │   ├── 8tjit29752jn1t39zuz9gw36c.o
│   │   │   │   │   ├── 8u6670d32kd1sa4c1ayhe0f8i.o
│   │   │   │   │   ├── 8xkyk54b0ud08zmhlddxd25ny.o
│   │   │   │   │   ├── 96csvfzskkxdhfxvyebf4g84n.o
│   │   │   │   │   ├── 9az55qdvi9ucfs016c18bqhvv.o
│   │   │   │   │   ├── 9bl44dreal4trbbctrt8lkxg8.o
│   │   │   │   │   ├── 9c8nngyn3dcb5k4hq1ipgd8hk.o
│   │   │   │   │   ├── 9gg832kwga4xix8qctas99u2x.o
│   │   │   │   │   ├── 9ly110nzx45uhcwfaoeuudgl2.o
│   │   │   │   │   ├── a11i7y1ru23d0z1lf369lu1hj.o
│   │   │   │   │   ├── a66wf14ec21hhyjccd0yba57n.o
│   │   │   │   │   ├── a6tfsyd088vcr531dlqsfddv0.o
│   │   │   │   │   ├── a7y6nk0pg5lpmjtn5a63v6mmp.o
│   │   │   │   │   ├── a91dbh2pcq1mgaa3gyskid4rt.o
│   │   │   │   │   ├── a9gsh0miledh4r0bgfy7nsxqp.o
│   │   │   │   │   ├── ah7l1bf5vymlrwcvyla43jsu2.o
│   │   │   │   │   ├── ai1jmgi0lspexpfep3gfm2dpt.o
│   │   │   │   │   ├── aj4vbwa42iah2xviysodwx6p2.o
│   │   │   │   │   ├── alukivp00nwizsbh0httpvh6j.o
│   │   │   │   │   ├── beofvum72fatkskwc3g2tu3ug.o
│   │   │   │   │   ├── bknz8rn6lnoic1uxn16dr1k3c.o
│   │   │   │   │   ├── bw439zp11crj6owfmk1w5viqv.o
│   │   │   │   │   ├── cikp5d4kmv0uxavm5par36fua.o
│   │   │   │   │   ├── cjmv8lyq6ksz4fy4s4ra7un7t.o
│   │   │   │   │   ├── cllxobyxipcf7eqyfvz49y7bq.o
│   │   │   │   │   ├── co0xx6eyvdfl4fjr5tqn9u0jd.o
│   │   │   │   │   ├── cpphgwmsne3qy7nr9b1kjpwzm.o
│   │   │   │   │   ├── crkjjupqx2kjycrf54r7j2x26.o
│   │   │   │   │   ├── d4hw40vsywndpibn5834clgso.o
│   │   │   │   │   ├── d7zmo4bta0o24z4su22lmnear.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dnxegu34roxg1hj1wja16z1lg.o
│   │   │   │   │   ├── e7xukd43j6zfz6vma52xqc480.o
│   │   │   │   │   ├── eb3iv1v2r0gqz96nc76x1enfw.o
│   │   │   │   │   ├── epc1rxotixzn8nmjh8w9o016y.o
│   │   │   │   │   ├── eqv1kk4ndmb78eckxy3j2xe5b.o
│   │   │   │   │   ├── ervetoxd9xvfm1e189kma62s2.o
│   │   │   │   │   ├── f2hceu52awoffgnn1p7be4cb6.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y7tgl52i-11o7j9e.lock
│   │   │   ├── cli_args_tests-1g6swunjiz0m6/
│   │   │   │   ├── s-h9y7tcby2t-1mry7j6-3urvzsfaft5y8s10dtqyod0qh/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y7tcby2t-1mry7j6.lock
│   │   │   ├── enhanced_csv_writer_tests-04bl0yl0nn4zc/
│   │   │   │   ├── s-h9ylv0p84j-0r1tfnt-3fpte3yf1dz9le2jtl0vkonah/
│   │   │   │   │   ├── 03iqg8pr6ljyvyn4cejx3ttoj.o
│   │   │   │   │   ├── 0814f1wzskt20nucstff8rf84.o
│   │   │   │   │   ├── 0a2s61rv9wob7cmji4m04prtt.o
│   │   │   │   │   ├── 0r8w8pjgu0ijni39a45xlzbyg.o
│   │   │   │   │   ├── 0u1ralvr72otzgvv47ae8uaps.o
│   │   │   │   │   ├── 15ho54dnpuhgg9w9cw4frycjv.o
│   │   │   │   │   ├── 16ddvu9pj9omwcedc299ylz8n.o
│   │   │   │   │   ├── 18vo3gfnkcawyssk67hfkv76b.o
│   │   │   │   │   ├── 1fa2nr4xj0hlrk0rhfettkgzf.o
│   │   │   │   │   ├── 1pgvs70g2dylil55uasms01in.o
│   │   │   │   │   ├── 25t3knoq63qjakyb2c4lcjais.o
│   │   │   │   │   ├── 3fx89d939a09j6052sehcqj3l.o
│   │   │   │   │   ├── 3iiiq40cuo8m29sdwpru6b48t.o
│   │   │   │   │   ├── 3j9qvikmytzt7cmotk1w7xysy.o
│   │   │   │   │   ├── 3lvl2cfgss0ozol9vyyryfr8m.o
│   │   │   │   │   ├── 3u3t49pwmswe4vy85mmctwov2.o
│   │   │   │   │   ├── 4cncxjx84kqc9s2p8zp8x3vb3.o
│   │   │   │   │   ├── 4w8wujfndnz5gct7uq64os7cc.o
│   │   │   │   │   ├── 4xqzfy6i1vagnwp3mh3r8j3d7.o
│   │   │   │   │   ├── 58rm3g1tjg8g6hsc9m8gfy6qc.o
│   │   │   │   │   ├── 5agbdps2lwzy8z23u2vooidac.o
│   │   │   │   │   ├── 5twuqesx0y7d2m1i8q1sa5azi.o
│   │   │   │   │   ├── 601adbm2ed9riuw0to7kxxxhn.o
│   │   │   │   │   ├── 62ggbdcdsts29u34q4ax2stbc.o
│   │   │   │   │   ├── 6h7sz4ppivb8dsiucv5cpe1op.o
│   │   │   │   │   ├── 6ocqnhuzgouhjlqr2ucdzpvuz.o
│   │   │   │   │   ├── 6y52nh4v6cddta1u65velkx6e.o
│   │   │   │   │   ├── 7cgz5g4s6ysohoel2d21v6yrl.o
│   │   │   │   │   ├── 7sg6bi46co1u6zzna3wzjfd7i.o
│   │   │   │   │   ├── 7wz1k6i33r71aakhseguvjg2l.o
│   │   │   │   │   ├── 7xuwelhiwgz2d486c2zve5u6z.o
│   │   │   │   │   ├── 7zq0izx1u3k84kj4n0gtl0bsr.o
│   │   │   │   │   ├── 85dfpai8kvvtbilx45nmevnwi.o
│   │   │   │   │   ├── 88cxi0gty37ineu8kyqagmi1n.o
│   │   │   │   │   ├── 8djvgwb5j7kzpj1zazpdid2uw.o
│   │   │   │   │   ├── 8merdaavr529eqrgtpu9vte5j.o
│   │   │   │   │   ├── 8rwuxekdnt6hnoycw43lsmcyt.o
│   │   │   │   │   ├── 8sm1f7490xamas1rx4woly07q.o
│   │   │   │   │   ├── 9mmn5ygqgevcurz1vm2zibi2t.o
│   │   │   │   │   ├── 9n1xyqrclb4wr9d3bh9jkunhs.o
│   │   │   │   │   ├── 9oeoxld618f57mmd4v84qjxhl.o
│   │   │   │   │   ├── 9s8jbu18i3a1t59w9fyvgxk6l.o
│   │   │   │   │   ├── 9zpf1ui7e7tllf8m8f1pf8668.o
│   │   │   │   │   ├── a00zty3a0mlxei6q4dprg4g8l.o
│   │   │   │   │   ├── a9yyzuzugvtexjthmx6er8b3p.o
│   │   │   │   │   ├── ajgryccouduq4gmuzw7shp5gi.o
│   │   │   │   │   ├── b4gd9n59fjijpofkkm7m8922f.o
│   │   │   │   │   ├── b6fg1bvpo0ml34ofvpn4vji51.o
│   │   │   │   │   ├── bhws01qtzrb0m7qcd7sqbyv74.o
│   │   │   │   │   ├── bne4kwca8mi2aey6nw6g2sbud.o
│   │   │   │   │   ├── bo144wc0w0qstbddz5y41hlxn.o
│   │   │   │   │   ├── bxe9359mzr6nsgdawgup7zyy1.o
│   │   │   │   │   ├── c61spnuaih6e0h543c130xhub.o
│   │   │   │   │   ├── c6oqp7i1aelpbf4kygw2rwuvj.o
│   │   │   │   │   ├── c70wzj47coofmauems1dodwmq.o
│   │   │   │   │   ├── chnslcogha467q8ccc5f5m2ga.o
│   │   │   │   │   ├── csxzko1teqgtoxk18zafl0s9x.o
│   │   │   │   │   ├── cyf6uowuvpa9klg9wqiavi70w.o
│   │   │   │   │   ├── dav2qx9zz0gprn7rq7ub4ek6n.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dmnr3dn4z5orvk7f4b853kukh.o
│   │   │   │   │   ├── dnw723t3q8z8p41jifgeqj6h7.o
│   │   │   │   │   ├── du4kt0act18w3csi4v5txh76a.o
│   │   │   │   │   ├── dyk30yynbpvdncr17kvhbog2i.o
│   │   │   │   │   ├── e8k9fb26uauo4keiqu9oxtv8p.o
│   │   │   │   │   ├── es18c1tfm95lbyn7hj622mg18.o
│   │   │   │   │   ├── ew7s32jq0l0znk50nxt0l7jyh.o
│   │   │   │   │   ├── f2vrtzzslkbheztfa6jglhr75.o
│   │   │   │   │   ├── f3iq0w55lmtnwuflz36hci5pr.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylv0p84j-0r1tfnt.lock
│   │   │   ├── enhanced_csv_writer_tests-05g2gy5244duo/
│   │   │   │   ├── s-h9youetd4x-0bw8nmo-2naa1tp6kon4zzpi87qt65ik7/
│   │   │   │   │   ├── 0grvemghp0r81ge3uztdmbolp.o
│   │   │   │   │   ├── 0q367mk6s6bkw1hlx6lfb0wk3.o
│   │   │   │   │   ├── 0qxdafq2dmsie814ofoxykh8y.o
│   │   │   │   │   ├── 0z3swkbqt5ci9hc6a41q7hli8.o
│   │   │   │   │   ├── 1ahfiie5qjdn2w6ys097ohf2l.o
│   │   │   │   │   ├── 1l1itkvvqzo18uatlrqgyjj90.o
│   │   │   │   │   ├── 1vywwy13s32ebusd0w8vdg78c.o
│   │   │   │   │   ├── 1wtmzojexgl9r874qtna8k5j2.o
│   │   │   │   │   ├── 23adcz463w5vorell5qwz43f4.o
│   │   │   │   │   ├── 23nwuq5844xwrl6cx3o3bycmj.o
│   │   │   │   │   ├── 25mu8k0st6ehvnii7vwnst7zp.o
│   │   │   │   │   ├── 2eh7snu77urxxtz9utb7udrbg.o
│   │   │   │   │   ├── 2f225y0yjbvhxxywnttws1tgh.o
│   │   │   │   │   ├── 2ky2h0kragl3buxxiqq85mm2h.o
│   │   │   │   │   ├── 2sig1cummziej0fczs9u00tk2.o
│   │   │   │   │   ├── 2vvhqfuucdekt0c4vck7cap29.o
│   │   │   │   │   ├── 3pxyr36qnyjebz11ldyt5kg4b.o
│   │   │   │   │   ├── 3sd129rbkz6hf6vi70rm02r7g.o
│   │   │   │   │   ├── 3wka2ty2bygp65ydpyma8q7cx.o
│   │   │   │   │   ├── 4abx9uke4bk3v39ax20h4qe10.o
│   │   │   │   │   ├── 4k7kw68hciyq97tbj6o8h7s3l.o
│   │   │   │   │   ├── 4qauh44uiub1hjh8ndftx68wp.o
│   │   │   │   │   ├── 56af3ma2ml5672tq7e15tigs2.o
│   │   │   │   │   ├── 5a5ql8vxwn5yk3fpa7ypsqfyt.o
│   │   │   │   │   ├── 5mstpn893nbav6pbvzc8rq52p.o
│   │   │   │   │   ├── 5qky1es1pdvps843437euhzj4.o
│   │   │   │   │   ├── 628tm8u9nuvnoq907szm1fhf4.o
│   │   │   │   │   ├── 6p00rkw7mfv4rxxazbrmdhmj2.o
│   │   │   │   │   ├── 6vge39s8e9jki4w9ggyc3y02h.o
│   │   │   │   │   ├── 6wnq7c1k1sn522l3uec3omxrv.o
│   │   │   │   │   ├── 6x8pd439wl2fedvzhne3it7v5.o
│   │   │   │   │   ├── 76emphtud1o3r2oxtyp0040sq.o
│   │   │   │   │   ├── 79jpndy69wq62y2h0u6r71xl8.o
│   │   │   │   │   ├── 7allpfrjj5pm6sprvkvnurgng.o
│   │   │   │   │   ├── 7i11jxwlrhuv4sb5s3020z6aq.o
│   │   │   │   │   ├── 7mmlabq1bfwk3a4y3wsgklzj8.o
│   │   │   │   │   ├── 7ncp3zqfmz116wubjcjmqltxf.o
│   │   │   │   │   ├── 7s1tvt38mkc73twxwu1172l98.o
│   │   │   │   │   ├── 7ya1tl91c5p0otrnwm36w0tsl.o
│   │   │   │   │   ├── 86suki0n698x5drkuado4p6vy.o
│   │   │   │   │   ├── 8drt66e1o61xrzfcfaewr26et.o
│   │   │   │   │   ├── 9rpd7g5imf1te05b2vlnm6dkb.o
│   │   │   │   │   ├── 9upyda45h83q6lcfzh7mhrgj0.o
│   │   │   │   │   ├── abeqq5s87bb9rlhd3d7htk6q9.o
│   │   │   │   │   ├── adnpb3r5ydx4u1cq0yo6dk4a2.o
│   │   │   │   │   ├── an9a5vmqd8ofkyj5hudqyh4k3.o
│   │   │   │   │   ├── aqmfw2972gw9y8xcc4qnb4nr5.o
│   │   │   │   │   ├── avf0e4zq09w2mk3bmrvmvruh7.o
│   │   │   │   │   ├── avm8szocwni1eq6bytfykmn8s.o
│   │   │   │   │   ├── b6wsdgn52uzigcnam6l7jvp57.o
│   │   │   │   │   ├── b8tbepavrfzfxsaous2l67nu4.o
│   │   │   │   │   ├── bi6ous1oshm3i02n4xkokwn9t.o
│   │   │   │   │   ├── btk1ls8o6hy9enheuva8x7dgl.o
│   │   │   │   │   ├── bujh59anjz93zhtr1oa5eauie.o
│   │   │   │   │   ├── bunxs0y1ztjho0i36dr67sojn.o
│   │   │   │   │   ├── bvjyi9jtlcccs080u2fmdyte6.o
│   │   │   │   │   ├── c2q70te9tu6138eszbfov3325.o
│   │   │   │   │   ├── c36xzh4ags7st2hufqw7ei0t2.o
│   │   │   │   │   ├── c57o0qrtup1qzi91qvbfvcpud.o
│   │   │   │   │   ├── ce5ar6z5myaudv51lo082zgab.o
│   │   │   │   │   ├── cum1uffn2cv9i70tlx7dye90y.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dhqfphb963wk2nfcwe70ffu5k.o
│   │   │   │   │   ├── dvk5d0oy1jc3db1yj0x1th52j.o
│   │   │   │   │   ├── dzuzjyqr3jw9g17eddee8wehg.o
│   │   │   │   │   ├── eafqgzcymhssz2s57hkwt0r96.o
│   │   │   │   │   ├── ec71b735oehll7cuelvul4qhy.o
│   │   │   │   │   ├── etwclvr73i3pbbra5199d5cf9.o
│   │   │   │   │   ├── f2y6t2r6wacszuruarujsw8ye.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youetd4x-0bw8nmo.lock
│   │   │   ├── enhanced_csv_writer_tests-0q5fd61emo0jy/
│   │   │   │   ├── s-h9yldvr6br-18hnrg9-1e6f38kvf2sn2huvq7qr225pk/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvr6br-18hnrg9.lock
│   │   │   ├── enhanced_csv_writer_tests-1i1oo5zvaqy7r/
│   │   │   │   ├── s-h9yqng0c0k-1u5hbz2-0b039qz6rwgkjh045uw3wdpco/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng0c0k-1u5hbz2.lock
│   │   │   ├── enhanced_tweet_tests-2ijmyrcdb54yg/
│   │   │   │   ├── s-h9y2l7rg6g-1bh8uhc-3qvwmo6wrc8ykthewuo7bvj0u/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y2l7rg6g-1bh8uhc.lock
│   │   │   ├── file_generation_tests-04rjlmhdeuvza/
│   │   │   │   ├── s-h9youfdpm7-0uwc9um-aihkj8x475k3hjxjaqsoug7ut/
│   │   │   │   │   ├── 02rlceogyzn14hg5miwer36mo.o
│   │   │   │   │   ├── 08xx15g1oesfmf4pbcl2v23v9.o
│   │   │   │   │   ├── 0qjcxyh15pptrsl6ju78fupam.o
│   │   │   │   │   ├── 11sbbx87cukzdh9h3kl0zctoz.o
│   │   │   │   │   ├── 1o1nuslfqmod6rdklhh714sqk.o
│   │   │   │   │   ├── 20sr46k4ei4o85w0na46bku1i.o
│   │   │   │   │   ├── 2py9gtuq5qj3ukn6dnhrg71mb.o
│   │   │   │   │   ├── 3j3answ7scvzfhmlaagay4mle.o
│   │   │   │   │   ├── 3p7i15delvmvg5vwew6fax5t5.o
│   │   │   │   │   ├── 3wdfjrgfl5dkcqodemhbtgwmc.o
│   │   │   │   │   ├── 43i8g4g29pti2cj7o3pfb5xcy.o
│   │   │   │   │   ├── 4zzjfj0jp4kybzclem4oevfuf.o
│   │   │   │   │   ├── 57owwil1y5lxrk8fv8rr8e9ed.o
│   │   │   │   │   ├── 5gk26es94xxlp7q5tt5hpo6rg.o
│   │   │   │   │   ├── 5np9gmobri8dtba6b9vudxf7w.o
│   │   │   │   │   ├── 5qc4c49fr5x3v1raz4pem8mn2.o
│   │   │   │   │   ├── 5qoaasotl6mnf3zchemzmycao.o
│   │   │   │   │   ├── 5wxiwrey7lw2uql3i5ibg4tnd.o
│   │   │   │   │   ├── 64uzxl4swhtlpo5dya9y4hj26.o
│   │   │   │   │   ├── 69q0io5qnwqn6jyyyj17myonb.o
│   │   │   │   │   ├── 6ivekq40f3j6m0h5jtnx8anfh.o
│   │   │   │   │   ├── 75jfd75l5w5pr6p1wd847q8x6.o
│   │   │   │   │   ├── 7ijogw260oymwo7j2ki1ymjz9.o
│   │   │   │   │   ├── 7jx71397gg706v1h7pmns0lw2.o
│   │   │   │   │   ├── 7kar8czibanoirwpjdtcg857f.o
│   │   │   │   │   ├── 7tm59dabu36iqmqja8rqt5i4b.o
│   │   │   │   │   ├── 89utrjtmtjc4v8w6c2s8cqwkx.o
│   │   │   │   │   ├── 987nvk92uefz9ptszo3hspl9a.o
│   │   │   │   │   ├── 9kavx3f6z26qkswhyzo2db41g.o
│   │   │   │   │   ├── 9th2hy22gxb42eozb6xwd6xzo.o
│   │   │   │   │   ├── aemtwhjtj59em1e30o083ah3z.o
│   │   │   │   │   ├── akb512217ui6gik6uqpcdd6l5.o
│   │   │   │   │   ├── aphpkdk3kdhi2bued9c71kljd.o
│   │   │   │   │   ├── b78kcmrel1aa51tr4ggxmbusf.o
│   │   │   │   │   ├── b8cefhdrnfz9k4287wib0d5q7.o
│   │   │   │   │   ├── bqv6dafqpgqp5ejrv4zs9nzsp.o
│   │   │   │   │   ├── c3gt5hw8dja5syyfgu1xic0p5.o
│   │   │   │   │   ├── cp3cjctxwnhnp7jchlphb1ah9.o
│   │   │   │   │   ├── cq6z9m9oqxxmk10nwnm4o4yam.o
│   │   │   │   │   ├── cyybq0mbstlxa7o1qm708a29k.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── du5k7wnjn1iwsggq5pxbm6qwx.o
│   │   │   │   │   ├── duphmc8lg0armp8qifw8ajdyg.o
│   │   │   │   │   ├── durb25difatdtz5ycrmzovm5t.o
│   │   │   │   │   ├── easw9y2gj10zruz2kahw8d6yk.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youfdpm7-0uwc9um.lock
│   │   │   ├── file_generation_tests-0pzfd4j02s5wu/
│   │   │   │   ├── s-h9yqnfzvz1-1qsm0au-9wbhjkrquo7cjpqt0ves6vrcn/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqnfzvz1-1qsm0au.lock
│   │   │   ├── file_generation_tests-1nygzb2emksky/
│   │   │   │   ├── s-h9ylv1x9ak-0q2wezv-3deewwb5ejacl3am1cv8g5zk7/
│   │   │   │   │   ├── 0227le194xpdc00jytk5chhjm.o
│   │   │   │   │   ├── 067jl4w3k1vfml87402jkv4cs.o
│   │   │   │   │   ├── 0aqulztgv2gtrroc35b8i5v2p.o
│   │   │   │   │   ├── 13yxv4o2jmwx48bva7o9o6nz7.o
│   │   │   │   │   ├── 17i9cw52hrta31k4mu02zn4j2.o
│   │   │   │   │   ├── 1aq6ylzq589rbie0ker3ok65o.o
│   │   │   │   │   ├── 1w8fuuquhtqhtln7af7efl01i.o
│   │   │   │   │   ├── 2gre8aogohdjdey1h83c637hn.o
│   │   │   │   │   ├── 2ijcspobbhl6go66vkr44uwtm.o
│   │   │   │   │   ├── 2wbqdi4dnn561sm5tm3l2yba4.o
│   │   │   │   │   ├── 2xzs3ixl4pedgftnpr9oiepdg.o
│   │   │   │   │   ├── 31hjspszl7wentt4tqxfrelq7.o
│   │   │   │   │   ├── 37ys6h6ajt8m7d872ahge970x.o
│   │   │   │   │   ├── 3ch3sqnqaoa3r9cftwx138454.o
│   │   │   │   │   ├── 3i0y8h26n87wstfct1ouxsj85.o
│   │   │   │   │   ├── 3towrtktcxlmb6opmob2oqafr.o
│   │   │   │   │   ├── 42fgk5mudd98ka4bbfanbt0hs.o
│   │   │   │   │   ├── 4pvehp2sijqfto7rqduxezb3j.o
│   │   │   │   │   ├── 4uobrtl9j9kcuwy6t9abji0t2.o
│   │   │   │   │   ├── 5u8cck4ng63z4ehal9tc9rtb1.o
│   │   │   │   │   ├── 77iw6ap2jnc5y577dwb9i54ch.o
│   │   │   │   │   ├── 7knipfzlmbejkpwwaqhbivp5a.o
│   │   │   │   │   ├── 7tye4hk0uprkep6jkwmpbpo01.o
│   │   │   │   │   ├── 7z0f7rtoxvtco3tfflgew6pjs.o
│   │   │   │   │   ├── 8j3z2d195k8vqjbyrp76p31vq.o
│   │   │   │   │   ├── 8mdjxm8n6wqksvrjjp49mcpeb.o
│   │   │   │   │   ├── 8mzbom4824j79lvv63h1qkg8h.o
│   │   │   │   │   ├── 8tg84738be62msii2ahtl4903.o
│   │   │   │   │   ├── 8u6bth9qsigivnq5hxivn2i57.o
│   │   │   │   │   ├── 90ksyxuc9it0kqmkje2r5771i.o
│   │   │   │   │   ├── 9440ciwr3erhuy80fxe2s6dy0.o
│   │   │   │   │   ├── 9dn58ibxys7f7c0hbnmgqe3yv.o
│   │   │   │   │   ├── 9rfn0rjocntx78463kn6oeu3w.o
│   │   │   │   │   ├── aa7hiflgtt61tdzups3pz68sw.o
│   │   │   │   │   ├── aycnqc43393j88ju736vhhfjk.o
│   │   │   │   │   ├── bzyq3aes7pi1k7ecj8nglo66m.o
│   │   │   │   │   ├── c977fexg7nebkeai8klldyo8k.o
│   │   │   │   │   ├── clmi7v7fmj8wwd49v7n6boczt.o
│   │   │   │   │   ├── d56cjb56qtxfml6j1yjxw0qcq.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── ds7txa527joa9ruhf1eh6thbe.o
│   │   │   │   │   ├── dw6e59s1ec6mh3q3xpsp0g2j6.o
│   │   │   │   │   ├── dxszoom4a8o73ji0rob44vzak.o
│   │   │   │   │   ├── ey8gmhrtkitfq615k1c8zu419.o
│   │   │   │   │   ├── f281dfkuabrh6c07vztrtupk7.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylv1x9ak-0q2wezv.lock
│   │   │   ├── file_generation_tests-21330f5uqvm68/
│   │   │   │   ├── s-h9yldvpkt7-0dzg9dd-5c91cxtnoludv6pk2m6sies6g/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvpkt7-0dzg9dd.lock
│   │   │   ├── file_splitter-16j4ajjqa7xm4/
│   │   │   │   ├── s-h9youfv6hw-04kl18f-3v79mzgl55cmxax6fgaun1b1p/
│   │   │   │   │   ├── 02hg0h20x6ve8gcae2uyd2n67.o
│   │   │   │   │   ├── 0a1248fh4lvrutt5qzi75jbvm.o
│   │   │   │   │   ├── 14sjcfakal92feergisvhetni.o
│   │   │   │   │   ├── 18d5wcid6rsrzvllkqgn3gtiu.o
│   │   │   │   │   ├── 1e9sohp6hv83mawrkru041j8g.o
│   │   │   │   │   ├── 1g3xw33jb0ckup8w6f59ywoy5.o
│   │   │   │   │   ├── 4x63k29t81ilklmm1hdb23tza.o
│   │   │   │   │   ├── 52gs2qntfke79mizok5xez5wu.o
│   │   │   │   │   ├── 6azix5wgew8yi6bqa9j03vk8c.o
│   │   │   │   │   ├── 6orzbhvh0bpab48a2r0dgg7jc.o
│   │   │   │   │   ├── 6u2ukf72t538crss7kohli1cd.o
│   │   │   │   │   ├── 7hdbjrpfhmayihhe7zbfvillu.o
│   │   │   │   │   ├── 7ilab6jsyonubon2rf0vaih5l.o
│   │   │   │   │   ├── 8d44fndxh3h4bvus4vuye1r4b.o
│   │   │   │   │   ├── 93r8ihpwbjx7yo01xnba1v3p9.o
│   │   │   │   │   ├── ajzqutoyxt95dxas3lzwzzesk.o
│   │   │   │   │   ├── baysq2nsjiz6kwm7nr76czz0e.o
│   │   │   │   │   ├── bv6wkamqvfuv5nz521g9f4lxu.o
│   │   │   │   │   ├── bwn4eajryoz500xwt6l3tfzza.o
│   │   │   │   │   ├── coptngyby6suv4tim4g3l18xc.o
│   │   │   │   │   ├── d2rzyazu2hxs1u8ageydbxlyo.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dowiu8gq9cfe11501hz4jfxq2.o
│   │   │   │   │   ├── dp4weljr3zupjrj9epi23bin1.o
│   │   │   │   │   ├── dqa6nq3fhaimxjr2ki0pyltug.o
│   │   │   │   │   ├── dy1s5dt9sbjl2itgpwun9os22.o
│   │   │   │   │   ├── dzhbvfjq78mabl86ihu5xll98.o
│   │   │   │   │   ├── e23isd05g1kzy8u01dbuu8y20.o
│   │   │   │   │   ├── e4c6rwobfq56is1l9bta4h6cd.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youfv6hw-04kl18f.lock
│   │   │   ├── file_splitter-1r0h961zwpmr6/
│   │   │   │   ├── s-h9youetga1-1l7u0dh-3vk2ons1g96npqjp898uzbyxi/
│   │   │   │   │   ├── 05b8lpoibczytd3uo6mzgpwr8.o
│   │   │   │   │   ├── 07m6acchz9wkprj6eiue5c0xs.o
│   │   │   │   │   ├── 1ru00hnubr5slkte0auoaz2bd.o
│   │   │   │   │   ├── 2q4pxqshhynlrxiblozl62vq4.o
│   │   │   │   │   ├── 3hvc37ews9ezakqnlm4nhy666.o
│   │   │   │   │   ├── 4ei6s8o8qi92onshplk6ldbb4.o
│   │   │   │   │   ├── 4s0uwunh8vdhlbulzsx6k4gmg.o
│   │   │   │   │   ├── 59s1wwvarg03t3dea90tubyf5.o
│   │   │   │   │   ├── 5ccd844p4c2crz5wrz06qmys3.o
│   │   │   │   │   ├── 5lf3ou3ghpy5m7rsc7greyg7v.o
│   │   │   │   │   ├── 64nin7okawc2khdm1034g6r7t.o
│   │   │   │   │   ├── 6582qahy2z527pe620nkckitd.o
│   │   │   │   │   ├── 6n81tow42zk2gj53n7dqmuwsf.o
│   │   │   │   │   ├── 6pvncid7y8bmiv8nbujzdehea.o
│   │   │   │   │   ├── 7jdzfh8jw6jmgm9r1udxqdhbd.o
│   │   │   │   │   ├── 7unorw0ch13ugf35bsg2wq42r.o
│   │   │   │   │   ├── 7xmv0hszffmgm5hvg1m4pdhaa.o
│   │   │   │   │   ├── a3udbp7aq6fcqcvqig4emal31.o
│   │   │   │   │   ├── a5axrws70io7y90dn6aczco6i.o
│   │   │   │   │   ├── a90qmojg2r2swexkb8cxc55wb.o
│   │   │   │   │   ├── ayvq0rtwqc0r6y366ur9ypijc.o
│   │   │   │   │   ├── bpd90x0jr8md0d72wd0hizmc2.o
│   │   │   │   │   ├── br6l2hzss0ofab7hqmo6od6eu.o
│   │   │   │   │   ├── c2l4hsgfwediofhtda8braemt.o
│   │   │   │   │   ├── coxtky9y4np51tt71ujymzih2.o
│   │   │   │   │   ├── d6ad18lliucieq2l82y1re06u.o
│   │   │   │   │   ├── dal06azko174k6sdlv1y3g0jq.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── e2i0es6kf7qpfublbtx1ijwlv.o
│   │   │   │   │   ├── ewst4o60vffadyh7qgwdj7g0o.o
│   │   │   │   │   ├── ezt31cjvjl8fbnp5btibmk138.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youetga1-1l7u0dh.lock
│   │   │   ├── file_splitter-2lh5pl56skuvi/
│   │   │   │   ├── s-h9yqnfzo88-0rzgmf5-working/
│   │   │   │   │   └── dep-graph.part.bin
│   │   │   │   └── s-h9yqnfzo88-0rzgmf5.lock
│   │   │   ├── file_splitter-2of3bc1c9cy7a/
│   │   │   │   ├── s-h9yqnfzwkf-16x85uq-working/
│   │   │   │   │   └── dep-graph.part.bin
│   │   │   │   └── s-h9yqnfzwkf-16x85uq.lock
│   │   │   ├── integration_tests-0nx8n6ruu0t0a/
│   │   │   │   ├── s-h9yldvmwaq-17asro8-10fp2ovjqyps5symi39d9b379/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmwaq-17asro8.lock
│   │   │   ├── integration_tests-21sisb0tez36e/
│   │   │   │   ├── s-h9yqnfzwn7-05r7tuw-dlanpnorts93muow3e4dwvldn/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqnfzwn7-05r7tuw.lock
│   │   │   ├── integration_tests-2o7lwgb4qrwhc/
│   │   │   │   ├── s-h9ylv0pd6e-1lwmw7x-85y2xdk5dh1nhltijxikfipi9/
│   │   │   │   │   ├── 00cuc3jqlsif4ifcpgai5c0cj.o
│   │   │   │   │   ├── 061qsipopdmv4jwvdg8wi8bp8.o
│   │   │   │   │   ├── 067o0glxjyeaq6pl1rbv6h5p7.o
│   │   │   │   │   ├── 07jwr68c31aldte6nu70k83do.o
│   │   │   │   │   ├── 0dhy9d5r4jyzvc9cqoiilald4.o
│   │   │   │   │   ├── 0g1u1ykn9jb2a7ccdtyxzmnlx.o
│   │   │   │   │   ├── 0grfu9y6am4dyl64vmduk7y19.o
│   │   │   │   │   ├── 0nkdn6stayxy0dnobd9i6nwuo.o
│   │   │   │   │   ├── 0ot0wd169trh729j9es1rjz4x.o
│   │   │   │   │   ├── 0pqbtk92jascp4ii962de1swe.o
│   │   │   │   │   ├── 0rv3hibg4f2gnrb1jke0vl4cs.o
│   │   │   │   │   ├── 0yz1zlzsaq8z6w6t4ybbmsp4i.o
│   │   │   │   │   ├── 1awy5bm5ecsvr07cjrmjv9ybs.o
│   │   │   │   │   ├── 1cuy23hbukpsrdzb4cxdvzip2.o
│   │   │   │   │   ├── 1leoa6jvjm6a2zf9dajfo0dg5.o
│   │   │   │   │   ├── 1qkd1pvq6j5naqn1sbmium5a8.o
│   │   │   │   │   ├── 1um0sw1oysf57bytuvu47k1ps.o
│   │   │   │   │   ├── 1v308vjjv1d73imswgtmmlrac.o
│   │   │   │   │   ├── 1w5zoev82jm8k3s8mcjab3j6n.o
│   │   │   │   │   ├── 1yrupvsffy9ejbulvyjf1kjwc.o
│   │   │   │   │   ├── 1zhk5ixi4ye6szkywzvk6s4em.o
│   │   │   │   │   ├── 26p6w9y3mmufqojwd1bcy3xyh.o
│   │   │   │   │   ├── 2dxng7ei3zeidptglpj5cbfa6.o
│   │   │   │   │   ├── 2e8ikh8irp2pxiz5ed9n54kgl.o
│   │   │   │   │   ├── 2ohq4j5er150sdjfutrrk4f28.o
│   │   │   │   │   ├── 2prltsu9n6j6jl2d6wvdyudq4.o
│   │   │   │   │   ├── 2x88eqlolu99hxblaxxw5n5a2.o
│   │   │   │   │   ├── 2xar5jf5qzfivki86hy86iboe.o
│   │   │   │   │   ├── 2zo0ytfmaxbh1c46eu7p1ln6s.o
│   │   │   │   │   ├── 34lye44fnr9y075dyebw5c0cc.o
│   │   │   │   │   ├── 34o3xylfoqqv1iefovg6v9z18.o
│   │   │   │   │   ├── 34u5akq2tlhqbyhs4u8yivjz0.o
│   │   │   │   │   ├── 373i6ceuh0s2lh5d3yucyio2k.o
│   │   │   │   │   ├── 37ax875ryiiji96awquj007dz.o
│   │   │   │   │   ├── 3ddvmcpxjcm0cgczbe88o03gl.o
│   │   │   │   │   ├── 3j3wyxnyzyq15cs5w6cbnjq7y.o
│   │   │   │   │   ├── 3lkdvjjyxz3pcg949gm1l8b2s.o
│   │   │   │   │   ├── 3m990mec3pj63bctfll3ipqii.o
│   │   │   │   │   ├── 3sch8qhwlujyesebet4lv8te3.o
│   │   │   │   │   ├── 3wbjwg7xnly7z9nr6dhzai6qz.o
│   │   │   │   │   ├── 4auajzqrfhwpzhcv9l1ivqykh.o
│   │   │   │   │   ├── 4key3gzbk3ohzvd0egliuljxm.o
│   │   │   │   │   ├── 4kl0pld57yuuc7irx1m3l170y.o
│   │   │   │   │   ├── 4oifscd03id31ifu84n76vvmq.o
│   │   │   │   │   ├── 57dl69wlsdaahxfmpt0181cf8.o
│   │   │   │   │   ├── 59labu3g8m7u9bmmrvfo2iuv8.o
│   │   │   │   │   ├── 59pxku6x8e03f4wns9p125rtv.o
│   │   │   │   │   ├── 5ansq5qaukpgfuydz7rjzrl4s.o
│   │   │   │   │   ├── 5gbzesvypyjpy44ajpxj2y2v5.o
│   │   │   │   │   ├── 5hwla0qgwzj9do0m3feuzdwr8.o
│   │   │   │   │   ├── 5ifwzius8omq993ygomv77by0.o
│   │   │   │   │   ├── 5owsmcelzftymir1wbj70d42b.o
│   │   │   │   │   ├── 5q3aopwi7e47v7jigoc9y2tcp.o
│   │   │   │   │   ├── 5qcxh89ogmc3bpfgo4ba86jbl.o
│   │   │   │   │   ├── 60w43xp7vpv6tgjpbrq6zzje9.o
│   │   │   │   │   ├── 62vwmh5bl75bn1c5x5350r2q4.o
│   │   │   │   │   ├── 63426fe8i4333ew6ehfwuq99s.o
│   │   │   │   │   ├── 641y638r5puvv25j331dxy765.o
│   │   │   │   │   ├── 6co6n0k74or5qfttn6ugnxgf5.o
│   │   │   │   │   ├── 6f7ihhnibcuq4pfw8yi0ipleg.o
│   │   │   │   │   ├── 6g2lyo7se7fb9ajg9eiys72wy.o
│   │   │   │   │   ├── 6h4z1gx0gazhi60a1jly20wkx.o
│   │   │   │   │   ├── 6k5aif02wzfrih3sxw6kykxx5.o
│   │   │   │   │   ├── 6vzireyoen2eaiwu4o3xggqjy.o
│   │   │   │   │   ├── 796l491az34hlvxlpt15xxzvu.o
│   │   │   │   │   ├── 7c35gsgsxug8wocg8g6lsnakw.o
│   │   │   │   │   ├── 7c7q1oa4uys0539z7u4nlgqam.o
│   │   │   │   │   ├── 7jpeccbfo2yxpnoxetlg6cd2b.o
│   │   │   │   │   ├── 7l1vbuk0vk1vxg840hyuu0oa8.o
│   │   │   │   │   ├── 7s0jzjzcxtkdr67mi6tu3b59e.o
│   │   │   │   │   ├── 81rf1u1gehsbeo3xtws5eiohb.o
│   │   │   │   │   ├── 830wfmc4371u7jcul35anje5l.o
│   │   │   │   │   ├── 87fz7b540l07qgtx6a1g47ul0.o
│   │   │   │   │   ├── 8d1mnyx1mfltk10nuaighzwd7.o
│   │   │   │   │   ├── 8pe1daktldrpztlxyh0r8p4bn.o
│   │   │   │   │   ├── 8tzocwak1z5jovtp5565ob4d6.o
│   │   │   │   │   ├── 8veaslalbcfyhphurk036s71g.o
│   │   │   │   │   ├── 8yeput0cuf3vhycr554i0gw67.o
│   │   │   │   │   ├── 8yysqgohzj6yi43wjjks8atfm.o
│   │   │   │   │   ├── 91a68jlvdvzndn6jxaxqd8et8.o
│   │   │   │   │   ├── 949o9qewl89pbxzsdiod2nv1z.o
│   │   │   │   │   ├── 94w65a4yz61k1fqfx1p70au5u.o
│   │   │   │   │   ├── 95o0oiehg4cjmis6fxj8h8u9g.o
│   │   │   │   │   ├── 9o31hxz5f9jsogemokbz1lf92.o
│   │   │   │   │   ├── 9ph824v23odf3hldidmdodoxo.o
│   │   │   │   │   ├── 9qcjyn0ai7ruwslkbgzaa34v8.o
│   │   │   │   │   ├── 9qrrdt4xbw0d28v8x3gqt5gkw.o
│   │   │   │   │   ├── 9tsw14koxuhmnlnxo0t07uivb.o
│   │   │   │   │   ├── 9yfrgv38joo4ivw7mhlv2wtav.o
│   │   │   │   │   ├── 9yjg811wm0neykgz3cbvyqp2u.o
│   │   │   │   │   ├── 9zv3kqgo1j9nukv4cvvjv690x.o
│   │   │   │   │   ├── a4rkobg1b6e0atdybmqyupavi.o
│   │   │   │   │   ├── a64nbbqfnvk0jvfx8vv6faucs.o
│   │   │   │   │   ├── a942yf7wr9bfeg8fzliwo2lyv.o
│   │   │   │   │   ├── adimk6uvsq9rkyc8aabsjv63f.o
│   │   │   │   │   ├── ahap8mpyvxeq8a3evwob8upn1.o
│   │   │   │   │   ├── akavdrndhwggn2jezk4ggdn5e.o
│   │   │   │   │   ├── akj9hdusufo7ct7bc57q024ow.o
│   │   │   │   │   ├── ap9r64ft49zp9dy8r7oflkcaj.o
│   │   │   │   │   ├── art3madcegoqzeen0xpqvr6to.o
│   │   │   │   │   ├── awkc44m994yzmgidjn17lbcpw.o
│   │   │   │   │   ├── b0zzle3c17xc2ew828i4gwbht.o
│   │   │   │   │   ├── b4on9ksezsjvys7yah42yey3o.o
│   │   │   │   │   ├── b5i0315904ct0odyqnzbcrj3u.o
│   │   │   │   │   ├── bccbtw01fvtzktfz5tz60wdus.o
│   │   │   │   │   ├── betdlj7yvd1ezea97e3esusf8.o
│   │   │   │   │   ├── bmn6rz7l5x7u46i5ujjd9fwmk.o
│   │   │   │   │   ├── bv619ug303ukkizdqgevruhlo.o
│   │   │   │   │   ├── c58cdh8ky9urs78wa4pktnral.o
│   │   │   │   │   ├── cc0pa106nzo396p6qa4x56v7m.o
│   │   │   │   │   ├── cgizi2pwfqbzqhvdo09gj8mmb.o
│   │   │   │   │   ├── chds7vpuiskuydel7e13a9rvd.o
│   │   │   │   │   ├── cjecfthu4ljtpe5dd2o0t9n62.o
│   │   │   │   │   ├── co4110be92q56xqata6f8jp2j.o
│   │   │   │   │   ├── cvvp3p9d5wjhpjpi8g7cnwn17.o
│   │   │   │   │   ├── cyzfospuqxxanp0bk7mfbek7o.o
│   │   │   │   │   ├── d0bjmlmuvibrvyy2annlhut9m.o
│   │   │   │   │   ├── d0js4ch0xf1ddt1b18ggw8a5c.o
│   │   │   │   │   ├── d1tsyi6f0nd43zj8pjixaa481.o
│   │   │   │   │   ├── d2sn6wp6akpkmmtfqv7xf2m59.o
│   │   │   │   │   ├── d6y7nfup5c9f6aw868xo3lxbh.o
│   │   │   │   │   ├── d8r2av08ln1mg9vy5wzpazexj.o
│   │   │   │   │   ├── de0qhsyhg3qvw97haoudkw8iq.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dit0wdbud5b14uwlfh7n4e6e0.o
│   │   │   │   │   ├── ds23d0r2qja8us033sjz7rjua.o
│   │   │   │   │   ├── dznt08mkaapyaq9ybao9j7hax.o
│   │   │   │   │   ├── e3bsnnl9kb6gciy3iabyjrd9o.o
│   │   │   │   │   ├── e45pifqn69asfh96mwulvhmcx.o
│   │   │   │   │   ├── e4610m78qa1ax5eisbj5ksbnn.o
│   │   │   │   │   ├── e86cxzf82jhanrkf3w8bcfcj3.o
│   │   │   │   │   ├── eactgfw5f094nidh5raem1ycj.o
│   │   │   │   │   ├── ecgwbdkduoqwlfimjj3yd6zo2.o
│   │   │   │   │   ├── eg427phmvzejqql916qe62x3p.o
│   │   │   │   │   ├── ego2m6vdsit6w4prdlogx0566.o
│   │   │   │   │   ├── ehhop96v3jc8tgsnzawvs5qkr.o
│   │   │   │   │   ├── eho4ue69kewmpzor432qdb1fb.o
│   │   │   │   │   ├── ekl7j9zbct1aafwbow2ov3rsj.o
│   │   │   │   │   ├── elbfzedu0xhq57r3s6jhhrfii.o
│   │   │   │   │   ├── ema646qaq37i8yi6las48qz5k.o
│   │   │   │   │   ├── eovla443849b4nety2q4mlfpe.o
│   │   │   │   │   ├── er2i5b7w91o24tup4ld8nfw25.o
│   │   │   │   │   ├── et2n6b86zuhaerk2lacl7q3oi.o
│   │   │   │   │   ├── eyc2wm2iinanxcvp2srfc11sw.o
│   │   │   │   │   ├── eyhu4qsowxnysc3kry5hrygw2.o
│   │   │   │   │   ├── ezm1bowqumdpauszp4c3u977s.o
│   │   │   │   │   ├── f3jx5tf869be39fwtv4wacjd2.o
│   │   │   │   │   ├── f4xra2idnu2n9vfrgigdipucs.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylv0pd6e-1lwmw7x.lock
│   │   │   ├── integration_tests-3l2wtyfenkkkm/
│   │   │   │   ├── s-h9youetepj-1b86yt1-4k3hfsbww240xlco50nk7ncut/
│   │   │   │   │   ├── 00zn38gny5fh8j71zb48g9erk.o
│   │   │   │   │   ├── 015dh2o6je3j24a1txk7yty9y.o
│   │   │   │   │   ├── 0dinskt2w7m7ziegkeh004umi.o
│   │   │   │   │   ├── 0ib77sa99uw5berntkxylp7js.o
│   │   │   │   │   ├── 0rhngh2hjhej3o3obmth93hsc.o
│   │   │   │   │   ├── 0wyzodrillb3i1c63fyexa1un.o
│   │   │   │   │   ├── 10hl94dxwoue2xa8k3uh5gfs3.o
│   │   │   │   │   ├── 1gbcp2ueufltlikyp4014gtaq.o
│   │   │   │   │   ├── 1mjiv35o5c5360fz83n14rlzj.o
│   │   │   │   │   ├── 1q9lnx48hrmhwam8wd6j78pbi.o
│   │   │   │   │   ├── 1rj02398r8n6alkoj237tlxcd.o
│   │   │   │   │   ├── 1trzqwmjv8tvvl678nljrsp6i.o
│   │   │   │   │   ├── 1yqpyqwuakfp5tqbaonydjjc1.o
│   │   │   │   │   ├── 23faph3zol7138vl34xdbawmx.o
│   │   │   │   │   ├── 2807y20rn1r32lr8cky5ilz9o.o
│   │   │   │   │   ├── 2d1pmwpq1tinb58nhlspib8hx.o
│   │   │   │   │   ├── 2gozipp0ngar4fcsx9mil2kyx.o
│   │   │   │   │   ├── 2hxly0vfgnxe4hc17gg2tjl81.o
│   │   │   │   │   ├── 2iaqn80rq0eatgfqutukahcpg.o
│   │   │   │   │   ├── 2lgjjun02z1bl51kph1rfhn6g.o
│   │   │   │   │   ├── 2pbl7ad4r6bsakzq91zoii9be.o
│   │   │   │   │   ├── 2skkf3qlvv595k55rx24v7z8e.o
│   │   │   │   │   ├── 2w1v484x5s7n6h4zz4uk4i3ht.o
│   │   │   │   │   ├── 34t6wlt3x78ipm0vbc0zmfmop.o
│   │   │   │   │   ├── 35iefawb5k18lc9dft4q7gt71.o
│   │   │   │   │   ├── 3antb6knb06k0cy5vbgec9ftw.o
│   │   │   │   │   ├── 3hs7wm349lls02s2jl17ar9yy.o
│   │   │   │   │   ├── 3hy32njh6gwywr7n6r2cqscbg.o
│   │   │   │   │   ├── 3lykebeng7wsbdzmofhyhqn9k.o
│   │   │   │   │   ├── 3rasgird0olyjrybgyctbnes2.o
│   │   │   │   │   ├── 3rurmbi90gprq28xd6ejwg8vg.o
│   │   │   │   │   ├── 3tvf5jqfnjsslau3ai8jyb6jb.o
│   │   │   │   │   ├── 44q03f0yrwlgh9twf644qp45g.o
│   │   │   │   │   ├── 45hxzuv99glm0i6povspcc15d.o
│   │   │   │   │   ├── 47vyal71bkwudldpce8afd6bk.o
│   │   │   │   │   ├── 49lj6lay0ge5xge2pfl2zje6r.o
│   │   │   │   │   ├── 4abthrjzr68t7je5kgk106wg1.o
│   │   │   │   │   ├── 4caea27jmbn5o8baofc41hdu4.o
│   │   │   │   │   ├── 4cnlddb0rrf2nirgu10kkprdd.o
│   │   │   │   │   ├── 4dbmgvlfnnka0l9hu0dsj59ue.o
│   │   │   │   │   ├── 4j00p4v82ghnrzy21r0ldk5wg.o
│   │   │   │   │   ├── 4mbypzgxfqfurzb05pr6ix2j4.o
│   │   │   │   │   ├── 4nsuyqskeg1yi14lr8749g2z6.o
│   │   │   │   │   ├── 4somjwjrt2tcunnqy45m9es6i.o
│   │   │   │   │   ├── 4tenni3r5m9xh704w025kp81k.o
│   │   │   │   │   ├── 4vi1p7ohfjoe89zfcvdlw9k7e.o
│   │   │   │   │   ├── 4w4vzikf4o5ua4suedvo5suoj.o
│   │   │   │   │   ├── 54llwcbk29skphled7w6dzg60.o
│   │   │   │   │   ├── 55cvgr2qn1pl9ybqhnnpvf88e.o
│   │   │   │   │   ├── 55vqmrzseui8m7vhyu0f85gzt.o
│   │   │   │   │   ├── 5b27at06z9517pnpgvxdbk52k.o
│   │   │   │   │   ├── 5d7jma6042fpvzscolv6lwbqm.o
│   │   │   │   │   ├── 5fn9vwy8z42zebs9rvpn3cy07.o
│   │   │   │   │   ├── 5h1wu805yr88bd0bwrdr6u8h3.o
│   │   │   │   │   ├── 5jlq54y040x4q29ldm3816b2d.o
│   │   │   │   │   ├── 5okhemvf2dpkzevd6ez5h3y1e.o
│   │   │   │   │   ├── 5op3ovt2uco12t7fwm4gpmok5.o
│   │   │   │   │   ├── 5pvq8omh9fw24477x7mzlfn2m.o
│   │   │   │   │   ├── 5t977ipasi3s2on36fgyj900w.o
│   │   │   │   │   ├── 5y2l9fnoj5etsdh7esq1nlk07.o
│   │   │   │   │   ├── 618ae2kuu7934hr31fmo3wxut.o
│   │   │   │   │   ├── 618m05gfhqef3k8ug2sp1b51a.o
│   │   │   │   │   ├── 68zxe3esloloa8i3qe81nmaat.o
│   │   │   │   │   ├── 6d84v7nkkox5fhqp46lp7tnxr.o
│   │   │   │   │   ├── 6dixokvk9fp7gk3ov8d2zl5ld.o
│   │   │   │   │   ├── 6hrvssmi9rrrud3zrlm1ewr83.o
│   │   │   │   │   ├── 6jgryvwc3k9ugeqbpq43rm0fr.o
│   │   │   │   │   ├── 6l9no3d7rahofllfmgbi459ok.o
│   │   │   │   │   ├── 6lkcs5mipi566w5ysd9lu1p0g.o
│   │   │   │   │   ├── 6toj1lwiv85wjfssuffxwyebs.o
│   │   │   │   │   ├── 6wzv0dphje2hsdv9rjqg4dih4.o
│   │   │   │   │   ├── 73qmcrfkx8avfznx6rtm9cwxl.o
│   │   │   │   │   ├── 7afdmchkb78p515r1tumi8dvw.o
│   │   │   │   │   ├── 7gzojxqwam750e0dgi3ylou7t.o
│   │   │   │   │   ├── 7q0czc6by045nppws137aoo82.o
│   │   │   │   │   ├── 7t0sm3d02vch8gqc97kigaysj.o
│   │   │   │   │   ├── 87o9n7o13ovrhv0b64daj881b.o
│   │   │   │   │   ├── 8azv4napebzszd48y3rvi0pnj.o
│   │   │   │   │   ├── 8ed14twrf0pyx4tl3ramvcqmc.o
│   │   │   │   │   ├── 8gwggpw7s59mswj7ku8h1zli8.o
│   │   │   │   │   ├── 8h3kyjawdkku0e9vj96rb2rl2.o
│   │   │   │   │   ├── 8iul2uv6cves8bcrg8i5y9m6d.o
│   │   │   │   │   ├── 8j1j6owqnqgxwhh4pswxs76np.o
│   │   │   │   │   ├── 8qrxinqhvimxycaiozx4767ak.o
│   │   │   │   │   ├── 8srv1diqqvfgxwixkulc1f5it.o
│   │   │   │   │   ├── 8u86tfbqgz8ztuo6efqnoi5bn.o
│   │   │   │   │   ├── 92a6xvlrlzduotcr4k5o4539e.o
│   │   │   │   │   ├── 9541vqryvzwe4ep3ecctg3a5d.o
│   │   │   │   │   ├── 9d1x6ykbyodirwi9w118jcq30.o
│   │   │   │   │   ├── 9dted7d1v9vo8si88g9ud3tp3.o
│   │   │   │   │   ├── 9grn7nogsaz39ohxfyju1svf0.o
│   │   │   │   │   ├── 9lrroxhdfytx4vq6ttiumdznp.o
│   │   │   │   │   ├── 9sw05avhvnpg8s7775gvdvy2n.o
│   │   │   │   │   ├── 9uyl5xm0usmjquldpcqswmbyy.o
│   │   │   │   │   ├── a2xvd48yjbl1dsxidrv1orqq3.o
│   │   │   │   │   ├── a5sifezc0sja6fkee5i4u5f3n.o
│   │   │   │   │   ├── adplnu150h1hd3zjev1eqmn0f.o
│   │   │   │   │   ├── adwq978joxji8taqwyt02okez.o
│   │   │   │   │   ├── ainwpe8qzqne8a26lu3tyti9i.o
│   │   │   │   │   ├── alj7xkiw4i4knak002jnu4p2o.o
│   │   │   │   │   ├── anbru3icw65qpyfwmwdfiuw7h.o
│   │   │   │   │   ├── aninykdx8e365c4mcg3j86u4p.o
│   │   │   │   │   ├── apz3xs2xgoocxz492vzd9kh8c.o
│   │   │   │   │   ├── awfujgmb9fd4m69um1r1bp2pk.o
│   │   │   │   │   ├── aydsd39bo7g8w5cni8uozlqlg.o
│   │   │   │   │   ├── az9do9eiyx290juhierofsivv.o
│   │   │   │   │   ├── b2x0n3izjdjfry1m61nkl3zxv.o
│   │   │   │   │   ├── b5rfihji8brapsmt4o9c4tzw8.o
│   │   │   │   │   ├── baqj28s7sxrriomt8a80q3h9y.o
│   │   │   │   │   ├── bhmnz6fpj3cx5kg6l1hnar9vl.o
│   │   │   │   │   ├── bhwo1l9ta0z6wtcfoqb9f8e9l.o
│   │   │   │   │   ├── bnq76au4512o9f1748thb1xcg.o
│   │   │   │   │   ├── bqdq1x98ua4hnzb4njdtz9yov.o
│   │   │   │   │   ├── buegsmwuzyjcjyg0e8tx4ztyb.o
│   │   │   │   │   ├── bv2jl1yyiguyli8wi0n0w9u3d.o
│   │   │   │   │   ├── bws8nfh3kiugvyh8cucrngxkj.o
│   │   │   │   │   ├── c6jhqgxxgotcj7vydt1epy8ec.o
│   │   │   │   │   ├── c6lom7xdn9cahcvw8ofa9afei.o
│   │   │   │   │   ├── c7errsyoucuitn1qa0e9er7re.o
│   │   │   │   │   ├── c8gsbyiifqflh5jgdmb7zkfso.o
│   │   │   │   │   ├── cb28j1htymxw5rytqxwwsgb10.o
│   │   │   │   │   ├── cfhmmukbs13paqzjknrccx470.o
│   │   │   │   │   ├── cp4kso640hz6coewaumec27lh.o
│   │   │   │   │   ├── cs4sg1aawiz10a0lwcbcmv1p6.o
│   │   │   │   │   ├── cu616m7sux02ykzy8z4q7ihu1.o
│   │   │   │   │   ├── cveurcel8oglstxlxpgdvdrrh.o
│   │   │   │   │   ├── cvx4i62blcr863zs0hkcwrpnq.o
│   │   │   │   │   ├── cxihzkyvdluruncn12a0gwag5.o
│   │   │   │   │   ├── d2shfk8dksb4iql28fziavlta.o
│   │   │   │   │   ├── da5a29m10bofdj6jn30yts5tn.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dg2vkw4c1yz4wxpuk09n69wgg.o
│   │   │   │   │   ├── dg9e40pspgajnr24o44yuowiy.o
│   │   │   │   │   ├── dz6fu6y7iwmtn569jbunmuolp.o
│   │   │   │   │   ├── e1a02f9ssbqoj3cy1jskjjd36.o
│   │   │   │   │   ├── e5imrlzr2px1i2ewbqojqsk9k.o
│   │   │   │   │   ├── e5qkqmffjj7ziu9y7s6piqqz0.o
│   │   │   │   │   ├── e67txe07y7nbvxmrl5pje8ult.o
│   │   │   │   │   ├── ebple7ue56ys4z5zvodyh2npl.o
│   │   │   │   │   ├── eh79voywog3ocbh9kl5sfhc32.o
│   │   │   │   │   ├── ek1sqir8gvjl7khj7z0c6f012.o
│   │   │   │   │   ├── emyj36yw0gtw2tthpx5ut0dot.o
│   │   │   │   │   ├── en673lc5d46259ay2izg6ccb9.o
│   │   │   │   │   ├── eobagjgcll4d7tmahuj1ryybl.o
│   │   │   │   │   ├── f0yhe3zoahtavosgyqvp5my57.o
│   │   │   │   │   ├── f1ej7rmgndy5t3vwsu1b38f9t.o
│   │   │   │   │   ├── f1zkb7y4nigv6ve80iofg18mi.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youetepj-1b86yt1.lock
│   │   │   ├── main_function_integration_tests-21iikfje1v4fs/
│   │   │   │   ├── s-h9y55hebeg-0uh94bi-atdxgbq0wled3yrs00tjp16mg/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y55hebeg-0uh94bi.lock
│   │   │   ├── main_function_integration_tests-23ut4wuighf6e/
│   │   │   │   ├── s-h9y4xkv6ls-19ighcq-3sltx6ltbntgaum53cadvnsvm/
│   │   │   │   │   ├── 001tfitdyg9202ytm6gek94hi.o
│   │   │   │   │   ├── 0ees3147dcj7ypv5gl83o5foa.o
│   │   │   │   │   ├── 0yf8mh5gqfby0t0vawov7ucpj.o
│   │   │   │   │   ├── 14spq4ninq0x3yakz2sibk2pv.o
│   │   │   │   │   ├── 1qizl0jpf8vbh21ctqhtrxczx.o
│   │   │   │   │   ├── 1zi3x3c8rl0wehj28eizxfx2l.o
│   │   │   │   │   ├── 21ybfpiix5lv0r7zzottmarhw.o
│   │   │   │   │   ├── 28rpeo72rojofajl4s3vkfo88.o
│   │   │   │   │   ├── 324oc94zfa7rfi5zd34k9jrkd.o
│   │   │   │   │   ├── 342gsafgjiipc4ysv2ocpsi5v.o
│   │   │   │   │   ├── 3rxxe9xmtudxpw4rjiklabygc.o
│   │   │   │   │   ├── 44fkekkf35xy1i02e43ajlk83.o
│   │   │   │   │   ├── 4fbuc5v4xd1963504doxs7sjh.o
│   │   │   │   │   ├── 4loj9atanfconi53d6oxkhd1n.o
│   │   │   │   │   ├── 53heuxqqvqm8rxi7vhsrl6a7e.o
│   │   │   │   │   ├── 5etwjy7vx6y39x39wv2g5bfr0.o
│   │   │   │   │   ├── 5wwykndk1k7gmy16sazd35f9l.o
│   │   │   │   │   ├── 64rqfrfj6a9ld7b1ftvpv13bk.o
│   │   │   │   │   ├── 66wg9svknya0z12y0esw3afq9.o
│   │   │   │   │   ├── 68t1r8z8mg1tyy08w40cmq7zg.o
│   │   │   │   │   ├── 69rnwhrtwum6ec2fahi63yldb.o
│   │   │   │   │   ├── 6n3qd3p7rx76b8mqznoswmim2.o
│   │   │   │   │   ├── 6nbyxponutog39g3eprditjfm.o
│   │   │   │   │   ├── 6nm5n7brsspt7rpstxy8yrllw.o
│   │   │   │   │   ├── 7gls0bqwhbjbdbfjcamm2unhl.o
│   │   │   │   │   ├── 85y2vgnam9lbxtmq53evk2dsg.o
│   │   │   │   │   ├── 8awwb0a14sdyx7axbgpzo03ny.o
│   │   │   │   │   ├── 8l5vao9wnm4gnsuk1rkquh79p.o
│   │   │   │   │   ├── 8t1pgk64k96t6tpibnfelqp4k.o
│   │   │   │   │   ├── 9f8jx8j8betwi5w9ucss8y3t2.o
│   │   │   │   │   ├── 9khm5g7cxzp6f13ojd6bfeskd.o
│   │   │   │   │   ├── 9mkqouzam69e2ylr8yhm4io27.o
│   │   │   │   │   ├── 9qkh82s26vg9o6wh9437hgcju.o
│   │   │   │   │   ├── 9s1k73gd7lkjkloy0xiot5gbx.o
│   │   │   │   │   ├── 9x7hxfw90lur719gsfnbyzuu0.o
│   │   │   │   │   ├── a8cdxkj8umap4vr5ik9mykfzt.o
│   │   │   │   │   ├── a9gb871gz9ch9g7ljhddynsjv.o
│   │   │   │   │   ├── afbqygj453g9fhpigpk4v6r8f.o
│   │   │   │   │   ├── ag5vv0vv276tbcvxssxe4y7jl.o
│   │   │   │   │   ├── agenjfj1b06dkuqw7ssf4ppla.o
│   │   │   │   │   ├── aiwajlx28wn0nk36jwebkyhnx.o
│   │   │   │   │   ├── al02ik6lzm6vyfivmvtcac1at.o
│   │   │   │   │   ├── al05k2qts87waoi6ikexe7grp.o
│   │   │   │   │   ├── an0n66ypivzrmptp6307a2abz.o
│   │   │   │   │   ├── asux1f9ynyxzo27xo4g6maufe.o
│   │   │   │   │   ├── au5j3idi4rdbhf2l868755wjp.o
│   │   │   │   │   ├── bcvjncfnku71b71nqn7cay4rz.o
│   │   │   │   │   ├── bqmakn884ezuj74mhn5pyzx3l.o
│   │   │   │   │   ├── c18eyt8fg26n6htjngrbt0r2d.o
│   │   │   │   │   ├── c6q6n8e9k9um1ebm29w87xnlx.o
│   │   │   │   │   ├── cpgudbshqkf85d49yb54bg6eg.o
│   │   │   │   │   ├── cra4it956wwhauohtsu1ker0m.o
│   │   │   │   │   ├── cub0ck4laipb62ijrv70e5c8p.o
│   │   │   │   │   ├── d3wi51g8dujnepz49ufa6v7y6.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dgzgi7rxkslvukxtavfnuzkrr.o
│   │   │   │   │   ├── eewy38151v5obnl2pept3zbqa.o
│   │   │   │   │   ├── eizvwd29i1vskimmvuncskvsq.o
│   │   │   │   │   ├── f1ymlrkye7vvdg5wqg94xpqsc.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y4xkv6ls-19ighcq.lock
│   │   │   ├── main_integration_tests-1vwto0dfzrkxc/
│   │   │   │   ├── s-h9ylv0zutw-1fysypw-5n5dz7rctwqysknivoixa7zts/
│   │   │   │   │   ├── 0bkxry090bk3d8gpwvoz6rky5.o
│   │   │   │   │   ├── 0r364j8bdccpy1i0iv1m7gxzv.o
│   │   │   │   │   ├── 0ry89xre2bj891a40o4qtbkre.o
│   │   │   │   │   ├── 19i08ccl7aeajiiooguaslgoy.o
│   │   │   │   │   ├── 1atuolfij355n266kqh1efwa2.o
│   │   │   │   │   ├── 1rkek1noycskin2najjaqhef1.o
│   │   │   │   │   ├── 20fd6jhondwwn78ck7mgcycl7.o
│   │   │   │   │   ├── 2aupqntnihmynxpas3r29tpko.o
│   │   │   │   │   ├── 2niq7e1ndofk22rx95joj4cp8.o
│   │   │   │   │   ├── 2on8l4b7kihg4ojyowyco9n5q.o
│   │   │   │   │   ├── 38cpbsv5q5ilmec4gq27gd1eu.o
│   │   │   │   │   ├── 3d209x0ylzhkzvr4wydeu2j70.o
│   │   │   │   │   ├── 3jgeozplzx51io0h4kqoerlim.o
│   │   │   │   │   ├── 488zwmqsiugweud68ul4sdrgd.o
│   │   │   │   │   ├── 48jsrgh1ev13kunx9jpaqf54k.o
│   │   │   │   │   ├── 4coflwq4o7iczo6et0wte54pb.o
│   │   │   │   │   ├── 4cydm4alzlgjyclhndzkg9d8o.o
│   │   │   │   │   ├── 4f1m4aozf6ycdyj72iq5tg3kp.o
│   │   │   │   │   ├── 4srjc0igzimy41a8dpaa3muir.o
│   │   │   │   │   ├── 4w0768xy1wjahbyetjeck1mkq.o
│   │   │   │   │   ├── 4yr1miyd29vd4py61iayfzr1q.o
│   │   │   │   │   ├── 5ejr8xmf489u8f14pvxid0grg.o
│   │   │   │   │   ├── 5giriwn4f9h0569d2czwqcwlk.o
│   │   │   │   │   ├── 5mvn6t12q4tptgwpuwiuuc9lz.o
│   │   │   │   │   ├── 5ncjwv789ahodq4f05lsuj2f3.o
│   │   │   │   │   ├── 5o4lbbxphxqr5jl2qcrntul8s.o
│   │   │   │   │   ├── 5snm93rcmtdx5mibxha9i2xak.o
│   │   │   │   │   ├── 603xelqs8vm3di3dl8mcgd3cn.o
│   │   │   │   │   ├── 6ml8druzhk07eb35paydles0a.o
│   │   │   │   │   ├── 7agvawinimf8s65iqx2iyixbp.o
│   │   │   │   │   ├── 7i7hedzv3m58frmf9tm8nz612.o
│   │   │   │   │   ├── 7icgxggu0uyt6hzuq5wblkpv9.o
│   │   │   │   │   ├── 7ilhuhe2p74m55fmah9hrms75.o
│   │   │   │   │   ├── 7lu1z8ntb78wt8secn3ts70l3.o
│   │   │   │   │   ├── 7s1003ki77t67u4lc1myzmudh.o
│   │   │   │   │   ├── 7xsu8ihn5vyu9foihqsmy0voy.o
│   │   │   │   │   ├── 7xzspwagsyq8tscazc1p5bu3u.o
│   │   │   │   │   ├── 81cli771zh0xwhjrnvpchj6hv.o
│   │   │   │   │   ├── 8srirbrcssp7xlzwz8aess3dm.o
│   │   │   │   │   ├── 909lfa03jp3rquzzzfunimwpw.o
│   │   │   │   │   ├── 91hhvvq53y97vjhn5xttarnzt.o
│   │   │   │   │   ├── 949libdxb260a5dy3hule8gmp.o
│   │   │   │   │   ├── 9fxpqcwbamnlpepfqyexfxx56.o
│   │   │   │   │   ├── 9his7fghp4p5vc8xos8jz8gji.o
│   │   │   │   │   ├── 9mumzzduvqax82uyb7iz2k7sg.o
│   │   │   │   │   ├── 9nw8ep0ku2lmhu12ohwwna36g.o
│   │   │   │   │   ├── 9ordnt079ewyl2603dmbky5lv.o
│   │   │   │   │   ├── 9st4hc1ktho6koh6pm5y38ojj.o
│   │   │   │   │   ├── 9z1sja52juowh8z1x2l62le8r.o
│   │   │   │   │   ├── a20hwd5qs5dtbg10m8jug2pf0.o
│   │   │   │   │   ├── a2j3gbade58hesdb7dspgd3zi.o
│   │   │   │   │   ├── a77y571zay7ieddnh7ka5lmsp.o
│   │   │   │   │   ├── a8t4ahlx5nrllkwwoz3a5x5yp.o
│   │   │   │   │   ├── a9imgm6otnpbji4jat909aeve.o
│   │   │   │   │   ├── b5bp0xhguhxjaks2i7tm19gwg.o
│   │   │   │   │   ├── bkv3rqmgqen71upt99dl9z8x5.o
│   │   │   │   │   ├── bn2y3hdkey6ub0bpru2hloghk.o
│   │   │   │   │   ├── boxd0drxsmm5a8tj8nkp7o8u9.o
│   │   │   │   │   ├── bti50f0zfdge6afmr8e2n275t.o
│   │   │   │   │   ├── but3vdhq9vsekf2wu4s6n2mtn.o
│   │   │   │   │   ├── byyfzpetjet9ga1jeffj596de.o
│   │   │   │   │   ├── cgi97qfinb63ro5pnac4glyvb.o
│   │   │   │   │   ├── cp9umr6t2xob7b9eo9t4vussa.o
│   │   │   │   │   ├── cpgey6bfzfgl1e48ta7xmkum6.o
│   │   │   │   │   ├── cvls680q0sffyz5v701ksptu6.o
│   │   │   │   │   ├── d794szia9lesnxgjvnpajgl42.o
│   │   │   │   │   ├── de73ydbthk9hyavh5eeyaiqlj.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dhl3j5d9wof8u7cp4f5mwwyxj.o
│   │   │   │   │   ├── dnpn1kg1x6926sp5k92ib06jr.o
│   │   │   │   │   ├── doo44cjorbhobv21hvrpn2wse.o
│   │   │   │   │   ├── dpnsisr4lubny0c3fmsv4tmhd.o
│   │   │   │   │   ├── dvrit1bn87wvabc8fsmcqwn9z.o
│   │   │   │   │   ├── dwn6m0uddischvijkzt9xcap3.o
│   │   │   │   │   ├── e3383eiaid2lo53qnfnkulhgv.o
│   │   │   │   │   ├── edoadh6hxj4l2d8nacfl2c7fi.o
│   │   │   │   │   ├── eeee20kxm0oxvxa8m9pgc47iu.o
│   │   │   │   │   ├── empe3ueyp1wuykjf0actu22f2.o
│   │   │   │   │   ├── f1q8ik10rflkqmb1jsxleeads.o
│   │   │   │   │   ├── f5byknmccdh6w16x4pv1r3yds.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylv0zutw-1fysypw.lock
│   │   │   ├── main_integration_tests-2a6h1dxji2z5s/
│   │   │   │   ├── s-h9yldvmx2q-1c4wpb7-8zaimqhtz23jhmz5inpjv0e76/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmx2q-1c4wpb7.lock
│   │   │   ├── main_integration_tests-2uku5l58ai06k/
│   │   │   │   ├── s-h9youetgep-10n27mw-am4lfrgi5d09ea07uxv08mzm5/
│   │   │   │   │   ├── 04aemddmgjrka4k77gyuuwy3w.o
│   │   │   │   │   ├── 0cnzmrvueagxk7pxstz3vu5zu.o
│   │   │   │   │   ├── 0hkf9g8jtwza9tqqey60sedua.o
│   │   │   │   │   ├── 0jvsq4ufwtbswf9dcibiwc3dk.o
│   │   │   │   │   ├── 0lgzhsekaivh6jsxqfc7yaj3m.o
│   │   │   │   │   ├── 0wbrp3zkwk2g7yrn2s9gge89y.o
│   │   │   │   │   ├── 0x2lkg9jgtqycc6s4ieabzi4j.o
│   │   │   │   │   ├── 12po0adczbh31nkzyslliwesa.o
│   │   │   │   │   ├── 14nqqlyre6joty75znagltine.o
│   │   │   │   │   ├── 167l7rbzh0n2jail4qx5w63go.o
│   │   │   │   │   ├── 1fv79xper0mbpl5djd7sjafyn.o
│   │   │   │   │   ├── 1idvbzg8xhxqpe6jj3ljo5h8v.o
│   │   │   │   │   ├── 222hnyam24b41flmfvxta7pdu.o
│   │   │   │   │   ├── 29l9bsd2bdb22pb9fqloa9bwi.o
│   │   │   │   │   ├── 2f8b9uzaq1qbjg94plfffvv2c.o
│   │   │   │   │   ├── 2jogju49ahfte0c3s4q0dp42f.o
│   │   │   │   │   ├── 2m7fn434o33wgtb0yvbyc51f4.o
│   │   │   │   │   ├── 37glx5il2xj7bzjntn9qztbla.o
│   │   │   │   │   ├── 3d3rieva18n6oxmcgzrkehog7.o
│   │   │   │   │   ├── 3f6tnpgg1t5slq83599g096mv.o
│   │   │   │   │   ├── 3fbw8gg8nt6n3qu8s7zjlnj2i.o
│   │   │   │   │   ├── 3fv3od4b28vrsti4bbyypwcp2.o
│   │   │   │   │   ├── 3wsx173wsa3ygsexw2s0pw5uh.o
│   │   │   │   │   ├── 44n94l3awk1gi61rmb65tja45.o
│   │   │   │   │   ├── 4mmuyrtg1biuy19q12x1gx309.o
│   │   │   │   │   ├── 4w6dc86f7rjnpx2qf8lss3sdb.o
│   │   │   │   │   ├── 4zm4g4m73fhhb1hpvtpzuxs53.o
│   │   │   │   │   ├── 4zq1zv78c67uo2vw77h821ukf.o
│   │   │   │   │   ├── 53stjztmqvq3q5fnbneazpe9i.o
│   │   │   │   │   ├── 56sxsp3qccjorzfjl0caec1gt.o
│   │   │   │   │   ├── 5g4t30a4ijug63fh4mse8tmm9.o
│   │   │   │   │   ├── 5pjx24e14kuypzyatfeg0btfy.o
│   │   │   │   │   ├── 5um22z3kk85pem6zcs2tomwrl.o
│   │   │   │   │   ├── 6bbm2pakr6dfpa2muiugaxsga.o
│   │   │   │   │   ├── 6ll3akdvd12kfp7d7tdt9vfdk.o
│   │   │   │   │   ├── 6ysf0ws73o81qrtwd27a505ld.o
│   │   │   │   │   ├── 7j9tc3szy1h1omnbk05073dw2.o
│   │   │   │   │   ├── 7jilatep2zc9zd0zilytiqb5e.o
│   │   │   │   │   ├── 7p0etjwoeb1y3xynr5qu45xm7.o
│   │   │   │   │   ├── 7wrioq8drfncdezlvhnyvrc18.o
│   │   │   │   │   ├── 836hmn67t7fdp4jvsx7v4sjiq.o
│   │   │   │   │   ├── 85heuicue26keuiyut3p9opd6.o
│   │   │   │   │   ├── 89axucbiq827apsd2drrxha1f.o
│   │   │   │   │   ├── 8zqdm6g7amkvqv2p5wf4369ld.o
│   │   │   │   │   ├── 97bdx69rubxtxncslqcux2wha.o
│   │   │   │   │   ├── 9b5o5iwaltsototcqnofj6454.o
│   │   │   │   │   ├── 9mg1i73xvje40zo1x0bxstwus.o
│   │   │   │   │   ├── 9ubaqxu6eclbo0be84h9wf9oq.o
│   │   │   │   │   ├── a7vupmb0wk6t4bl51aecfbric.o
│   │   │   │   │   ├── a9dd4csbdkqxqluvdm8jy1akz.o
│   │   │   │   │   ├── aevrshhk1i69q6jawr0gk8hrj.o
│   │   │   │   │   ├── b6vug1nrxsaxbtf2z3czflnnb.o
│   │   │   │   │   ├── bctnh02o32l4gmxlrfpz1o1hs.o
│   │   │   │   │   ├── bfcco0s2hawlobxuu2qx81g9f.o
│   │   │   │   │   ├── bint18yef7wh4tj5van7uuvax.o
│   │   │   │   │   ├── brcyprczsau2igss6trivou85.o
│   │   │   │   │   ├── bx4wflcw1dosk7v5sbwe57szc.o
│   │   │   │   │   ├── c199c46c5oknbk4bn1h7h8akw.o
│   │   │   │   │   ├── chqkw0slh5ak52909u7o77mm6.o
│   │   │   │   │   ├── cmn186ytdblvewd95hrkt24h8.o
│   │   │   │   │   ├── cw8sxbjohh65a2buupld8ktt4.o
│   │   │   │   │   ├── cyavq9bm4h7q3ubm6o6zdqz0q.o
│   │   │   │   │   ├── cymj5kl2vhp3fjte8qrcfg8u7.o
│   │   │   │   │   ├── d2h0ripftyyexz7o99w7orn0m.o
│   │   │   │   │   ├── d9700tfzigo97s0f68kd61hkj.o
│   │   │   │   │   ├── dazs29fqhlkij7nw4zspzmm1b.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dwgzsughpv01u4gl52zupnfja.o
│   │   │   │   │   ├── dzil11m1xeomi7yws57l23jxw.o
│   │   │   │   │   ├── e51efc1lgm5jlltkkdqjixe4q.o
│   │   │   │   │   ├── efejtf49hecbhf4rutw6ftkoh.o
│   │   │   │   │   ├── ew52cit4asxasjt16m57yks4v.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youetgep-10n27mw.lock
│   │   │   ├── main_integration_tests-3bgt0ctbduqw2/
│   │   │   │   ├── s-h9yqng03l4-152a3y7-0b2uw5u7ixd0vqo7wutciirye/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng03l4-152a3y7.lock
│   │   │   ├── schema_discovery-07ln4g7s2jmli/
│   │   │   │   ├── s-h9yqng08nc-14omkjf-1kt79bho5iuf8u9c819mer82u/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng08nc-14omkjf.lock
│   │   │   ├── schema_discovery-0nyul69bnx62u/
│   │   │   │   ├── s-h9yldvmu27-0em1qoh-5quo10c7dq7thbkjtuowsptgi/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmu27-0em1qoh.lock
│   │   │   ├── schema_discovery-20xi3wu117tpw/
│   │   │   │   ├── s-h9youet6kp-1348u5l-8wqini0vcmgvq0uz8k9my6uf7/
│   │   │   │   │   ├── 09xxkqpvkvs5tanpr8ue56zvf.o
│   │   │   │   │   ├── 0ljtu70klbd0y1rfhfg96qoau.o
│   │   │   │   │   ├── 0rs6mgn5ywckj9db57advgvcn.o
│   │   │   │   │   ├── 0vkxv578sr0vavuoldvuva44p.o
│   │   │   │   │   ├── 0zwsieppo5y6i9pxdnxes152f.o
│   │   │   │   │   ├── 106nzhuqbhfredz58jo94wek0.o
│   │   │   │   │   ├── 16lvu4rjnty55d6a1gah0z83a.o
│   │   │   │   │   ├── 1pehl5uv105r22snxrhuwvvyq.o
│   │   │   │   │   ├── 28osotiajxwieu7ada012jwrh.o
│   │   │   │   │   ├── 2gzcgsjl8fny4td61jfebbid5.o
│   │   │   │   │   ├── 2k76qkx6bpdtq9l4o8rkqtd83.o
│   │   │   │   │   ├── 2xoy2o497zo2rhtdue4gl4xf9.o
│   │   │   │   │   ├── 33v6lvd5pdugrukpn5qkjl373.o
│   │   │   │   │   ├── 3jepby8uzd7kbyxx1dxcv2mgp.o
│   │   │   │   │   ├── 47fk623fcu14j12os3k8q8i12.o
│   │   │   │   │   ├── 4bv5ptd0dp7ssr6tdaegx2446.o
│   │   │   │   │   ├── 4vv8gjfsiaip93nqjcy3givlx.o
│   │   │   │   │   ├── 4xhoc7if3tdfibzngffgkjhy9.o
│   │   │   │   │   ├── 50zbv572epmb7s0dtj3zbi324.o
│   │   │   │   │   ├── 51arsia5w4kthve4x5waok31m.o
│   │   │   │   │   ├── 5q790dx5ruumt7mgqh1kn0seg.o
│   │   │   │   │   ├── 7cp0016q4jszp8vlyntwuwmjk.o
│   │   │   │   │   ├── 7kw02pgmylec1rcbe1jjzygau.o
│   │   │   │   │   ├── 7q0dc4trd0dl9c9xonx869j4b.o
│   │   │   │   │   ├── 7s25idle9zzs1q8vp8zrj3gpc.o
│   │   │   │   │   ├── 7v5fef8tizz32er824yge510e.o
│   │   │   │   │   ├── 7xihuqo5s214pjc3vzjg0qb1i.o
│   │   │   │   │   ├── 8do04h8evd4f08al4xai7a5l0.o
│   │   │   │   │   ├── 8ul0i47fz6vn5esldyvkvym9f.o
│   │   │   │   │   ├── 9dxtgomaj8120n76eokd8d8jm.o
│   │   │   │   │   ├── 9etaj5vjo58ao2ntizfr63qsz.o
│   │   │   │   │   ├── 9torkgaklbkjxkbdfrihhioug.o
│   │   │   │   │   ├── 9ue0xuf1p338cels1olrffgp2.o
│   │   │   │   │   ├── af9ycbftgm8vgnzaxzbi9ib4b.o
│   │   │   │   │   ├── am2y4dhh4jker991glfgzfl87.o
│   │   │   │   │   ├── antvbhvh0h1kq6v5q2dj4sq9f.o
│   │   │   │   │   ├── b3zqdob02duzz9npor9f6spna.o
│   │   │   │   │   ├── be6kybxb7b3msrjk1165kv8sk.o
│   │   │   │   │   ├── bk7uj369hnjiebd0rcwp0xczo.o
│   │   │   │   │   ├── c4pjtlgv00otyhbyzsy1eozya.o
│   │   │   │   │   ├── cizbl47mrgon2t3g5rfwg59ak.o
│   │   │   │   │   ├── cp5u01afqb8jcra1b0luxtn8y.o
│   │   │   │   │   ├── cql0j7glb2jcxt7inzi59wdtq.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dzajfn4kiou6pwosgzqdl23zt.o
│   │   │   │   │   ├── e7iuzrzm3d3p25b5qbv1szmfo.o
│   │   │   │   │   ├── eqguhi7f6pu3xruv59o3b0fu8.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youet6kp-1348u5l.lock
│   │   │   ├── schema_discovery-2a4c3dp0erhqs/
│   │   │   │   ├── s-h9yloo407d-01gbevt-9wpbh5aw48r904sf3grqfkate/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yloo407d-01gbevt.lock
│   │   │   ├── schema_discovery-300s3fev5efcx/
│   │   │   │   ├── s-h9yldvpub4-0lql83y-9og6ezxw70qwdevf0kpxg8vn3/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvpub4-0lql83y.lock
│   │   │   ├── schema_discovery-37bu8zze2rsso/
│   │   │   │   ├── s-h9youetit7-0o9gwcn-7bqbv374mzwm1tenvk48pjeo1/
│   │   │   │   │   ├── 0sqh8btcu98hdb7t86hnncohp.o
│   │   │   │   │   ├── 33puy95f5u7mpniqki57sn5jz.o
│   │   │   │   │   ├── 3btlq6su3vr3rrv5t5ytub72o.o
│   │   │   │   │   ├── 57u9sbeq7j99742wpxpuiddfh.o
│   │   │   │   │   ├── 6g40vco2enn6yucvkuln07uyw.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youetit7-0o9gwcn.lock
│   │   │   ├── test_dm_headers-00ebo25nvy38f/
│   │   │   │   ├── s-h9youf3nhu-0dfwaqy-5e7vl734sjthdb8rt7l6576cd/
│   │   │   │   │   ├── 07f1yuimr9wuiy2nwoy7n4dhz.o
│   │   │   │   │   ├── 080vq5im0b15k91s9hv17sgu2.o
│   │   │   │   │   ├── 0dq5wt56d70kg9if916p1nuri.o
│   │   │   │   │   ├── 0e91wxh20rlpc59n10h8hpomo.o
│   │   │   │   │   ├── 0iq7imr0nxsq8vy30egvy3gd9.o
│   │   │   │   │   ├── 0pz7u0wvateth1cfn9p0ylmqf.o
│   │   │   │   │   ├── 0uiw8x9lyx219yqxmh7jshm91.o
│   │   │   │   │   ├── 1g5a15y4i46hdi4h5zbnyxeli.o
│   │   │   │   │   ├── 1gkdc1f49ulloq6asnjf1sop4.o
│   │   │   │   │   ├── 1opsd68oe65uya3kufs8g5di5.o
│   │   │   │   │   ├── 1t84dd7yo6shcgrwpcphhvi7k.o
│   │   │   │   │   ├── 1thq219nngkf5num0ufole2ux.o
│   │   │   │   │   ├── 1ya6gn82cam4ojllf8btq6goh.o
│   │   │   │   │   ├── 201nn8sw8qjmrver154rnjszt.o
│   │   │   │   │   ├── 26nfg8jp30gfh4y188mgs4ik2.o
│   │   │   │   │   ├── 28csrisg2f42t9d02cds4l85b.o
│   │   │   │   │   ├── 2fbnloy7pe1b7nrz858wwlzoj.o
│   │   │   │   │   ├── 2nbywvn96qsmqwloezqmqjz3s.o
│   │   │   │   │   ├── 2pr7jzo43x4n845sde55j2rj0.o
│   │   │   │   │   ├── 2tlbzj7gonb95v9oftmv0srd6.o
│   │   │   │   │   ├── 2xr9v8i7c1pd1971xrzl72mu4.o
│   │   │   │   │   ├── 348osgf251g0h69v7udbve3pz.o
│   │   │   │   │   ├── 34hwnlkqhicdcqu0enhih9gm6.o
│   │   │   │   │   ├── 353wtxt91h7pt0bbe3spz7tv1.o
│   │   │   │   │   ├── 3buymaj2ez1wgbo58h3mhsawt.o
│   │   │   │   │   ├── 3cuweanw3vhxppfrvvrag22rz.o
│   │   │   │   │   ├── 3fr5ao4myw0x1lmkk3uekos54.o
│   │   │   │   │   ├── 3gvsl8y7uf9lgy1de9n8zma9v.o
│   │   │   │   │   ├── 3id6b5of39am1uea4pkutqlds.o
│   │   │   │   │   ├── 3iolle8n3vklzsnwqyvii51us.o
│   │   │   │   │   ├── 3pmc5596iqeu0erup5o95zb7n.o
│   │   │   │   │   ├── 3syrqidvolyxoxfcbk0u2hylx.o
│   │   │   │   │   ├── 3vbul6ecfz69cglqwenlff1vv.o
│   │   │   │   │   ├── 429a4zplug0pnxi95jobykpol.o
│   │   │   │   │   ├── 4aco4xjytd9mzi1fprc37slhl.o
│   │   │   │   │   ├── 4l2x1eh3k7z5xcx8q6u4m8hw4.o
│   │   │   │   │   ├── 4qrsu2w3m26inqg8w55tuu50u.o
│   │   │   │   │   ├── 4twxbribk1epqj5wt521vwunn.o
│   │   │   │   │   ├── 58vgbkftn4twbrotgmyygrdmw.o
│   │   │   │   │   ├── 5btegbi6ndrrlyfivxq59vu2c.o
│   │   │   │   │   ├── 5dt4floldqz4swwqhca3em0bv.o
│   │   │   │   │   ├── 5pmqvkf5owfh8hpdrc5726xfy.o
│   │   │   │   │   ├── 5xhdzpxppxjjvbbpoh31m6pab.o
│   │   │   │   │   ├── 62ku6826jpd7ahtsapg2qtqk9.o
│   │   │   │   │   ├── 6899m9z74vly38blfw67unuk1.o
│   │   │   │   │   ├── 6dnmpfqrr44wsozc0tdjgwxv3.o
│   │   │   │   │   ├── 6ikc2p9p95prhpmnrd7j8tktt.o
│   │   │   │   │   ├── 6kv1ttqdu6hopzc7w41xgw2gp.o
│   │   │   │   │   ├── 6mv5gs7phh5l8cp0y01rb6xk5.o
│   │   │   │   │   ├── 6oub04zhxx42b5up83m4c8l8e.o
│   │   │   │   │   ├── 6v4u4yz7n29tfln898556qssc.o
│   │   │   │   │   ├── 6votus2e9ue0aq0ein2bqfq1f.o
│   │   │   │   │   ├── 6wlbtnfmr378olc9cspatkwc9.o
│   │   │   │   │   ├── 6wo6wr8xwak6e8j2qieyj5hky.o
│   │   │   │   │   ├── 7cuq8yboomtou67ffovd3kjal.o
│   │   │   │   │   ├── 7h76anf72yqmxrifer4khyhvh.o
│   │   │   │   │   ├── 84v481dnocld7d9b57vfuqqne.o
│   │   │   │   │   ├── 8bptyif5u1rsf12efbntxu4au.o
│   │   │   │   │   ├── 8do0098spra1emdon07cnwmr6.o
│   │   │   │   │   ├── 8i0fghg49wi5i447ltg05f6dx.o
│   │   │   │   │   ├── 8lks2f4fv8ee159j2z98qoimn.o
│   │   │   │   │   ├── 8nsnoe59fwmwu6ygbwofzo0ha.o
│   │   │   │   │   ├── 8ptl6si4hljxdk78icmmdrcoa.o
│   │   │   │   │   ├── 8rdiuwvjp4arj94vewms83xzz.o
│   │   │   │   │   ├── 8sdvob8y9x2s9mn0y86a906f0.o
│   │   │   │   │   ├── 94r6tzkmhdqru37i23l2rbvi8.o
│   │   │   │   │   ├── 95qgbbln2h0crf65qg83l0it6.o
│   │   │   │   │   ├── 9puoo9xkwf3bm28bayfpgbyn0.o
│   │   │   │   │   ├── 9r0627onve3wmwu0b4akb0rfz.o
│   │   │   │   │   ├── a43cdv75lg8m025vr5yh4lqit.o
│   │   │   │   │   ├── ab0os9mwslblnxstk9mxbnmb9.o
│   │   │   │   │   ├── ae0chpd0ii45vh32jh3l0lwdi.o
│   │   │   │   │   ├── ai10dbefkrbxnqna9g9c0qxxk.o
│   │   │   │   │   ├── an50eosxwmk21aj25zi9xzmiw.o
│   │   │   │   │   ├── ancyls82y4h63oloej0qsqbdo.o
│   │   │   │   │   ├── anst3k1dxwoz5sqzbwtkfd3ck.o
│   │   │   │   │   ├── axm86agzq8c7ie30ixlvsaoca.o
│   │   │   │   │   ├── b1h3gmtnee6jn3b4eei27dw7g.o
│   │   │   │   │   ├── b566ygkptw877ljo0cuidebr3.o
│   │   │   │   │   ├── bbybdko9u2y7zvay0wslpj9aw.o
│   │   │   │   │   ├── bidx7siemvswitmtx9olby2nw.o
│   │   │   │   │   ├── bsfmby9rljumo98r7z9etegpx.o
│   │   │   │   │   ├── c0y7dr57v07xn3eliuhk7onqz.o
│   │   │   │   │   ├── c680oe2ohr8l57tuv0gdca4qj.o
│   │   │   │   │   ├── cfm43yfm1552q1bo8bstk9xdo.o
│   │   │   │   │   ├── cqxh48vel1l5sfq6yi98lrhk9.o
│   │   │   │   │   ├── cu6v8mm648ad6edzmt740jlor.o
│   │   │   │   │   ├── cwx4klnmqfajshagoapjyr15w.o
│   │   │   │   │   ├── cxe5u0h2urr0zromijkqww7ko.o
│   │   │   │   │   ├── cyvglplwqnfkjn03ery0gguf1.o
│   │   │   │   │   ├── d4wliqgst91mt0t1xdxzbs2wk.o
│   │   │   │   │   ├── dd6rpx9e3zb3ege6c1tuq7m66.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── ditcln196yjlhencoepijej5s.o
│   │   │   │   │   ├── djqb1ybxoxqw672n49ysuq0ws.o
│   │   │   │   │   ├── dmx2ip8nkrvkkr87giunj7uzb.o
│   │   │   │   │   ├── dqggreawoqbluklbgzopuoj2l.o
│   │   │   │   │   ├── e6mvywauji4rjl1a6d6jozz0q.o
│   │   │   │   │   ├── egmg8uwe6pz8qak2ppqtkp6rs.o
│   │   │   │   │   ├── el92clwxd6ol7il9pk8mjel2b.o
│   │   │   │   │   ├── er8uqb25wei3qy8t4py2athmm.o
│   │   │   │   │   ├── ewfnqg8lctwz6qcyt01p6i8x1.o
│   │   │   │   │   ├── f1p8qu2mh7p2ujh9nbm37o5d0.o
│   │   │   │   │   ├── f28ml77fnnzx2bmmwv7xcrf9n.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youf3nhu-0dfwaqy.lock
│   │   │   ├── test_dm_headers-0bg2py1asp7cj/
│   │   │   │   ├── s-h9yldvmtxa-0cj8xu8-1ailymb795gamin2rfkagdis9/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmtxa-0cj8xu8.lock
│   │   │   ├── test_dm_headers-0n17u9c72komk/
│   │   │   │   ├── s-h9youetfof-1676ilx-9aoj2fjkrv187o0el4cq5a2mq/
│   │   │   │   │   ├── 0rsloiqupkrnk82md8q0aambq.o
│   │   │   │   │   ├── 0tqbf2ijwv71w9evta366rlo7.o
│   │   │   │   │   ├── 98zyii3pjimmkxp1ya2cuf2xb.o
│   │   │   │   │   ├── b82t8bv1r5lc8jf0sqlcedl6a.o
│   │   │   │   │   ├── cagqax42f2jbjsehhw2cvg5vj.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youetfof-1676ilx.lock
│   │   │   ├── test_dm_headers-0r8iz3onw6okn/
│   │   │   │   ├── s-h9yqng00l4-1pffmb0-72zy1h9ndpowybrlizltwf0qj/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng00l4-1pffmb0.lock
│   │   │   ├── test_dm_headers-2ik8u10c7z71i/
│   │   │   │   ├── s-h9yldvmv0q-10a5cig-6u4ps08endr1qjwk0g6thlhmn/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmv0q-10a5cig.lock
│   │   │   ├── test_dm_headers-3ea0nu76s8ibf/
│   │   │   │   ├── s-h9yloo3zo5-169cebm-5vkcnclh7jonnkkrwrzt4ix2f/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yloo3zo5-169cebm.lock
│   │   │   ├── test_mvp_simple-0zmpq7a5i3kk8/
│   │   │   │   ├── s-h9yldvprc2-1l2y3r3-car3fsbgnjqrkoeb11x40zqr3/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvprc2-1l2y3r3.lock
│   │   │   ├── test_mvp_simple-297asd65y1ujd/
│   │   │   │   ├── s-h9yloo3zxz-10k818c-8nfxxk7fjnclon8ygyxpb4kjj/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yloo3zxz-10k818c.lock
│   │   │   ├── test_mvp_simple-29f1d4xhxgt9h/
│   │   │   │   ├── s-h9youf389t-1q2xd3a-0tk32a59nlr2h2xw4t0a6vhwl/
│   │   │   │   │   ├── 1c4izbko2mnk9hnhgvo2jmuea.o
│   │   │   │   │   ├── 3i28dqdvu71z742dd9a5wsvro.o
│   │   │   │   │   ├── 55zsiqhtld1npkct2xu81z261.o
│   │   │   │   │   ├── 78v7b49yj7n5cufv8gupf0ej6.o
│   │   │   │   │   ├── ag2jftjqe3z5iisz8a2ukwlpy.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youf389t-1q2xd3a.lock
│   │   │   ├── test_mvp_simple-38bu0fw4k3rlj/
│   │   │   │   ├── s-h9yqng318z-1irfaqh-bl5julg73x4coxnsgjcxxtp9c/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng318z-1irfaqh.lock
│   │   │   ├── test_mvp_simple-3ag801mhkturz/
│   │   │   │   ├── s-h9yldvmumy-0bs5skj-aemj6gnhle5adporkkfhsrif9/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmumy-0bs5skj.lock
│   │   │   ├── test_mvp_simple-3g8kveq1bwg3w/
│   │   │   │   ├── s-h9youfdqx3-0ih3rwc-76v6q3zu2tohiatgo6990fpdj/
│   │   │   │   │   ├── 0bbqs1cd3t18piue008172miq.o
│   │   │   │   │   ├── 0lfwthqd6qnv6tzhyw8ltcvok.o
│   │   │   │   │   ├── 193forg33dp6dsokhpiqxoqdy.o
│   │   │   │   │   ├── 1r2573kxsl4722so55nlw4z2r.o
│   │   │   │   │   ├── 1vzsppyoxcl5k4eultjnl47af.o
│   │   │   │   │   ├── 2bjff8782rn9ys3rpw3ppda03.o
│   │   │   │   │   ├── 2hy7g54wk5iy10ooywcq1bltv.o
│   │   │   │   │   ├── 2xf1s87fabwkqk7sm45fncg26.o
│   │   │   │   │   ├── 30yzo52uslresy8aniuu0ypku.o
│   │   │   │   │   ├── 3b6qz2qnvrvoskxlnrjwzwns3.o
│   │   │   │   │   ├── 3c53mmhfxwc28rk892a6m55wx.o
│   │   │   │   │   ├── 3eqhnx62gvkk9uuiq5sb91wy4.o
│   │   │   │   │   ├── 3t2r2wj4ymieycsgjhd7tm5rc.o
│   │   │   │   │   ├── 48a5yxj9fk9g3tspo244gw7vh.o
│   │   │   │   │   ├── 4b2p2jiacrlippcucscuccx7e.o
│   │   │   │   │   ├── 4dklavo5ar9vedvmvyxud234s.o
│   │   │   │   │   ├── 4foif15h70swd5mxc2sj7j4p4.o
│   │   │   │   │   ├── 4jry9pc69df97nmhnl376pisr.o
│   │   │   │   │   ├── 4oimhaleeo6q5hp2b5xrx9nog.o
│   │   │   │   │   ├── 4wt777azakvmkp123f0y0o2d8.o
│   │   │   │   │   ├── 5bpkx8w3u0kzqfp40et13snfh.o
│   │   │   │   │   ├── 5bupf4n9vfr4ptl6myhxslfc0.o
│   │   │   │   │   ├── 5ftrb5eklj14a78js4lcy085w.o
│   │   │   │   │   ├── 5j08ohm2rno5byhzym5atnf8w.o
│   │   │   │   │   ├── 5q66pwibd2mykke6ln1i286bk.o
│   │   │   │   │   ├── 5qy72pi9yil7u1bepi6i9lqja.o
│   │   │   │   │   ├── 5shwwu7czwsh6kgqd7z9grx4m.o
│   │   │   │   │   ├── 607zreok8n58wgcb2o20trist.o
│   │   │   │   │   ├── 60w62n7z83ou2em6tw1nu4etq.o
│   │   │   │   │   ├── 61qw2nmmalvgbk5shy4tgcoxk.o
│   │   │   │   │   ├── 64k4rkanatchpnzleytpuhqof.o
│   │   │   │   │   ├── 69ctwhg0phet1f6k1xydmckho.o
│   │   │   │   │   ├── 6c4bdc2qmxss9b89xozviaupm.o
│   │   │   │   │   ├── 6hivpnayepi3cdwpqkcpbp98u.o
│   │   │   │   │   ├── 70bqqi8jq7sgw7433325mhwsk.o
│   │   │   │   │   ├── 7gt1msxcdke9v7x7gbugsn5d0.o
│   │   │   │   │   ├── 7lu7wsgin2euepuoyailpbvnz.o
│   │   │   │   │   ├── 8bji4pmnkjkeh8dddb5x8y0ak.o
│   │   │   │   │   ├── 8kbxzsnhruhpivsxycbu92z6s.o
│   │   │   │   │   ├── 8rbq4xybe3ro9t47z72b5a38n.o
│   │   │   │   │   ├── 8y81hdjqvk6ibyt2fddf3yqsq.o
│   │   │   │   │   ├── 90zw4bpe4jg0gy5shhn22duyd.o
│   │   │   │   │   ├── 9427viysh0g2g4o7rzet72ye3.o
│   │   │   │   │   ├── 94o1d3mlouhavtm0wlsvxlngk.o
│   │   │   │   │   ├── a8wkldhnrliuax1fngzmy8jb2.o
│   │   │   │   │   ├── a9igsujx6kdu2fm8snhf4l3j9.o
│   │   │   │   │   ├── aczi1z2n88g55nloh17s8luli.o
│   │   │   │   │   ├── az445pbh3kb2n986e7tiz0mqd.o
│   │   │   │   │   ├── b7am307xpiwfs3ftftlr5k8fn.o
│   │   │   │   │   ├── bhhkazwxmeu1vgugmehr7wek3.o
│   │   │   │   │   ├── bpgc2wea0gawy06ai19e0hg4y.o
│   │   │   │   │   ├── brmghol7une9339dscxrb6361.o
│   │   │   │   │   ├── bx57vk88ep0ou3qgjtgtfgtco.o
│   │   │   │   │   ├── c1m7p5c43lnx37ypamcheul8p.o
│   │   │   │   │   ├── cjgapisyxa94v9rqpqrxo8no0.o
│   │   │   │   │   ├── cvp1x8cv32pvthgim7a7scjpk.o
│   │   │   │   │   ├── cwh7i66ijrytknajkv269t5ez.o
│   │   │   │   │   ├── dcv02ddwe09idzrhb0jufj0kb.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dg65ixh8ua6ptwwcfut7wodao.o
│   │   │   │   │   ├── dkox1l0a8ux1hhgndu0ic4jyy.o
│   │   │   │   │   ├── e4etfq7wq5z60vpjvqqxz6lxo.o
│   │   │   │   │   ├── e9l46kw9zydg9yoxuh5utu2xo.o
│   │   │   │   │   ├── ekmjjv0lv3y4hsaso5dk0bnux.o
│   │   │   │   │   ├── eooxc9l041jfngrj24eptd5uk.o
│   │   │   │   │   ├── eq8dx0dp9jske3odyufg0cncv.o
│   │   │   │   │   ├── et6ompt28wc319tfftpqdl7ha.o
│   │   │   │   │   ├── evi6d7kskkn4yfwvl1gzc6wj0.o
│   │   │   │   │   ├── f446ednf83jqupaoftt14e5dl.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youfdqx3-0ih3rwc.lock
│   │   │   ├── test_parsing-0g9wcil5s79l1/
│   │   │   │   ├── s-h9yloo42fh-1vtjdhz-4k5t9bghzuws5lebkbye2qgah/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yloo42fh-1vtjdhz.lock
│   │   │   ├── test_parsing-0scy4wss75nqw/
│   │   │   │   ├── s-h9youeta62-1544sbo-2eddnwyvq64eivyix11vywtue/
│   │   │   │   │   ├── 0ufosxc3o7kishuz2ojlbtnt1.o
│   │   │   │   │   ├── 0x2m5xh1ssvq8j4m1cfyjudmt.o
│   │   │   │   │   ├── 10mssm05ndysahighkhuvkycj.o
│   │   │   │   │   ├── 15qbcdt3k8idkenvovrjh51es.o
│   │   │   │   │   ├── 1f882dyodrjnxtfdrpgcxnzzk.o
│   │   │   │   │   ├── 1n9e52ompwntgtp7zznahckvv.o
│   │   │   │   │   ├── 1p3h1xudxb334xedyhcxb5nov.o
│   │   │   │   │   ├── 1zf0xd85u0va97gb136f2hjlq.o
│   │   │   │   │   ├── 2fl97vid1hqrav0uro3s7cl41.o
│   │   │   │   │   ├── 2rc9fi3l07jarx4avxl9uihv2.o
│   │   │   │   │   ├── 30n55b9pyo8en5bm419el65i5.o
│   │   │   │   │   ├── 47o1v88k9lxjo1spb1a62jvx1.o
│   │   │   │   │   ├── 4j4qss6mdo18tbbu2gwqalwes.o
│   │   │   │   │   ├── 4pn3wcel8b0bg7sp66qjey7u1.o
│   │   │   │   │   ├── 51004awj9lopr1c8cuh0qz11x.o
│   │   │   │   │   ├── 5n756r0vnbttm66nbaf00ujdn.o
│   │   │   │   │   ├── 5yjr8jlh4tjbgshjacsfo91eg.o
│   │   │   │   │   ├── 66wkrhpgrofc4cw643ylaqd63.o
│   │   │   │   │   ├── 6981z8ewg350bzr3vycyy8jt3.o
│   │   │   │   │   ├── 6dhw9vz8uzo3y4e97slulmpha.o
│   │   │   │   │   ├── 6gy0bl6zzl3hjr9dryn0r1j9s.o
│   │   │   │   │   ├── 6ku15mvqoiaqet5rmzhyssyff.o
│   │   │   │   │   ├── 72tq4e3451sjxrd6ahgkpm1j5.o
│   │   │   │   │   ├── 7z5umlmlq3yxc6nb6a5ritnex.o
│   │   │   │   │   ├── 86nlhc08wxuqkcrfud3d1i2r5.o
│   │   │   │   │   ├── 8bh2paok3m1ai6cnmjugb81iy.o
│   │   │   │   │   ├── 8bwmvp1eb0bs7d9h2la6nt0fy.o
│   │   │   │   │   ├── 8hdv2drsybj87yh9zcut6qok6.o
│   │   │   │   │   ├── 97sxoq9daqt4s7yvd10uw5cid.o
│   │   │   │   │   ├── 98clalf437m7ovvw7og8joq59.o
│   │   │   │   │   ├── 9b4ibme7eibep1f406rzg8ybi.o
│   │   │   │   │   ├── 9mqqbn7s1xi6tll02dn2m06am.o
│   │   │   │   │   ├── 9navko3j1jvm0ayyol6ef1kdt.o
│   │   │   │   │   ├── 9vjma2jukr43actz0hmnhrhs5.o
│   │   │   │   │   ├── 9vpk5egezludb4nnd87k7hby0.o
│   │   │   │   │   ├── agp2rs0gths2spuzgb5c0dq29.o
│   │   │   │   │   ├── ar9v0j67ky5otfps4lsncm71g.o
│   │   │   │   │   ├── awf8f6mcut1fehk0oys82et2m.o
│   │   │   │   │   ├── b7hwv0f1hahj9ip27pealqw3c.o
│   │   │   │   │   ├── bwqvekseg11gsqovwjbn3k04m.o
│   │   │   │   │   ├── bzuhqswflbgwpuss4e0bxnbs4.o
│   │   │   │   │   ├── c2cj48d73wfq9msoekbxdbuhw.o
│   │   │   │   │   ├── c2idawos4du866y3x5lwahiod.o
│   │   │   │   │   ├── cbqmj0zefbk6wp8fa7uosz7vm.o
│   │   │   │   │   ├── colq6rlom4i9ec93oncq4qvfe.o
│   │   │   │   │   ├── cvl23eu5pw56azvvly6x5i4zi.o
│   │   │   │   │   ├── cw3h46x5qsx5akmwv14xs66v2.o
│   │   │   │   │   ├── d3h51dacbhaxwq31jc754sx7s.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── djazy7g9au3h8hx7aks372mkj.o
│   │   │   │   │   ├── exp9am74sczzmveexcul9z1ff.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youeta62-1544sbo.lock
│   │   │   ├── test_parsing-18z8kfksf37xh/
│   │   │   │   ├── s-h9yldvpjw0-0uwq8u1-0n91ttmez2m00uhdczbpz213d/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvpjw0-0uwq8u1.lock
│   │   │   ├── test_parsing-31otrveextwpa/
│   │   │   │   ├── s-h9youf3qtq-0dbl3xg-dd5psh0ujtdmbguq56tpwugpm/
│   │   │   │   │   ├── 7zcm1v19h4j6brn97hyg1m4ik.o
│   │   │   │   │   ├── 97blg42we4q4hr27kaoenwgoe.o
│   │   │   │   │   ├── 9ph1amwgr2roqr390ktv97vo5.o
│   │   │   │   │   ├── 9y09049cs9ntnvudy4l145ove.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── f0vlidas3syv0xs33axy85p61.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youf3qtq-0dbl3xg.lock
│   │   │   ├── test_parsing-350c0e1iov393/
│   │   │   │   ├── s-h9yqng0bxq-02noqyq-as4jldcomjv2z80ktznplboov/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng0bxq-02noqyq.lock
│   │   │   ├── test_parsing-3jtbcetvwmxdb/
│   │   │   │   ├── s-h9yldvp9mh-0jdrll7-586lebwwopkg2ybbtk7rn5vxg/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvp9mh-0jdrll7.lock
│   │   │   ├── timeline_tests-0vai1wbkjvs10/
│   │   │   │   ├── s-h9yqng095e-0asps4y-bvv1rfju2a9zzjp6n1tr83ayy/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng095e-0asps4y.lock
│   │   │   ├── timeline_tests-0y689wh64uo1x/
│   │   │   │   ├── s-h9yldvmztd-01fxcga-cewk4hjecn0zotvdph6bb6gsu/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmztd-01fxcga.lock
│   │   │   ├── timeline_tests-17ts6xrixem8g/
│   │   │   │   ├── s-h9youethcm-0zraw4o-dizqbt3psqlkr4s1b4wswop4c/
│   │   │   │   │   ├── 0d5jj4fxe11z23s96wkndyz7j.o
│   │   │   │   │   ├── 1da3n1bzq9i3ftvyvpayzo8ah.o
│   │   │   │   │   ├── 25ucvvyl9uqcv6x3au7d0zgah.o
│   │   │   │   │   ├── 39t2lu68xu0q4dj83wulaje5o.o
│   │   │   │   │   ├── 3f5ej151dbvwrn73g0ewi66zy.o
│   │   │   │   │   ├── 42af5f3lxec77z23wtufuokvy.o
│   │   │   │   │   ├── 45jqzsy7njqx0n6osesdq2c7k.o
│   │   │   │   │   ├── 4uq6fbv9r8c64drkwjl7v8r26.o
│   │   │   │   │   ├── 6pfyn1qcnzmljocftacnnjona.o
│   │   │   │   │   ├── 6q216j9x5o9xpgov4b64d8y54.o
│   │   │   │   │   ├── 73t98o40sbgpxlbhq7au5zly1.o
│   │   │   │   │   ├── 7kkrlwr5o36mirqze4ejv4hth.o
│   │   │   │   │   ├── 7o28o2wg35vafo2s65ixwsvfa.o
│   │   │   │   │   ├── 89qk5qzbdcqax5lyj0cr1bh92.o
│   │   │   │   │   ├── 8lzkfhq6fpak09ps9595mp8l9.o
│   │   │   │   │   ├── 9pxmun6mvuk2x97xzn03ewij3.o
│   │   │   │   │   ├── 9q79dvu5hplqanxryu0t0h1sf.o
│   │   │   │   │   ├── 9seha68r18q4yri81k6r7hs71.o
│   │   │   │   │   ├── aiu8r9m7s0wuprjrly4b3ojg5.o
│   │   │   │   │   ├── ay3t5yw1g3mgweurjuletcp5i.o
│   │   │   │   │   ├── b1ue7yxbbkeew8zvazz3z3xze.o
│   │   │   │   │   ├── bj5odbtdo1cchwhnwnut0feyt.o
│   │   │   │   │   ├── bu0rsy3c5wmza6vrjht3gw48w.o
│   │   │   │   │   ├── cd9ifmjt7m3vzmbkqvnn76z91.o
│   │   │   │   │   ├── cmb8mt4pgrcmh3qodimv6oo4j.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dh7j0i3xquwwes2kiy6jpwjz7.o
│   │   │   │   │   ├── e4orlbcrbn2cklsjdxvrbu4d3.o
│   │   │   │   │   ├── esczc5i759ome8xzmwn0mu601.o
│   │   │   │   │   ├── ev4vhavvvufb25igqylk50byf.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youethcm-0zraw4o.lock
│   │   │   ├── timeline_tests-29x35cdasbdgm/
│   │   │   │   ├── s-h9ylv10sm6-08y0ojz-5qvmzmgdjathsiw9tmr597gcz/
│   │   │   │   │   ├── 1vxeh4nf1osxe68n2s9s4z0pl.o
│   │   │   │   │   ├── 1w1f200cun2tarastvr8cf0us.o
│   │   │   │   │   ├── 2lzu1li7qx1wxbbhflhwiswkp.o
│   │   │   │   │   ├── 38jtebnejnb5fhbmiojtahrtu.o
│   │   │   │   │   ├── 44j0miczjlfg275stx4yz7qki.o
│   │   │   │   │   ├── 4bhun3olrh2dlu94grejd4lg9.o
│   │   │   │   │   ├── 4s9o46719stwrh6c5593ssmbd.o
│   │   │   │   │   ├── 5ctpv9j51rl2pjvcxx8nyha4k.o
│   │   │   │   │   ├── 6988y57s6as4mb2l2jn2owxtg.o
│   │   │   │   │   ├── 6f94f6t9xfyxn6u763mq96rod.o
│   │   │   │   │   ├── 6imp1hghslipnskhe7h1dsg03.o
│   │   │   │   │   ├── 6mwb67k70ba9094jr8cd66uci.o
│   │   │   │   │   ├── 6oi1zn0e6v3p96tzgdxo9io7o.o
│   │   │   │   │   ├── 6wd0juyq1d5n7o1pzkjrgdudn.o
│   │   │   │   │   ├── 8bg70dbfq6wvxivb9i1kstmne.o
│   │   │   │   │   ├── 948xjmn8svbfwddjho7a4cbp3.o
│   │   │   │   │   ├── 99xmg43jm26jkgal5ps5a5txq.o
│   │   │   │   │   ├── 9c4qq4b1gkiohmsu1gd15utb9.o
│   │   │   │   │   ├── 9phzlpfcv3cdim2242hrdecos.o
│   │   │   │   │   ├── 9wp1krb5komt5ssppjctg0te1.o
│   │   │   │   │   ├── b34kjhfx58p6rvt5wd4buc6q2.o
│   │   │   │   │   ├── bqt44dt235j6a8abdr2farbmp.o
│   │   │   │   │   ├── bz2hahwldjs83x1rai0qch8dc.o
│   │   │   │   │   ├── ckh0f51750eqjqbcdg1of0esq.o
│   │   │   │   │   ├── cs2z5nuybqfs2xc1t7ws88hh2.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dib2nk3mzvs5kh1oitehawet9.o
│   │   │   │   │   ├── dj4vpixzd46atzuuzc06dzr06.o
│   │   │   │   │   ├── el3a07q2plh2d6bdm01wcb8db.o
│   │   │   │   │   ├── exjk4rbe27c2fay3ueo7mg735.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylv10sm6-08y0ojz.lock
│   │   │   ├── tweet_coverage_analysis-0ax0z7ugpr82h/
│   │   │   │   ├── s-h9youet7ju-1kc7624-adx4kphp9wb99mx03z9r3uvo9/
│   │   │   │   │   ├── 03gl8dngo0mv7ruyymjevczjs.o
│   │   │   │   │   ├── 1ym826qonk90i80ll4y2703nq.o
│   │   │   │   │   ├── 4b8tqt8e7pp173ykwjp7m1iis.o
│   │   │   │   │   ├── 5pthvagy6nmx6s77k95lx9xcx.o
│   │   │   │   │   ├── 6hwoovb8con6qss9fl2n3mhkp.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youet7ju-1kc7624.lock
│   │   │   ├── tweet_coverage_analysis-269z2hxiayhbj/
│   │   │   │   ├── s-h9yldvmsu1-09ef890-etnudz60hljwzz94vt84602jk/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmsu1-09ef890.lock
│   │   │   ├── tweet_coverage_analysis-26lym1573lbik/
│   │   │   │   ├── s-h9yloo40iw-0ypjmin-9lqke4yxztu4bfcxc0lmeagjq/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yloo40iw-0ypjmin.lock
│   │   │   ├── tweet_coverage_analysis-35zd5kfvtfbhj/
│   │   │   │   ├── s-h9yldvmsr9-035ye3f-at4tj8zsnaomhilpe7vo7wx4n/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmsr9-035ye3f.lock
│   │   │   ├── tweet_coverage_analysis-3f3lotg5xvciq/
│   │   │   │   ├── s-h9youfuz2v-03vu4pt-ct9ysd166dhu5l6i4i3m5af2r/
│   │   │   │   │   ├── 00vztd1dbk8eu3pqe7zx8zcdm.o
│   │   │   │   │   ├── 03xrc52q6ii154cqxane9ugx3.o
│   │   │   │   │   ├── 042ojktq19mr6k08eqazl5mt3.o
│   │   │   │   │   ├── 0g5k7uqktq7ahgowrlc6qgtle.o
│   │   │   │   │   ├── 0lxin9h3uoodt2aruhrl0ku2u.o
│   │   │   │   │   ├── 0mbl5eyboa345o79qe7x22len.o
│   │   │   │   │   ├── 0x4utsxb2620drbe8vvoh1itk.o
│   │   │   │   │   ├── 0xav0niucfb5xmo4i32kv5uj3.o
│   │   │   │   │   ├── 149g1v4tb8vpqt0jmol1epvdf.o
│   │   │   │   │   ├── 1c0rcdvuwzh0oj893uwi2vdwp.o
│   │   │   │   │   ├── 1eaugmve3bhwg7v3fctoikee1.o
│   │   │   │   │   ├── 1s7zfk5ebsh0834srcckc5bc7.o
│   │   │   │   │   ├── 1s9xc2936khp8h3do20b4z196.o
│   │   │   │   │   ├── 1z2t3iba2yc9r04vqms8zo97p.o
│   │   │   │   │   ├── 23y6302om43v2rb4vzpi685gg.o
│   │   │   │   │   ├── 259dq4iya6ooj2elhxba88n0h.o
│   │   │   │   │   ├── 28heqrl7rujia3ijann5vsl0g.o
│   │   │   │   │   ├── 2czr1j2fpbbpk5fjdjykef3q4.o
│   │   │   │   │   ├── 2dkogwhaq4tp9zo7kxy1xbzap.o
│   │   │   │   │   ├── 2jz5nzzyntucfvmhg3mgezomf.o
│   │   │   │   │   ├── 2m4otwkgmaysrm9revtk0h0sc.o
│   │   │   │   │   ├── 2rnj5ykizwyf79dnmbiqhca4h.o
│   │   │   │   │   ├── 2wbqsesrdt8r46sfhrz04ox59.o
│   │   │   │   │   ├── 2xc7nob8s33pqboi5rf1e3rh8.o
│   │   │   │   │   ├── 2y1yzibjedtvuvmlydr6agkt8.o
│   │   │   │   │   ├── 35f8rfwba7iedxk5vt8rs5h99.o
│   │   │   │   │   ├── 3b8uxim9ahw4w0m24kjcjhike.o
│   │   │   │   │   ├── 3zdfwmt7edumbaz6qza677odx.o
│   │   │   │   │   ├── 40f4jtk9wfm8abyuffnxv5ocp.o
│   │   │   │   │   ├── 425lzbwf6qllti9hjkqaqq10b.o
│   │   │   │   │   ├── 48rq4de7x9v3vthodogy12hwb.o
│   │   │   │   │   ├── 4al10qneww6tzy1zysc7be2g3.o
│   │   │   │   │   ├── 4cq4uzrrwgjq8vne881wpx6e7.o
│   │   │   │   │   ├── 4er4qzi7oi0wo1rkogxw5lk51.o
│   │   │   │   │   ├── 4fy3x7yl1cu4oydre3h737bzt.o
│   │   │   │   │   ├── 4gs066rv0uf2yzvnjxsu0gofp.o
│   │   │   │   │   ├── 4l7h4hvcb7tphgr3ljzng4j7h.o
│   │   │   │   │   ├── 4ob1ch0s4gjvp5a5hlqdawi0j.o
│   │   │   │   │   ├── 4odcxb46ks6roro1dr1kpxcwb.o
│   │   │   │   │   ├── 4pn5ryvws21qmaz7h4lhzitzg.o
│   │   │   │   │   ├── 507fpudtuheq5q375hkfnblkr.o
│   │   │   │   │   ├── 50dghtg6wv22fwzn1hbbm730a.o
│   │   │   │   │   ├── 547q9g4novdqm969k6tastpbz.o
│   │   │   │   │   ├── 56uboh3uru7jpu2o6phsavuea.o
│   │   │   │   │   ├── 5cd42ccrta3dpwtn1o5ndh6w4.o
│   │   │   │   │   ├── 5n1wlhhnoo974d4i95nbnhhyw.o
│   │   │   │   │   ├── 5nxi8fp6cat3qakxyvgo6iel2.o
│   │   │   │   │   ├── 60wzvj78eo1xwfqnf11jaldfd.o
│   │   │   │   │   ├── 613ie4gpcl2x6ug5f6qwnowqu.o
│   │   │   │   │   ├── 62xvtc6bns8jaiij1lyeamar4.o
│   │   │   │   │   ├── 67ytz2ubldvi9ybvjsa3d9cj4.o
│   │   │   │   │   ├── 6aux2t3rxkhri02ccxu0p7x45.o
│   │   │   │   │   ├── 6cphjto6jqvjs5k2p32b9z0dx.o
│   │   │   │   │   ├── 6esnpjptcwzae7n4pjjbdxuso.o
│   │   │   │   │   ├── 6i04d4f7mbww959tdz84cwfub.o
│   │   │   │   │   ├── 6om8jkt3op60g5eel1itro9yg.o
│   │   │   │   │   ├── 6sbjwx62m5525fwju1zg8dou2.o
│   │   │   │   │   ├── 6z9wuvbkkfxsvsm8jv01igs65.o
│   │   │   │   │   ├── 75p3hz64iryt7orfjurul66pi.o
│   │   │   │   │   ├── 76reod21q3of92cbxflvbzytz.o
│   │   │   │   │   ├── 7jqd8e33b0od3m540dfjfu03l.o
│   │   │   │   │   ├── 7waeo7p4vql4x76n7nlm7l30w.o
│   │   │   │   │   ├── 7xzvyfb4usb6fhqatw1cp41ce.o
│   │   │   │   │   ├── 82dck00vy1e71r03jsi9hcf7j.o
│   │   │   │   │   ├── 83kblj9vjv2x19wqilj6cnoqh.o
│   │   │   │   │   ├── 8bb220p7bdda960av7v5fgqk5.o
│   │   │   │   │   ├── 8cdzyt58c0pgqbuqc95sbsg83.o
│   │   │   │   │   ├── 8nny8beqbdh50j94ojf8id0u3.o
│   │   │   │   │   ├── 8r070uh1sf1ijx8m1twsbp9ka.o
│   │   │   │   │   ├── 90s951spgq3p46jwj4p16ally.o
│   │   │   │   │   ├── 91ao3e1trzxswnxiafx0vy82x.o
│   │   │   │   │   ├── 93s4hsddh7bl78lmpj9oxnnjz.o
│   │   │   │   │   ├── 94p0ksz9xnfqx0jc1ecru4d1r.o
│   │   │   │   │   ├── 95c1k2pkgl6nce5egoiuu6rse.o
│   │   │   │   │   ├── 95hazpw83npmrolq66f7xcene.o
│   │   │   │   │   ├── 9bakd8uzullmmq0ffawj8w7t3.o
│   │   │   │   │   ├── 9p55tdp6jx4f04cbjhgay185y.o
│   │   │   │   │   ├── 9v4k5wi6mepnnn5lxhix49a8g.o
│   │   │   │   │   ├── a7rxpv6uglpd2uo894nc9i0gl.o
│   │   │   │   │   ├── aaooqfphgfk0z1xm7xqr54tna.o
│   │   │   │   │   ├── acflj3oouogv8bz6zx4df3wn3.o
│   │   │   │   │   ├── aqm12wcqyiyenthgtxqy4ozcb.o
│   │   │   │   │   ├── as3qb6cv73s0zp1gqb0oaptf5.o
│   │   │   │   │   ├── awqder0l3imtowtzsas5lws47.o
│   │   │   │   │   ├── ay6gjhikb1dv0wjncmxics898.o
│   │   │   │   │   ├── b02onbcfl99j9kzhh9f0dohvb.o
│   │   │   │   │   ├── b1exxxf7l8zcoscjk3dtr3v59.o
│   │   │   │   │   ├── b96rmdfh9r8c8o6kx02oacd4x.o
│   │   │   │   │   ├── bcxv8vqskwddg75zc2f8kus2b.o
│   │   │   │   │   ├── blc270xj3wp5omp4vbkhklzz0.o
│   │   │   │   │   ├── bsabu5p85ytjheybkrx6ggef7.o
│   │   │   │   │   ├── c1arzeiaufl9odc0570uwmcaz.o
│   │   │   │   │   ├── c7nthtv4vav73pf9acvhkeup3.o
│   │   │   │   │   ├── c8kww1zdyywwkkuuvskk7zpct.o
│   │   │   │   │   ├── cc34c84vk4xmrmwzx0o8vl52z.o
│   │   │   │   │   ├── cesgh3oycklmd81m48xyqghwa.o
│   │   │   │   │   ├── coh7ng7ooqburvzk3rdbfuyol.o
│   │   │   │   │   ├── cwm79f5pa1bqqwr1rmlwoco6v.o
│   │   │   │   │   ├── d7yedafykt4rv4hg5e6tws7df.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dn1zi0qieabbspn2y8qtu6enl.o
│   │   │   │   │   ├── dn2pz2nwq0c0gtjxim3jqci3o.o
│   │   │   │   │   ├── draf15902ln8b07fsn3174qxs.o
│   │   │   │   │   ├── dsukqwsrc01xoha4ffpy99d4h.o
│   │   │   │   │   ├── dtctn3h6u264f4843gtkd8gk6.o
│   │   │   │   │   ├── dwomfsiwzcj2tpt4zv7aivd7c.o
│   │   │   │   │   ├── e2aq2zdk324051pi4249gbdrv.o
│   │   │   │   │   ├── e966kdt1fw0z4hh48v7pqc08k.o
│   │   │   │   │   ├── ecvuhflbwyz7malieodqvrusx.o
│   │   │   │   │   ├── eh8rvgot4bwa1mteq0nvt3i12.o
│   │   │   │   │   ├── ei2g6d1y6lhash9jq7ft8l88p.o
│   │   │   │   │   ├── ezc1kg5srsizb5oldj3cvq6w4.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youfuz2v-03vu4pt.lock
│   │   │   ├── tweet_coverage_analysis-3uf81ljezxaz3/
│   │   │   │   ├── s-h9yqnfzuzq-1uafyw4-drvzza2k7jpk7woh6gb19l56f/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqnfzuzq-1uafyw4.lock
│   │   │   ├── tweet_scrolls-01wh6btd0e26x/
│   │   │   │   ├── s-h9ylonqwjw-02v4nip-btddesz4t8rh1t1m15dn004pp/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylonqwjw-02v4nip.lock
│   │   │   ├── tweet_scrolls-08enfhksad87q/
│   │   │   │   ├── s-h9youehbel-0u0xkud-88uwg1e78w7s3ooufchcrqmfv/
│   │   │   │   │   ├── 02rr4x615r65arhbfgebo3nbe.o
│   │   │   │   │   ├── 0andsxpr89zr9xt0uzu47zfv6.o
│   │   │   │   │   ├── 0hfwk8lc2fl8x2f6c4edcbxq8.o
│   │   │   │   │   ├── 0hien5pz15ewpppm4hkhoklbd.o
│   │   │   │   │   ├── 0hl8ak2lol0r5mxry7oyggsnm.o
│   │   │   │   │   ├── 0lbpgqqh4vzn9v49o8y3ucfsb.o
│   │   │   │   │   ├── 0n2mds0kztla83t296d3pncpd.o
│   │   │   │   │   ├── 0udhbsb6sh6so87ksx0g4a8pk.o
│   │   │   │   │   ├── 0vdbr8mic5qsgwjrpnmpjer1h.o
│   │   │   │   │   ├── 0wdrc88vnb4a7j1t4dflbkd9f.o
│   │   │   │   │   ├── 0wrxj2kaidqc9f1phpr8grnwc.o
│   │   │   │   │   ├── 0xrg2m48i38rfjxtlx3p1ebn5.o
│   │   │   │   │   ├── 0yekhqcmg85qkth1ie5ezsvoc.o
│   │   │   │   │   ├── 11lth58wtsn22xo7hqd1iwds1.o
│   │   │   │   │   ├── 14joayxkr9ea3rxo6ii9j4opp.o
│   │   │   │   │   ├── 155aws3co4fmkzvac31br4y2k.o
│   │   │   │   │   ├── 1a93qa1abxcsgccssurtn2tw4.o
│   │   │   │   │   ├── 1clza85x5z9rkv16s1up2nfkc.o
│   │   │   │   │   ├── 1daani1lhhrr5qtgh14o6ibxz.o
│   │   │   │   │   ├── 1fq6pehioi12u5hgiolfrzrnq.o
│   │   │   │   │   ├── 1hlz8xiod8uh5wp372hpaagi1.o
│   │   │   │   │   ├── 1jm2yyr128lj33g8jixojfx1j.o
│   │   │   │   │   ├── 1lihum5ion549pt5le7ozwhq7.o
│   │   │   │   │   ├── 1n4gy3gvtcprvb0xdrpdwi3dc.o
│   │   │   │   │   ├── 1njb9t7mdj66c6mgn6z19uhl8.o
│   │   │   │   │   ├── 1sq8aclvhzkvr5xjtbbu6883p.o
│   │   │   │   │   ├── 1tk38p6yu102x25q1eqlglqly.o
│   │   │   │   │   ├── 1ue81ulk3kdfmbsobom50e00u.o
│   │   │   │   │   ├── 1wrm4q59uyekovg48xud0uisy.o
│   │   │   │   │   ├── 1yzdumgi3ex9mjr29lyvtcobu.o
│   │   │   │   │   ├── 1z9v2v6n1ml204ooxwifikdh6.o
│   │   │   │   │   ├── 1zu8eo7y65lg5qsil0qra84u1.o
│   │   │   │   │   ├── 20dzqreiwlg6gqgss4je7sp7r.o
│   │   │   │   │   ├── 23wnumebkvm1qwgnm93rpxs53.o
│   │   │   │   │   ├── 24gt4gypq7h7z45unul5fwbi0.o
│   │   │   │   │   ├── 27klpvamb0601hw698sgogbzr.o
│   │   │   │   │   ├── 28xhpn1j2goh2cnj7foo9toh5.o
│   │   │   │   │   ├── 29hqtn3ka4u5oixzguxjb3y5c.o
│   │   │   │   │   ├── 2adpa0f2pfdxq3cqi9epp847p.o
│   │   │   │   │   ├── 2ap84nzlhhwoe7e3mr0gf7s6y.o
│   │   │   │   │   ├── 2aw0yu6stsd18tnl4opg84v83.o
│   │   │   │   │   ├── 2ki6nv7yqdlwzm6wr0mi1u1hk.o
│   │   │   │   │   ├── 2lg9kxa0cvnwhfqrspwudnwx1.o
│   │   │   │   │   ├── 2m66wyv8wpp1unz3rvyuep4ww.o
│   │   │   │   │   ├── 2m8lkpbb99jfqxvmsgr0k7aaf.o
│   │   │   │   │   ├── 2mf38k0src3unmdmv4vswrkam.o
│   │   │   │   │   ├── 2tf0yz6xtpwk1ow9gqoprk81p.o
│   │   │   │   │   ├── 2txezkzcqeffuw6ivef9bzk4n.o
│   │   │   │   │   ├── 2usq8ddq4564e7bj5ek03432a.o
│   │   │   │   │   ├── 2x1y8w7cxqw8fuwuldlevig1f.o
│   │   │   │   │   ├── 2zk5zdzo7g6njeykemqrg0hxu.o
│   │   │   │   │   ├── 3bzyur4b9myozsd7qdueuu6ex.o
│   │   │   │   │   ├── 3cen2030rjiapc2fs0lv0o10x.o
│   │   │   │   │   ├── 3hlt0ai6w8jb59qtr1apqvtcz.o
│   │   │   │   │   ├── 3hu6wr8yns72kp5dcmshjqgiy.o
│   │   │   │   │   ├── 3ifof0pe1s1fika2xlfartq2b.o
│   │   │   │   │   ├── 3n0ee70u12r5l0kkgl5dk7mvq.o
│   │   │   │   │   ├── 3np7nyxs8ndke5875lnyyttmy.o
│   │   │   │   │   ├── 3p4ebwe8ezebbbff813d9o2kq.o
│   │   │   │   │   ├── 3y0mmmi1p1wbnf7blz33xovvb.o
│   │   │   │   │   ├── 3zwupsifkndefle48g04rcbi8.o
│   │   │   │   │   ├── 4cfvvuu2i1bji9fu47gnuipn1.o
│   │   │   │   │   ├── 4gzmp1t9j4ofde9q5fn06zxzp.o
│   │   │   │   │   ├── 4j6g8isp53x4pkrfyb7cv4km8.o
│   │   │   │   │   ├── 4jt0ptcwooy2suvaeepubu4uc.o
│   │   │   │   │   ├── 4koh78iu9kqm6xzwhzdmo3vak.o
│   │   │   │   │   ├── 4mur7r5i8n1cpahyviob0zv0l.o
│   │   │   │   │   ├── 4nc2ct5gaaqji9raysyovm1hb.o
│   │   │   │   │   ├── 4o5sn40mc8yn69tgt9q8gbpqv.o
│   │   │   │   │   ├── 4ob44sfsskjo5tuua0f1st09u.o
│   │   │   │   │   ├── 4px23t56zdinrb0f5cuqaqjo5.o
│   │   │   │   │   ├── 4r64x89r7uolzezbdv1dde7re.o
│   │   │   │   │   ├── 4v7xaezpqarzxxoujkds62vd0.o
│   │   │   │   │   ├── 4z5rasuq9qvvw0rdl6lglr5bx.o
│   │   │   │   │   ├── 5349bvq3ac2qyyeswhr2lgbnv.o
│   │   │   │   │   ├── 54lvxqrxqqjohl9pp1n7rya6y.o
│   │   │   │   │   ├── 5969fcnf0ntz3rwjuyuqbl5v3.o
│   │   │   │   │   ├── 5ckafh4y0afdvg30q068xqm0h.o
│   │   │   │   │   ├── 5d68qpwfpkzwd1rkbv6f63mwn.o
│   │   │   │   │   ├── 5dgu9ekfago8q0nlvu09v50yi.o
│   │   │   │   │   ├── 5ftnyydxgaoqzncph3q1yw3a4.o
│   │   │   │   │   ├── 5l2uf8zt1vztvatsdyv99vdeb.o
│   │   │   │   │   ├── 5ltvlckyof6612y96ey84s8o4.o
│   │   │   │   │   ├── 5ly7fshwkfk708uyjaqssfclj.o
│   │   │   │   │   ├── 5r3xes9kdti4ffmxb2alba70q.o
│   │   │   │   │   ├── 5rigxb11rh5q47ee7no5ll6px.o
│   │   │   │   │   ├── 5t21h2jvmgoup07hxx8lwl2ln.o
│   │   │   │   │   ├── 5t40ksifmw07plr4r9ne5a02b.o
│   │   │   │   │   ├── 5vzj9j8kbar4py2xvbdd11l52.o
│   │   │   │   │   ├── 5wfr20ao1op9v8fwyikue9s6h.o
│   │   │   │   │   ├── 62nugatwu5t9ifkhgz7tidv34.o
│   │   │   │   │   ├── 63278qebkssnwsgm4ih8jc1ns.o
│   │   │   │   │   ├── 6580xyznvuh6974cucs6wiv2i.o
│   │   │   │   │   ├── 67vqnnw14f9qmccieu7asa8le.o
│   │   │   │   │   ├── 695etyiopg3qlqqcstdc8l3br.o
│   │   │   │   │   ├── 6agdcua66kjbjuak89xxyqzu4.o
│   │   │   │   │   ├── 6dkv3f0178q6fcvomq6fklyby.o
│   │   │   │   │   ├── 6g5fuzr864j4cv6ulascf72ob.o
│   │   │   │   │   ├── 6ioowlf68yiqbyennz2u2l59t.o
│   │   │   │   │   ├── 6izlfldsgsgwanb140isuld2n.o
│   │   │   │   │   ├── 6jxlwgsos7fpwwgcmqa66zmjw.o
│   │   │   │   │   ├── 6ktjeo2putrp54olt44l3wfe0.o
│   │   │   │   │   ├── 6lgr6demexum8tvwaqefpkw8b.o
│   │   │   │   │   ├── 6mvjod7nn3kxmzngbd9pmzenr.o
│   │   │   │   │   ├── 6oz6gyah9fb46aafp47bxne1b.o
│   │   │   │   │   ├── 6sjfnen6vi6brj81rkdgr9lqq.o
│   │   │   │   │   ├── 6u3y5i1cv7ajnmzg3459bzteq.o
│   │   │   │   │   ├── 6vw7fo4b8j3anrjbox1gdr8b7.o
│   │   │   │   │   ├── 6wmo464oc8hbb2zv93lzdlwyl.o
│   │   │   │   │   ├── 6x0r9a8heibvyyud9w3xobytg.o
│   │   │   │   │   ├── 71mx01t085z3bp36cdqkln2pf.o
│   │   │   │   │   ├── 735wb6vdk0iwzzwm6pnchiljj.o
│   │   │   │   │   ├── 77uhij8g9t3s1whps8hotpfhm.o
│   │   │   │   │   ├── 78dyzin3i9uy0y1hulosiy2ms.o
│   │   │   │   │   ├── 78n9kx7znsoklg76cbsp68ykt.o
│   │   │   │   │   ├── 79qxp8bzuf63rd6nqs4zi1r7x.o
│   │   │   │   │   ├── 7abzxfs5ylvo3ki3xwbtqyxhc.o
│   │   │   │   │   ├── 7byehp33m7nkd7ekcnl5q1xf0.o
│   │   │   │   │   ├── 7cq4c9baihfcpm58rtri64out.o
│   │   │   │   │   ├── 7d2hb7luxpved4wxzzs36mfvu.o
│   │   │   │   │   ├── 7djhprrddnorcds7uimi3ghmd.o
│   │   │   │   │   ├── 7gw5guxj0ih75bwenvfm52vld.o
│   │   │   │   │   ├── 7he9r4ga07ttz6oft630ytttk.o
│   │   │   │   │   ├── 7k7z7ixqamnuqvmeu49aknm6z.o
│   │   │   │   │   ├── 7n0rbzsqtp41tohgtg299ds8h.o
│   │   │   │   │   ├── 7nlf1jjccv2wo7s7ffgyw0m03.o
│   │   │   │   │   ├── 7otmt2b2c5t2m83dolbmsxt1z.o
│   │   │   │   │   ├── 7pla7aw0l07g4b4ftksqhp9qw.o
│   │   │   │   │   ├── 7qz3n91fmeicibwgqoo495zbp.o
│   │   │   │   │   ├── 7zvno8buc1ckpeqrhahcbl5tu.o
│   │   │   │   │   ├── 82e23ho6qbzu9pxrfoh2snc96.o
│   │   │   │   │   ├── 85vmg96nye97qbyz1tgohso1i.o
│   │   │   │   │   ├── 864qx0e7wzj6hcdni1quux0f5.o
│   │   │   │   │   ├── 889cn1f9zjyw3h7h20tty8003.o
│   │   │   │   │   ├── 8f121iaax069onfv5jwu82ife.o
│   │   │   │   │   ├── 8f54ril1cmcd3rib74yy6uwwt.o
│   │   │   │   │   ├── 8hwjngoocf9pns6xp0bdecgez.o
│   │   │   │   │   ├── 8k9a8zbksg1y42bueowlr6991.o
│   │   │   │   │   ├── 8mphgjm17efbuni1y36s7ajja.o
│   │   │   │   │   ├── 8nifr0b3y1jzrmc5jyyzv908b.o
│   │   │   │   │   ├── 8o8gnl9j26e279as8m459dfim.o
│   │   │   │   │   ├── 8p8hfx7cd4x32vywkj0v2z7lu.o
│   │   │   │   │   ├── 8q80mfgfcy8yd8dfrf1hl8xyb.o
│   │   │   │   │   ├── 8tuyy3melw4qyjcudxe8ght0i.o
│   │   │   │   │   ├── 8ybe4zmuf851hox6ijenqzjs8.o
│   │   │   │   │   ├── 8z46ujnanc7upf230gbyefrne.o
│   │   │   │   │   ├── 9560e7f9pw3bm4ajwp403qmk4.o
│   │   │   │   │   ├── 9bdbsj14tf3vko2zzfmy03emo.o
│   │   │   │   │   ├── 9bfo78dl40uwsnc04aafk4p0m.o
│   │   │   │   │   ├── 9dh1p1m3qxesw2ouj1zyrx2vx.o
│   │   │   │   │   ├── 9e2c2x950jbpypg8i9bey9ujo.o
│   │   │   │   │   ├── 9hwh3nw0smzu963fd6iyca3tj.o
│   │   │   │   │   ├── 9igktvji8yk08ycs3rpyesxaw.o
│   │   │   │   │   ├── 9ipq039aw61wk3n9y2w8x0tcl.o
│   │   │   │   │   ├── 9jr9hy1ozk6b3okxehm5uh47q.o
│   │   │   │   │   ├── 9o89gv1u3nedlk8rjezfvw6ub.o
│   │   │   │   │   ├── 9qlgyotiujiqvxo2bvfzr7pck.o
│   │   │   │   │   ├── 9rrvl9wfrnyt5dtat3laazrbn.o
│   │   │   │   │   ├── 9rx4ko003i6c1eo91w8cvdy4u.o
│   │   │   │   │   ├── a482740bw4pnanrvt1g8nvzzv.o
│   │   │   │   │   ├── a49kzd8l5odouzqi9txmc3blw.o
│   │   │   │   │   ├── a6zzf6lcwb09bf5y0bal8ia1n.o
│   │   │   │   │   ├── a7ozk4xfwj47n0uqqjbyizp2d.o
│   │   │   │   │   ├── a8hywtdomybtezd1w8c49xtzw.o
│   │   │   │   │   ├── a8piy64lp17qmrf651849cvnm.o
│   │   │   │   │   ├── a9fz4tdxhv9g03mh00hztkp1a.o
│   │   │   │   │   ├── acrlb0etz8z665bmgfthta82t.o
│   │   │   │   │   ├── adhufzv5wtz2z91jywm71oi3y.o
│   │   │   │   │   ├── adsuu59a8vnrkzj31a0rhun79.o
│   │   │   │   │   ├── ajxavpnmdhp6169zyapm9wnxg.o
│   │   │   │   │   ├── akq5jqzkt47slkic46ig10ik6.o
│   │   │   │   │   ├── ao4vfd5xlaiei91hcoe8ksgx8.o
│   │   │   │   │   ├── ap61dwte8zf2ykw3dt1u1tbww.o
│   │   │   │   │   ├── aqnw19fvy7575nz70b3oz8hl0.o
│   │   │   │   │   ├── aqz7x4vh9lq27zh5ha2ognv5d.o
│   │   │   │   │   ├── ari3nxl67y14bieljmdfhuuwu.o
│   │   │   │   │   ├── axlc14ggaeyyxowx4j9jvijdx.o
│   │   │   │   │   ├── ayhhhx240yxrk6ri7okmljo6r.o
│   │   │   │   │   ├── b1svat02adpi437etym4auyjn.o
│   │   │   │   │   ├── b385onnxd88d5mhvzm0l5jmy7.o
│   │   │   │   │   ├── b8hdoyn0rv2ll8w9tc2351vkx.o
│   │   │   │   │   ├── bb0o58a8b9d9ftpc2yc7h7fws.o
│   │   │   │   │   ├── bbsjhby8ck3udielt5f7drb5d.o
│   │   │   │   │   ├── bd3aqn3snov46wbpuktdvkm04.o
│   │   │   │   │   ├── bde54sx1jismqz8meuoyzueje.o
│   │   │   │   │   ├── bfu09swpdrloqn1ksckxttacn.o
│   │   │   │   │   ├── bght18r8tm6k0zbenh324m7eh.o
│   │   │   │   │   ├── bkxo9gqpypd0ewyjgmq2qw8tl.o
│   │   │   │   │   ├── bl8fyyi3bkzy4be2u2tap3edz.o
│   │   │   │   │   ├── blk20vwqcqons0gnxloxb0ubp.o
│   │   │   │   │   ├── bnsj45mgiqpqk8f4n2qx7xnio.o
│   │   │   │   │   ├── boxdpzh5vwt8uvmjidwzie2uq.o
│   │   │   │   │   ├── bp4p9rkmkua3foc5xmovipicf.o
│   │   │   │   │   ├── brwqlq8y6toyy9v3lf0ogd27l.o
│   │   │   │   │   ├── bsiwzktieazfjgowom9wvqrna.o
│   │   │   │   │   ├── buiyqwhe03i553grmdw46x12c.o
│   │   │   │   │   ├── bvtv5qvoil1qfv7r3vdiy2eqp.o
│   │   │   │   │   ├── c4bwywrwdwohyb1a6dpxa1xfj.o
│   │   │   │   │   ├── c72t38eiri4welvptg88stlpg.o
│   │   │   │   │   ├── c7328djprhnlsmd1wlbrsqxwi.o
│   │   │   │   │   ├── c83ruvwy340llm6pd9kg14zfr.o
│   │   │   │   │   ├── c89m1unwyt1vznbhalunk6u6r.o
│   │   │   │   │   ├── c98vm2xe06d8kpi56czyms161.o
│   │   │   │   │   ├── cclzxpp3eq37s8wdgz7zztqyl.o
│   │   │   │   │   ├── cf7q579f9vodafcofmaresz2d.o
│   │   │   │   │   ├── chvusd900afi7atpav0jgrlxr.o
│   │   │   │   │   ├── cih59qypb11882w0w9aioxuko.o
│   │   │   │   │   ├── cm9x9e6e87dn6iuj5t56kjihy.o
│   │   │   │   │   ├── cnkvez0vx3owy4fwt91i0aji3.o
│   │   │   │   │   ├── cq4o2yqr3q5500fmhg2g7w2n4.o
│   │   │   │   │   ├── csckuly2z000ijgrs4n2f708w.o
│   │   │   │   │   ├── cstl2cg6hv6h8fxtwdelhyrji.o
│   │   │   │   │   ├── cstx6cddt6ojcvo5qzoq6oiuq.o
│   │   │   │   │   ├── cy2kzg67ra2020sidkzearx0p.o
│   │   │   │   │   ├── czbtqmcxoswbhk5hib9z9p72u.o
│   │   │   │   │   ├── d193ae2tyosm1rh8j1yyqbsdy.o
│   │   │   │   │   ├── d1m3g75krok4glivtfh6gwe43.o
│   │   │   │   │   ├── d6qngwadrmtnil73anp0nkjok.o
│   │   │   │   │   ├── db8dhfr3ngyn77v7qiju7gn32.o
│   │   │   │   │   ├── djeiveeajy2uvaoihkjfb3lpn.o
│   │   │   │   │   ├── dq44lj5yi64ul32sethto72v3.o
│   │   │   │   │   ├── dsgbtduwzku00fyq2tgphw55h.o
│   │   │   │   │   ├── dtslgk00mzns7yy0pkmv05dr8.o
│   │   │   │   │   ├── dvdm20ygcjxcsgcquhy1em4wh.o
│   │   │   │   │   ├── dwnx4cmz5g4n2sxak2z2vd6sl.o
│   │   │   │   │   ├── dy6c5kifpvj5zgokmtk9w6hb7.o
│   │   │   │   │   ├── e37fiznr33tdf7ynuyqytgxkb.o
│   │   │   │   │   ├── e4sottlep2o27rwy48bw1m1ze.o
│   │   │   │   │   ├── e4zz0xgio3x9yln51i0co2r9t.o
│   │   │   │   │   ├── e5x0s42hc3gaby3urul5sm5pw.o
│   │   │   │   │   ├── e6kktll3q9ozjm2x53g7lrh4r.o
│   │   │   │   │   ├── e6sf3y26k7bo8o0xz9n8vn31p.o
│   │   │   │   │   ├── eb6qplgjifvwo9a30lyrsxdox.o
│   │   │   │   │   ├── eembzsa6c9uubrqidgx2ctws7.o
│   │   │   │   │   ├── egvij0vthyspzq5xof7gev1lw.o
│   │   │   │   │   ├── ej1ow9oalqy03p5pmerblho50.o
│   │   │   │   │   ├── ejh066peruapdbmafeb9muu7x.o
│   │   │   │   │   ├── ekadnedki4t2fttwm3p3pnpgq.o
│   │   │   │   │   ├── el7y2rr459fjr0dzjztnij1ic.o
│   │   │   │   │   ├── enbcq1nme3ojorha0lqi9c3bx.o
│   │   │   │   │   ├── enx42ub12i8erope254hto8xn.o
│   │   │   │   │   ├── eof0tb9zmpvsuvpa0memc0vdi.o
│   │   │   │   │   ├── eolnhi910ew9itsst2d2oymth.o
│   │   │   │   │   ├── eqkycogbqj3i4d6dplbzja7nk.o
│   │   │   │   │   ├── esf3892ecomexqa80lzfmqfu4.o
│   │   │   │   │   ├── etg4tlq8umy4ozgiavyhfu4yl.o
│   │   │   │   │   ├── ewkwbgb0xoidcigi7epvzbyk3.o
│   │   │   │   │   ├── ex1i1tqre8ta9r7atm2ol3wbl.o
│   │   │   │   │   ├── ez393imkj46fgqvnvhut6dmal.o
│   │   │   │   │   ├── ez7uyibb9ccwb9puyv86ja8uo.o
│   │   │   │   │   ├── f0pwjhqlj2mes7zmuhnjwzf84.o
│   │   │   │   │   ├── f1w51imzde8yb6bsil4c8upwj.o
│   │   │   │   │   ├── f259uj26krav8uyiphridj3hx.o
│   │   │   │   │   ├── f3fqdhng4feucj1y53yo3j6ua.o
│   │   │   │   │   ├── f3tml8cri2s5stkbc0gjubez5.o
│   │   │   │   │   ├── f45xij0ecr63ayvg9s1y488mq.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youehbel-0u0xkud.lock
│   │   │   ├── tweet_scrolls-0jxmwc2il9w1l/
│   │   │   │   ├── s-h9yldvmwlw-10jh1zh-aulofaet7ohk56j8pz71kn5bc/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmwlw-10jh1zh.lock
│   │   │   ├── tweet_scrolls-10hxcse1lrbiv/
│   │   │   │   ├── s-h9yldvmsan-0082t1z-6snmlaf8764420a38qvisfwn9/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yldvmsan-0082t1z.lock
│   │   │   ├── tweet_scrolls-11gguv6db06uo/
│   │   │   │   ├── s-h9yqng0cxa-0cvn7md-3lq9zdlbxhi4h6p0hfjr36ky6/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yqng0cxa-0cvn7md.lock
│   │   │   ├── tweet_scrolls-1grm7wphje55f/
│   │   │   │   ├── s-h9yloo42hy-09ebgdr-bdgjmgcqeyrlcxbb2lxc9gsqp/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9yloo42hy-09ebgdr.lock
│   │   │   ├── tweet_scrolls-26c7rw4pvgthn/
│   │   │   │   ├── s-h9ylduxwip-0afxndz-efn9ja29xx8lpj1pm91ghdn61/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylduxwip-0afxndz.lock
│   │   │   ├── tweet_scrolls-29nospkafwg0k/
│   │   │   │   ├── s-h9y896l7f5-1y4t0b0-9jri6kk06dj4e8hf6xmdy98s5/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y896l7f5-1y4t0b0.lock
│   │   │   ├── tweet_scrolls-2nlq1g2panx1k/
│   │   │   │   ├── s-h9youehcnr-02mzdnl-e3ox82t899y6r34xo7nwlyk5e/
│   │   │   │   │   ├── 00cgygq2c29sxd2ewvitl7mji.o
│   │   │   │   │   ├── 00dg07iyho10x9jyf1hcxbxc4.o
│   │   │   │   │   ├── 0130pys6b6thtfp35tlk6rlie.o
│   │   │   │   │   ├── 01h3deq2vsikt8icg8lmjo1hc.o
│   │   │   │   │   ├── 03vtx2r1q1e4apiw7iwxul4je.o
│   │   │   │   │   ├── 07spx7opg0oygl0waxi1kmy3a.o
│   │   │   │   │   ├── 08xvwkrfpp6w93m50ik1n73m1.o
│   │   │   │   │   ├── 0a5ldsqy6n30tbzvmvh5n22jr.o
│   │   │   │   │   ├── 0cgmakez6fb28rjuw18e0rppx.o
│   │   │   │   │   ├── 0gfk1rufecrosc0ryfta3id8n.o
│   │   │   │   │   ├── 0hf9ye8wz3p12x8rj83skgxzg.o
│   │   │   │   │   ├── 0hmv8faqk89wxrkds1l2jqsm7.o
│   │   │   │   │   ├── 0hpw21io3744naq6udia8pbhl.o
│   │   │   │   │   ├── 0i2l55nxnzo7dia24bwttbmtw.o
│   │   │   │   │   ├── 0lhn93fh4yc65ovc5p1c2ngg9.o
│   │   │   │   │   ├── 0lvjzq0ycvmp8o4g06j01xrgp.o
│   │   │   │   │   ├── 0nol4yijegvau7qxugavmzocm.o
│   │   │   │   │   ├── 12gcjvif3q91xhkg6igt2h5xn.o
│   │   │   │   │   ├── 17p6sn6vpepu0io7o026xp9pu.o
│   │   │   │   │   ├── 185a8fy86mzsktgeb4btfifia.o
│   │   │   │   │   ├── 1eeg4r23zz876k8t0hylsltlt.o
│   │   │   │   │   ├── 1hm3v5i9mi9ape4ub7pmn0g0a.o
│   │   │   │   │   ├── 1htjbcroe7gglac4gismphwdx.o
│   │   │   │   │   ├── 1jg53wmb0le7xosu8n32mnx90.o
│   │   │   │   │   ├── 1swuqjwoxhzt1uj1v54iduyz6.o
│   │   │   │   │   ├── 1ujo0q42ifuvnnew3rn4x07hz.o
│   │   │   │   │   ├── 1uqwucmcf1713zm9cbenljnxn.o
│   │   │   │   │   ├── 1xhn4sulfxq3177ekqn891llm.o
│   │   │   │   │   ├── 21jx584ryapb944kigg55fin3.o
│   │   │   │   │   ├── 26pinstnwlagr8bm6txk8kqj8.o
│   │   │   │   │   ├── 279p60phr3dwtn94cyq0dc5dv.o
│   │   │   │   │   ├── 28oxzvezyx5ymqwy4lqzhtgmw.o
│   │   │   │   │   ├── 2by08dz6hk1h2zw6hjp84xjls.o
│   │   │   │   │   ├── 2e0mu9v21c388qy8jyoptz7oj.o
│   │   │   │   │   ├── 2gk0onhjhw861z58j1pswe29u.o
│   │   │   │   │   ├── 2h54ripi9z755rawezmkhsyvc.o
│   │   │   │   │   ├── 2h7lhxlp4q46at1xrfg26j5ju.o
│   │   │   │   │   ├── 2rxr6u1n4b87olzgvvzj5kjio.o
│   │   │   │   │   ├── 2syl9zi5sngs0tcg9rwd0dlvw.o
│   │   │   │   │   ├── 2tkjeppvgd85k55o54o0gg1jq.o
│   │   │   │   │   ├── 2wfb1mj86rrn77v3dxa3b5y77.o
│   │   │   │   │   ├── 301hvif6f55xdery4hv9iqdji.o
│   │   │   │   │   ├── 30ul8faxkxqnpq14h23xg1le9.o
│   │   │   │   │   ├── 32xnhy0wm25zx0h5wpltfdpeq.o
│   │   │   │   │   ├── 36t2wb9o0ydz8vty57zhcg30k.o
│   │   │   │   │   ├── 3bt13otj341e3f2kdjidt2vh6.o
│   │   │   │   │   ├── 3js25k6sok3o4hygetp7e2ra0.o
│   │   │   │   │   ├── 3lxz99j9ajoqqpx9rvr6ipn5m.o
│   │   │   │   │   ├── 3md1njwzrsllqnr79olvzjcok.o
│   │   │   │   │   ├── 3oiwgxc8jkumm26kl6m328jiw.o
│   │   │   │   │   ├── 3on3oz4k14pgodfuycyv4k4s9.o
│   │   │   │   │   ├── 3pm36decia58pdy4rfv6f4ghq.o
│   │   │   │   │   ├── 3yaddxvs7ryjl9sfdkpbui70w.o
│   │   │   │   │   ├── 41qmalt8eyqmpo8goaxiw7ulj.o
│   │   │   │   │   ├── 45vp9fv456lba2756xlgfmidh.o
│   │   │   │   │   ├── 47yh7q028205ompjnq096uzjt.o
│   │   │   │   │   ├── 4afxut12b66usa1rv0o06a793.o
│   │   │   │   │   ├── 4cae4hmskojq7dncvda62hx62.o
│   │   │   │   │   ├── 4doyn41vtkql31941ak4tfy5r.o
│   │   │   │   │   ├── 4gej82x20lcg5z2r3fx3ye4ws.o
│   │   │   │   │   ├── 4gph9s47apt3oyzqq92rqdjd1.o
│   │   │   │   │   ├── 4jbw91i9tvvdm7ykf7h68dfkq.o
│   │   │   │   │   ├── 4k04d6xmbove90g38geh8zc2u.o
│   │   │   │   │   ├── 4mg2cyn4yhytvnjfga3psfoon.o
│   │   │   │   │   ├── 4ovz1722pueykia5199xr95qc.o
│   │   │   │   │   ├── 4rp7j8e9h25vp1oqm5lrurtio.o
│   │   │   │   │   ├── 4zncwzqwsw6wrc5lo6aitwjpl.o
│   │   │   │   │   ├── 56hbb1wrmrcfk26o3grht3u8t.o
│   │   │   │   │   ├── 5824abzy8efwz17a8knan8ivn.o
│   │   │   │   │   ├── 5aijunw0mkn38lh9s4p43evpv.o
│   │   │   │   │   ├── 5as0ufgb6h2bu5ex5j1msiw4h.o
│   │   │   │   │   ├── 5cqinscsoo4spxochc73in9g4.o
│   │   │   │   │   ├── 5d1g45xsuotzx9xmqgzicjee3.o
│   │   │   │   │   ├── 5d3bhe2u8xnsvy1duugbswk0i.o
│   │   │   │   │   ├── 5h368d72exavjo1loketfrwr2.o
│   │   │   │   │   ├── 5jlb1uefj065lk5qi25sc2tcu.o
│   │   │   │   │   ├── 5ny70pg20a0afye5pi6uh2k95.o
│   │   │   │   │   ├── 5r0rz952d18cgbae2wzmokg0d.o
│   │   │   │   │   ├── 5rxt8kf9bwnneobqh3epkqdnc.o
│   │   │   │   │   ├── 5saisovwppt920d8n3azo6s1l.o
│   │   │   │   │   ├── 5vkt4pdivs34o3ady599sjkbl.o
│   │   │   │   │   ├── 5z1sj855fc4sx6530jdm58b0j.o
│   │   │   │   │   ├── 61yijue072ue30qmwgzct4r0l.o
│   │   │   │   │   ├── 62nm3hqn3cw6pfwqk0jhm8y8x.o
│   │   │   │   │   ├── 63zu828ouinyzrrg6p3p3qdoo.o
│   │   │   │   │   ├── 6bkf749pytrjlj4k63rvbvvg8.o
│   │   │   │   │   ├── 6e9b2k0fcq45310x05zhdozh4.o
│   │   │   │   │   ├── 6jwqf3kafnbo7q80kv78ej410.o
│   │   │   │   │   ├── 6kbpj1q1cu4dt2066yx0p9hl0.o
│   │   │   │   │   ├── 6n86upgrvmd1y9cfxzz4n3mmz.o
│   │   │   │   │   ├── 6ptlgkzkvha7skx5baakdo173.o
│   │   │   │   │   ├── 6pvk9a8nj9tphkq4w3c8jt42i.o
│   │   │   │   │   ├── 70ag2ua8tnwt7gb8tcooi22g6.o
│   │   │   │   │   ├── 74dy6rhcnjjmja3rhnytt36vg.o
│   │   │   │   │   ├── 7dvzp5v9pf636pygc04zkfm31.o
│   │   │   │   │   ├── 7e462og8mklj0cwm9p08sd90p.o
│   │   │   │   │   ├── 7futbtb82p4pyavcp7nafpfn2.o
│   │   │   │   │   ├── 7gwnqi7voyolns9dezkmzy905.o
│   │   │   │   │   ├── 7hbh4i9lgj29huq3wgjtew3gx.o
│   │   │   │   │   ├── 7ho0zhlmo3biqp1c2uj4j5moj.o
│   │   │   │   │   ├── 7hsu0ar7n3bl3ght2gqe4bgfo.o
│   │   │   │   │   ├── 7sdpljnrtvoz7ykakarfmmpup.o
│   │   │   │   │   ├── 7suh1ielyad5awo4c0qzrl528.o
│   │   │   │   │   ├── 7t83dvuqx75jpd0t1aaw4vftx.o
│   │   │   │   │   ├── 7zpdr9rgjoim8aqddg5vn9mdn.o
│   │   │   │   │   ├── 84m2gazeiojd9mabwystrzjd6.o
│   │   │   │   │   ├── 8537f08on4b02ov3fcn0ca5ui.o
│   │   │   │   │   ├── 85u6u7t1mu263z2wukjrjoz35.o
│   │   │   │   │   ├── 86e1czaqq5mfutfpgz7dp2g0v.o
│   │   │   │   │   ├── 871vbsq9t4fnyyul8fifv2pkv.o
│   │   │   │   │   ├── 88po4p516h3x40rxfrt7rcl4i.o
│   │   │   │   │   ├── 89dowv9r27cw2bw2um3okmh9u.o
│   │   │   │   │   ├── 8badwjjrau13fjd49rysjegqa.o
│   │   │   │   │   ├── 8hyhkanu984uht00rq0dn6nld.o
│   │   │   │   │   ├── 8jhmu0rb58ft43rls1sh8orv0.o
│   │   │   │   │   ├── 8l0igqts6x1vskndt7njxcbc5.o
│   │   │   │   │   ├── 8l2vi69ukdossgj7ozflc88u7.o
│   │   │   │   │   ├── 8lvh224hufpd78i0b2piqe7dz.o
│   │   │   │   │   ├── 8s3vnvvfymtt7ijw0ndbia8uk.o
│   │   │   │   │   ├── 8uwy68am3py8bu410m8dzowpx.o
│   │   │   │   │   ├── 8wx0mylb3kiityi1ker5boiwo.o
│   │   │   │   │   ├── 8xid2sszh5e8nthh1s7bjfk9n.o
│   │   │   │   │   ├── 91lgqqp8bfjyoeyf989hgypo7.o
│   │   │   │   │   ├── 94oyvxltyy1wfdup6ekgw1t2f.o
│   │   │   │   │   ├── 98d17on90hysb25fa3fmf798d.o
│   │   │   │   │   ├── 9dehvcyifltkzxv8csz10g03h.o
│   │   │   │   │   ├── 9kwcrk25bhx17t6kngvgpsyy5.o
│   │   │   │   │   ├── 9myjwof9aygmycp0xc28ibbx0.o
│   │   │   │   │   ├── 9o1fuo9134pr2e6anm8z8s8fs.o
│   │   │   │   │   ├── 9opkn5a676js28l19rq6umug8.o
│   │   │   │   │   ├── 9qqaptjxvg2kr5zeepkuhjuub.o
│   │   │   │   │   ├── 9reivwgec3zljxe64rdqyqb2k.o
│   │   │   │   │   ├── 9t94m2sw9py237ektg65djtgr.o
│   │   │   │   │   ├── 9ufra68dcdx8l9qcaexm1060k.o
│   │   │   │   │   ├── a1ufs82lx8dr626fmqz50qpdg.o
│   │   │   │   │   ├── a442jzseoz6fzx0dcupmmt7u4.o
│   │   │   │   │   ├── a8lbk0fbyryfomaq7bxxrzb7r.o
│   │   │   │   │   ├── abekgraus1h4u7ccr270z497u.o
│   │   │   │   │   ├── ac3y5684jiwijtvekypyvhks0.o
│   │   │   │   │   ├── afwtr64ju86ara0ps8899ti1z.o
│   │   │   │   │   ├── ah0qyy2z4f808wz2foy5p97su.o
│   │   │   │   │   ├── ao9kwpaegq6g1yv8fnyhgsls7.o
│   │   │   │   │   ├── ap1t065q29ijb5jjfo2fk4f7q.o
│   │   │   │   │   ├── aqae1eb4evakh7ycotmub1fdd.o
│   │   │   │   │   ├── ard3qp6hbq5pkyuh9ceekjcpb.o
│   │   │   │   │   ├── axb7kmu8du6xeaqdp3uumyocl.o
│   │   │   │   │   ├── axire88bgpdoqx2z4ofr2tdeo.o
│   │   │   │   │   ├── aymp0nidct4r8nuac5kr0xzf3.o
│   │   │   │   │   ├── az3nspu4mbxaysmftk0j5u6xa.o
│   │   │   │   │   ├── b5fzsdcey00foivbyfqostqth.o
│   │   │   │   │   ├── bgx0iq6e1h036zwcor9efi9eg.o
│   │   │   │   │   ├── bje3wnsfsshjxjaetdot3swmr.o
│   │   │   │   │   ├── bk8a3te77tillnusm85jocfob.o
│   │   │   │   │   ├── bmrmqdg4mkhx62oc99srxnxhw.o
│   │   │   │   │   ├── bn8vn3izq06cac96kpfa7jaba.o
│   │   │   │   │   ├── brdrqze5a4kea2utk45wap1ef.o
│   │   │   │   │   ├── bsrptipy6qpjc93cjk9pkwd6a.o
│   │   │   │   │   ├── btbazqt0fboc2byr70sl81oob.o
│   │   │   │   │   ├── bu8sqajpw79k0qhavpi5i0i9j.o
│   │   │   │   │   ├── bu8v7858cwaiii0dc0eqvblv3.o
│   │   │   │   │   ├── bzhcez1dhi9g8hr4msxssawkb.o
│   │   │   │   │   ├── bzmcpeeex1ql6ubr2vkokckir.o
│   │   │   │   │   ├── bztk2ex5ikjppsac6momhl8ad.o
│   │   │   │   │   ├── c0aq7mx02a1zhtcv9inl5qt8j.o
│   │   │   │   │   ├── c5d1szo7dbszpgkxr1aqsay59.o
│   │   │   │   │   ├── c9n3wb11ji2nzwguxavxun8wz.o
│   │   │   │   │   ├── ca7nbukm1x0gr6sic912ofze0.o
│   │   │   │   │   ├── cbgrd1tamceaq1ktff8wkupuy.o
│   │   │   │   │   ├── cd29kdnmirp8huhd9qpja3pns.o
│   │   │   │   │   ├── cei3jjdcdtqvnchzjpp598u7p.o
│   │   │   │   │   ├── cfon6eh1nfhyrfjqa5uxh60c3.o
│   │   │   │   │   ├── cjzr6den34kpnpgmqny0cjy7j.o
│   │   │   │   │   ├── ckyco8wm78ed1yamehabf67jv.o
│   │   │   │   │   ├── cohrnix2w66bvfhdeha2a7idu.o
│   │   │   │   │   ├── cprmomxfekhcl53himbdsdapk.o
│   │   │   │   │   ├── ctiujcuxhwcbi0narl3iilsmv.o
│   │   │   │   │   ├── cuavv3mrjqvxcqu6xq9nu5566.o
│   │   │   │   │   ├── cye0oopma553pluffupazpp2l.o
│   │   │   │   │   ├── d3b06ger06c1aotwy5py9p0hd.o
│   │   │   │   │   ├── d3m9lr3ru2793rlh923m0g75y.o
│   │   │   │   │   ├── daefgzqnfkc9p1sdgzraoq15u.o
│   │   │   │   │   ├── db6ohx8gf73vvgpuu3vwnr5a8.o
│   │   │   │   │   ├── ddq8p2xmhh2mf0qwnrfbfgmom.o
│   │   │   │   │   ├── ddqk2c6ih6o0d9g30ae5avfaq.o
│   │   │   │   │   ├── die9dbzjeqn8zqp3hv1lzrctj.o
│   │   │   │   │   ├── dorbvir5lxt8rv8eytwqj3wi2.o
│   │   │   │   │   ├── dr5hxgzv5u2dj9pu5rhxyc97j.o
│   │   │   │   │   ├── e1hngu962it5429c1lchuht24.o
│   │   │   │   │   ├── e4cw2jxw1m83wgsve8gpxijck.o
│   │   │   │   │   ├── e8mxu270k01trk00zzp1r9mzf.o
│   │   │   │   │   ├── e9wy8qv4mb4nuy4dzxleu78hl.o
│   │   │   │   │   ├── ecqblqdimhe0eosmtjt3wpye1.o
│   │   │   │   │   ├── egojttbf3de3mxmxl65jq7yif.o
│   │   │   │   │   ├── eib2eya4p8ef6lj21tru6geaz.o
│   │   │   │   │   ├── ejkrbbhog7g8ir4p3yq08pbee.o
│   │   │   │   │   ├── ejl1lzs66zqx1thp7efhz9fru.o
│   │   │   │   │   ├── elds72a5g5lf4uklnugdy61gi.o
│   │   │   │   │   ├── en7halkregaai5ip1olcmko9j.o
│   │   │   │   │   ├── et2666olmi1kbamfsi4ie2c3m.o
│   │   │   │   │   ├── eus7v0584bp3zcd5uvrel0kg9.o
│   │   │   │   │   ├── evlxx2s1oqieuywnktt8ffnfs.o
│   │   │   │   │   ├── f4s04q91s6ylptu5wnbqlpj1e.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youehcnr-02mzdnl.lock
│   │   │   ├── tweet_scrolls-2t6nxtc5ecky2/
│   │   │   │   ├── s-h9ylduxwt4-0kwixvc-al5unx9u7974htxki2qseq3vs/
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9ylduxwt4-0kwixvc.lock
│   │   │   ├── tweet_scrolls-3m8x0oidgja7m/
│   │   │   │   ├── s-h9youeta78-1o88qet-865dpbizdarj61sfq8d2i7g86/
│   │   │   │   │   ├── 0013htinsc6a8hx7g2673roi3.o
│   │   │   │   │   ├── 0700ttqriu21krfbnuldyco7l.o
│   │   │   │   │   ├── 0a1n91to2fd10ukw2mfs7bf7i.o
│   │   │   │   │   ├── 0c40l8t83jmrmjh889j0in36w.o
│   │   │   │   │   ├── 0j9dqginxj4cebdnrhnpbua7z.o
│   │   │   │   │   ├── 0pg14g8we5bp1mnvptpo4huth.o
│   │   │   │   │   ├── 0re8ntmyzbo2sj09uwul7135h.o
│   │   │   │   │   ├── 0roaxstg9496gzn6rggrl4ges.o
│   │   │   │   │   ├── 0sbk9266yd2xuk66ckvit20wb.o
│   │   │   │   │   ├── 13jawwyqnmq38xruupzua9azb.o
│   │   │   │   │   ├── 16hlv0ni5p3omezwal82741sp.o
│   │   │   │   │   ├── 17ky1pvk09wql8w72o5daejst.o
│   │   │   │   │   ├── 1akal8whnr9obsrpokqlg90jh.o
│   │   │   │   │   ├── 1b8p6kkqzq2txoza06rl7rajx.o
│   │   │   │   │   ├── 1gkxllvaf91onzddg7zr9yom2.o
│   │   │   │   │   ├── 1hrthsky7s5vvb8odegthexrd.o
│   │   │   │   │   ├── 1iqyd7trk62buak4wl33ezodg.o
│   │   │   │   │   ├── 1jhyhhvurhc6za3rd7xewzr48.o
│   │   │   │   │   ├── 1k1pj5msrlskn312coqj5g5rl.o
│   │   │   │   │   ├── 1myvw7ps0x3p1ilwe4r2iygt3.o
│   │   │   │   │   ├── 1s3pxa5nobyp8u6ycjyqh1fez.o
│   │   │   │   │   ├── 1w913ibvda50pv2ii5xq4ws6i.o
│   │   │   │   │   ├── 1wwn5d13lwlbizfy381o0ttrl.o
│   │   │   │   │   ├── 240gefh1xa08gms72w69m4f33.o
│   │   │   │   │   ├── 269pyss0wmerd0fztklpu620h.o
│   │   │   │   │   ├── 2a886lxz4048qzo30zc246j3x.o
│   │   │   │   │   ├── 2at4bl4o13p6zrwo9y6611j1g.o
│   │   │   │   │   ├── 2bwqrczmgllviq29n0kj1m53p.o
│   │   │   │   │   ├── 2cq4mibsoich6m47yy090ablo.o
│   │   │   │   │   ├── 2dgmuyex9r2d39u3k2hatzn5s.o
│   │   │   │   │   ├── 2e9ztlhet6pqrc6zcercvq59o.o
│   │   │   │   │   ├── 2rdgjsdodlqzbapj7yskwht24.o
│   │   │   │   │   ├── 2vkrdgeg1n15o7ufzh6pdyby4.o
│   │   │   │   │   ├── 2yhjwv6iuh3kek8yia99aksxj.o
│   │   │   │   │   ├── 35d3h6tsnwfuopw96awp5fg2u.o
│   │   │   │   │   ├── 3799wboy8puffp03rjp8pbny0.o
│   │   │   │   │   ├── 38qp17m1k70io4qrezae9rz4s.o
│   │   │   │   │   ├── 3ahwbq0xwn93c9zxlhqa251xq.o
│   │   │   │   │   ├── 3c69w1ilpydp57x4qosc64jkc.o
│   │   │   │   │   ├── 3coelzs4wp0rl7b5zw8grw4zc.o
│   │   │   │   │   ├── 3ex78y4pnlndg5yoxdahg2mz9.o
│   │   │   │   │   ├── 3f0bkqn2qhmzogu65o0bo1wav.o
│   │   │   │   │   ├── 3no15t5d3opx56f2ltvzekagq.o
│   │   │   │   │   ├── 3qu8xvkeyyko5hlo3e2s4iwf6.o
│   │   │   │   │   ├── 3x8hr2kd06pwebrkt6p9isfbr.o
│   │   │   │   │   ├── 424mzg0bftg2wo3n1h5pmktti.o
│   │   │   │   │   ├── 4adspvfusl8mosec3b06o7krm.o
│   │   │   │   │   ├── 4af1th66q3sage9bm9rf3msr7.o
│   │   │   │   │   ├── 4faogvbocccct6t3v54fk2see.o
│   │   │   │   │   ├── 4lnl8m3qldab2v675yfxhmrxw.o
│   │   │   │   │   ├── 4n2dnbvbgnu0yvgiferrj2cn3.o
│   │   │   │   │   ├── 4nr29gogudtu2hynernf9m4vk.o
│   │   │   │   │   ├── 4wgft5mhe9c17xpmpkuwmdo5p.o
│   │   │   │   │   ├── 4xzmeqeunxtwe2ca6iclqyizg.o
│   │   │   │   │   ├── 5168dx76tnec0hebryoq7co19.o
│   │   │   │   │   ├── 586trsnvr7mnjve9mlbfucrcv.o
│   │   │   │   │   ├── 59inz2dq93xm15f11gbcjoxuz.o
│   │   │   │   │   ├── 5aarkuc2smvfqx4mncd13bl68.o
│   │   │   │   │   ├── 5e8dqhu28d4h73rue0lkh7ve5.o
│   │   │   │   │   ├── 5fz2v9wx52rwkexffmm9cn8jy.o
│   │   │   │   │   ├── 5gmgtq7dzy3j964jebwd304xe.o
│   │   │   │   │   ├── 5gp8bq2owvjo38qdvn9m2pyy7.o
│   │   │   │   │   ├── 5ls9raglbq7zx7qq0hartjxr7.o
│   │   │   │   │   ├── 61hhey94o479280326tbsrgvw.o
│   │   │   │   │   ├── 6a7h4n30ekc6ekt7abimkidnh.o
│   │   │   │   │   ├── 6ahlndmv4ipbo22au4k51c6hm.o
│   │   │   │   │   ├── 6dufi80ljx08svkjz51ny5hpg.o
│   │   │   │   │   ├── 6n2nkdnahlszeboujswztrp80.o
│   │   │   │   │   ├── 6n8k5p6dfd12odo30mm4w53ba.o
│   │   │   │   │   ├── 6qnjzkuuxoqgf512xa09g0czx.o
│   │   │   │   │   ├── 6vn8mlb0kwuxo8cubnitc4fup.o
│   │   │   │   │   ├── 6z4f8lynp7sz3fv7f816xnu3x.o
│   │   │   │   │   ├── 707t5dfp55b378neu2xf8mmj5.o
│   │   │   │   │   ├── 76zkc94ucpijwb4dtfd5unm8w.o
│   │   │   │   │   ├── 7cj5tqt1jsmblk6kup8mgwrz0.o
│   │   │   │   │   ├── 7d8pbpwqk91twda409ga3kije.o
│   │   │   │   │   ├── 7g1tfhdsgm2f101bbo4hhaq0x.o
│   │   │   │   │   ├── 7i0sgp18gxhha1tdp23rm5ug6.o
│   │   │   │   │   ├── 7l575lpohbf3b65kra2beolis.o
│   │   │   │   │   ├── 7ld7wztyeys3zik11fjinp4mg.o
│   │   │   │   │   ├── 7m9p5ap0lhukcizxr3vw796nr.o
│   │   │   │   │   ├── 7nkvh6vy5edqd5ezgyhdcg32w.o
│   │   │   │   │   ├── 7r8m0rocoltnw7le0oo8le6q6.o
│   │   │   │   │   ├── 7tomommc7vzknwpc7cvluqapb.o
│   │   │   │   │   ├── 7xvt125q8xyef66xoptk6euon.o
│   │   │   │   │   ├── 7zk7ovryf3bsfngji9p0ymlqz.o
│   │   │   │   │   ├── 840lfog7ryzksxmq1qyg5ep5d.o
│   │   │   │   │   ├── 87tmzamyxn604t003yolbc54b.o
│   │   │   │   │   ├── 88vkbs6se5m8xmv181v3el2ds.o
│   │   │   │   │   ├── 88zymyjl8g2axch4fuxfnjvo2.o
│   │   │   │   │   ├── 8caec1kvh3d2tk8hutpxg7188.o
│   │   │   │   │   ├── 8f2uzhlf31zv9q1k0ifx2grhb.o
│   │   │   │   │   ├── 8kieeh72slv7h566hqcpr7oeb.o
│   │   │   │   │   ├── 8lvulkomhxxad5vfc6vdgam5n.o
│   │   │   │   │   ├── 8m0bpjfkg7ofimdml69fpd5k8.o
│   │   │   │   │   ├── 8ma2mo1nziilrqkk9g24a36jl.o
│   │   │   │   │   ├── 8p7dfz8mb9xxk2ufgcmhzc2jr.o
│   │   │   │   │   ├── 8pimhei35173x61acsdm07632.o
│   │   │   │   │   ├── 8u8gugx25ae93tg4a6bamawz7.o
│   │   │   │   │   ├── 92u66tqdf3fkyad94h65t0176.o
│   │   │   │   │   ├── 92us4etf72sv4gwbj4omenjag.o
│   │   │   │   │   ├── 94alvclj2mb0t7i4f4780q7j5.o
│   │   │   │   │   ├── 98zvobt1xbjc7ne4pcc66ekrs.o
│   │   │   │   │   ├── 9b5u2y0n9gpadb91gnvbdal3y.o
│   │   │   │   │   ├── 9f75gflvlut09k68a753027vn.o
│   │   │   │   │   ├── 9grv8aqcxkeraf1osehura063.o
│   │   │   │   │   ├── 9khturhn4fp23x2tt672o7sin.o
│   │   │   │   │   ├── 9llwqg7424hn9a6z3e1ysrbm4.o
│   │   │   │   │   ├── 9qzba7p0ku22gdhnhovy7r0v2.o
│   │   │   │   │   ├── 9rww49660usavton39u1du9sn.o
│   │   │   │   │   ├── 9vlx3gcss7dac5dzxkrc97bqb.o
│   │   │   │   │   ├── a9y3zdruds5xts1r93c9hm698.o
│   │   │   │   │   ├── ak7vvhytqz0jycdmao4sd8sgv.o
│   │   │   │   │   ├── artgqenr09nefomki9li71lbk.o
│   │   │   │   │   ├── asxrn8bag9tao1vtxbdv5ie5f.o
│   │   │   │   │   ├── atl2vco9wp7sy8gbbhymsfdbf.o
│   │   │   │   │   ├── av6xvgtqr7ty2s471bbck7ej2.o
│   │   │   │   │   ├── azb4443qsnwtko6kyuai4vsra.o
│   │   │   │   │   ├── b5o3xfh6x88bnvwid111jf6el.o
│   │   │   │   │   ├── b94cwa6l52i0xtenynsleg1n5.o
│   │   │   │   │   ├── bm51lgh75oonqqtaw6lmswem6.o
│   │   │   │   │   ├── brow0fynnsvz8vnxg765x280w.o
│   │   │   │   │   ├── bszaeqvblsz58ygsuwdvyuv8g.o
│   │   │   │   │   ├── c4peezvbndz8tkm8faqanj7e3.o
│   │   │   │   │   ├── c91qmyqpywrpcdxvy25tslcnl.o
│   │   │   │   │   ├── c9g5ans5v39at9uek167elq57.o
│   │   │   │   │   ├── cbfns8qvfqjzhyuxkmnm0cv2q.o
│   │   │   │   │   ├── cii5nkygqa50uqw9vl669qnht.o
│   │   │   │   │   ├── cin680gpzzogrb15qlchs8192.o
│   │   │   │   │   ├── cj94q8h8xivgo1b802tioo2r4.o
│   │   │   │   │   ├── cn7oqzbp3hivkx568j1n2btmn.o
│   │   │   │   │   ├── cnzib56redotc7ism05csj4wb.o
│   │   │   │   │   ├── coo4baq882vcpuk11h6la0b56.o
│   │   │   │   │   ├── ctwgy0f5jlumskck5craw5foq.o
│   │   │   │   │   ├── cur2b6yxrm3eesng8nqlenzeh.o
│   │   │   │   │   ├── cybk3sk4ks0lomp62dzn9udf2.o
│   │   │   │   │   ├── d08jigulhvh5qss7c6yt6ve51.o
│   │   │   │   │   ├── d0xx72jaktmnia5k5f4jl80xi.o
│   │   │   │   │   ├── d33eta7ojul3up22ilg6q1ikf.o
│   │   │   │   │   ├── d601vptnv7z8hkoubeqz4x66n.o
│   │   │   │   │   ├── db3oxqfjdh3u7a7edxsab9ks1.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── dgy8q61td2feuf431whzenbgt.o
│   │   │   │   │   ├── dleow1ssqv31pg2smg93zx95x.o
│   │   │   │   │   ├── dlnu38n68piesvqft4rwsrdzm.o
│   │   │   │   │   ├── dm1aeogsdy1ulp6uu75sr0jkg.o
│   │   │   │   │   ├── dsb2ufl50sf3i5zt0xb563ky7.o
│   │   │   │   │   ├── e47d9x21u5w5tvyketpwvx7o8.o
│   │   │   │   │   ├── e4f6h71sxlvkoyp7jla0g7v96.o
│   │   │   │   │   ├── ecuanyrt336crhnjr68qz90qr.o
│   │   │   │   │   ├── edhf8xqe7ekupfpdh36m03pdl.o
│   │   │   │   │   ├── edwp5ctpncfdq86g9o72gy8jl.o
│   │   │   │   │   ├── ehr94hgzwtjlx35p3be64mg7z.o
│   │   │   │   │   ├── etzbl0ftavuao7rn0gq4uko1y.o
│   │   │   │   │   ├── f0l04lmfmrii76sb4ft34djlu.o
│   │   │   │   │   ├── f1e0ii3ecblh6fwvudpuh6q2k.o
│   │   │   │   │   ├── f1rgjrkpedr8k9t3rksip1qoc.o
│   │   │   │   │   ├── f4h76zux6o3g6rxetvj9k5yyy.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youeta78-1o88qet.lock
│   │   │   ├── tweet_scrolls-3qlw9r0za82pb/
│   │   │   │   ├── s-h9youfv6cl-098ya9k-14xo4yufoy7nwth9z9ylt0pg9/
│   │   │   │   │   ├── 0akgrw92edp0kq5qobtrk7bk3.o
│   │   │   │   │   ├── 0cfgildric446xy8myowi57rc.o
│   │   │   │   │   ├── 0i4wblmql0hireo398ptzlbdf.o
│   │   │   │   │   ├── 0omjwpfbhjwra03qjhkwzggau.o
│   │   │   │   │   ├── 0opkbeim6qguys792w8lhfr1n.o
│   │   │   │   │   ├── 0xhkq9uui672l6g59cl57aith.o
│   │   │   │   │   ├── 10mxv5ov4p80vzipt6cf0h1kh.o
│   │   │   │   │   ├── 16mzbnvotzlzph6r7fqc4cf0z.o
│   │   │   │   │   ├── 191s5e7p846fmzrg6f6i4u6w4.o
│   │   │   │   │   ├── 1bvpv3m2u247lhb7y83mvlsga.o
│   │   │   │   │   ├── 1e3drutdr6reh1syj9pyyhhpt.o
│   │   │   │   │   ├── 1hjx8hwq1ucouoks4asix009p.o
│   │   │   │   │   ├── 1k0vllirbkdxh5shzjn20pqks.o
│   │   │   │   │   ├── 1k7dakf6ovdw4kehulbxwxr21.o
│   │   │   │   │   ├── 1l82ylfnlynus5d6ay8l4ex3l.o
│   │   │   │   │   ├── 1x7ftpm7sw5u2sq291raxj1fp.o
│   │   │   │   │   ├── 1xv5pyq7oj0tczpf0hae9igbj.o
│   │   │   │   │   ├── 23wxvrtm7jjpffhmpbiijfxxu.o
│   │   │   │   │   ├── 27ec5xew78l5hi5exjkz3cc1x.o
│   │   │   │   │   ├── 29jq071baaw4j8u8knrzw7d44.o
│   │   │   │   │   ├── 2g02mnc7rl61ooqccweylqq9a.o
│   │   │   │   │   ├── 2i4lllr9608hviz0txhpk8ufy.o
│   │   │   │   │   ├── 2lp3171miftt9qylnhuad2x2p.o
│   │   │   │   │   ├── 2n6lbckyh6yow7odgoq2hgeq4.o
│   │   │   │   │   ├── 2qrnvjmth0zscnri3f6emku31.o
│   │   │   │   │   ├── 2rf05c0eh9rn6bukcfm9enq81.o
│   │   │   │   │   ├── 315tscqaov1amt5pbpv7c8i5r.o
│   │   │   │   │   ├── 348x74dbpgm9vo8acs0v85319.o
│   │   │   │   │   ├── 36otu1dqgcsgl45i842zqkasz.o
│   │   │   │   │   ├── 39pkp7d03v1dzzdtvcz2mlble.o
│   │   │   │   │   ├── 3djq6vh36dp39gwvs2bcox2cs.o
│   │   │   │   │   ├── 3p7ir4cpe286yexluzogp8k6v.o
│   │   │   │   │   ├── 3p8tz56yaczjtaobjubujov8p.o
│   │   │   │   │   ├── 3t3iuultucn1uu0a2f1yt1s49.o
│   │   │   │   │   ├── 4d2iuswb8h31jc4m8jvv4tbps.o
│   │   │   │   │   ├── 4dbmsj511f0w91qg5ze2qgqbo.o
│   │   │   │   │   ├── 4dgsu8r723nqg4doe9x5pkxz1.o
│   │   │   │   │   ├── 4jxa30w343iqdjekt4c667sel.o
│   │   │   │   │   ├── 4l5loa30mx6za9j773vcnyog7.o
│   │   │   │   │   ├── 4mbahcn6824jj5ozu3ugr86up.o
│   │   │   │   │   ├── 515fqa8g7uefnzewu6hzeafll.o
│   │   │   │   │   ├── 59jds4ntqn6jruu1c8qxphbib.o
│   │   │   │   │   ├── 5aiqikoz81p3sijtu0llhkl6q.o
│   │   │   │   │   ├── 5bqqxh9x2szejm1o6loikoy5g.o
│   │   │   │   │   ├── 5dcbx4btbhdlv9pig1h3u51u4.o
│   │   │   │   │   ├── 5hnaq5zq71cpnasdrr9cjipdo.o
│   │   │   │   │   ├── 5hxw2sbg0dcn7934duhes3cvr.o
│   │   │   │   │   ├── 5s45yh223p9j27723xnuoccdu.o
│   │   │   │   │   ├── 5vyjxdcx315768q1pmgx8i371.o
│   │   │   │   │   ├── 5wk0xd0zdi05qn7t2a03l0h73.o
│   │   │   │   │   ├── 60silsu233j8m017ah48oolra.o
│   │   │   │   │   ├── 64aimi9m5jdigpz6l61yeuexf.o
│   │   │   │   │   ├── 64fmc1q05jdyk99bus3f6uwgu.o
│   │   │   │   │   ├── 659ezkq0ygz5zs1pqxqnc939o.o
│   │   │   │   │   ├── 66n0as8gfhicqak41wkprvwqu.o
│   │   │   │   │   ├── 6ebaww5smejcc2pcprikr8c3n.o
│   │   │   │   │   ├── 6o3uzkmdyc1h96m7yh63xikog.o
│   │   │   │   │   ├── 6pyqso2wxfdgc9jnlrlnbakre.o
│   │   │   │   │   ├── 7fa7t54fcbmkj5q9ncizduj0t.o
│   │   │   │   │   ├── 7pic5zpyiu7lzhej6ziwzv9h6.o
│   │   │   │   │   ├── 7rjqcxlq23ameaq5cvsoikx5d.o
│   │   │   │   │   ├── 7smpchkxldkpp8u6yl5fa2pdn.o
│   │   │   │   │   ├── 83rgkag0on1rglr5ar6wf2zgs.o
│   │   │   │   │   ├── 86qf6lpqiefkybudtt8db6m9o.o
│   │   │   │   │   ├── 8kc6545v5e3oolleeis0ntl2r.o
│   │   │   │   │   ├── 8mafa1kt4z69rwd7ze7g34mrd.o
│   │   │   │   │   ├── 8nq8lmpbaaslczgqwuqh9jkzw.o
│   │   │   │   │   ├── 8oo3znrqzjgvvopceibx2zxv3.o
│   │   │   │   │   ├── 8zszigm26qm1973v4j54os1xc.o
│   │   │   │   │   ├── 903oje5fz9fb3um6l4mc5xow5.o
│   │   │   │   │   ├── 91pwnm4bxwnfwij7pcckfwqe7.o
│   │   │   │   │   ├── 99kd9nxkta72n7jslqtwcmc6f.o
│   │   │   │   │   ├── 9kuekpd371jz8fn0005l2uwwx.o
│   │   │   │   │   ├── 9p5tpicoc4m7mah2tia3jsoq4.o
│   │   │   │   │   ├── 9qgmu0jfrd187bfs4f700kodj.o
│   │   │   │   │   ├── 9zmpl3z892pekjyhlvomquhaw.o
│   │   │   │   │   ├── adigmliq8o0gil0iy9o5rr1ph.o
│   │   │   │   │   ├── ak0pf1zr2qspaxdpgynodeb09.o
│   │   │   │   │   ├── aqdgsgvo54ng4fzzyqj8tvj50.o
│   │   │   │   │   ├── auhosahle3p9ksg7ocfzcnf4w.o
│   │   │   │   │   ├── b2zjxytl444accb4e3d9g8q5o.o
│   │   │   │   │   ├── bdd8jy3koc2hkke60ibvyn3gr.o
│   │   │   │   │   ├── be4u2p1kpj9twubz292mi8d2m.o
│   │   │   │   │   ├── c44cs1brklgrrcfyyjanj89iv.o
│   │   │   │   │   ├── cb0nrw5fq2d4eba2d7xi4qgcj.o
│   │   │   │   │   ├── ccy93u8uyp50iiqhzx902zzit.o
│   │   │   │   │   ├── cecq3g8mzgtllm0xc59fc45bk.o
│   │   │   │   │   ├── cg6b7s6v1w9q9evztuw08967y.o
│   │   │   │   │   ├── ch1fup5iq33applr8sxi7yqix.o
│   │   │   │   │   ├── crvxsjei7dpowh0dvu6rlrwm6.o
│   │   │   │   │   ├── cvnlb0kaimn8c4e96hyhtenju.o
│   │   │   │   │   ├── d76dlerxurwyoh03gges68spi.o
│   │   │   │   │   ├── de0xlv507asyseymunozo1sbw.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── desfbvqep5ysa6hrjvh39pikk.o
│   │   │   │   │   ├── dlgy5wbfniubmb1ct1p4r6dij.o
│   │   │   │   │   ├── dmroxet36crqj1l6yujqdsvw3.o
│   │   │   │   │   ├── dphd2y2mll9agas1avytnwh9z.o
│   │   │   │   │   ├── dxzdgz3f1q255pwznal77etju.o
│   │   │   │   │   ├── dyz3caa4635m8v1wle7svlg6a.o
│   │   │   │   │   ├── e2dqyuwvz2tv8z18u9g4no4uw.o
│   │   │   │   │   ├── e4j8zurnqvlcjilclbl7hr7gw.o
│   │   │   │   │   ├── e5x88wa8f5urk5usxan5ozawd.o
│   │   │   │   │   ├── e8yjansse6btqz3dwyfpkws0p.o
│   │   │   │   │   ├── ednvzohm8g8p0ygnmt4eezrdq.o
│   │   │   │   │   ├── elig9tk7v0uwygdtea67h6s2n.o
│   │   │   │   │   ├── eq1l5gcs1ny0x1weydxqbb4qd.o
│   │   │   │   │   ├── eru8cn0vd5c0lu7jz0can7kd2.o
│   │   │   │   │   ├── evbxstiez2pkv1cw4f54zdlk2.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9youfv6cl-098ya9k.lock
│   │   │   ├── working_enhanced_features_test-0s84ag2t4b13r/
│   │   │   │   ├── s-h9y7k5qt69-085w6ce-2suswy3mwaf2rh0io5xqi3kra/
│   │   │   │   │   ├── 18hhwpd56p5j4y8rrdll9tmu4.o
│   │   │   │   │   ├── 1c0olsl3ny6xqfxnle8oppanw.o
│   │   │   │   │   ├── 1p0ujkix0e6d7ouwgbpfi2slr.o
│   │   │   │   │   ├── 1t6ew5qngqyboybbz6wum1zp5.o
│   │   │   │   │   ├── 1wy03sug2or66a6o8p0py9ih5.o
│   │   │   │   │   ├── 256s97kliolh0lomecp33pdcs.o
│   │   │   │   │   ├── 2o4pg1gwtbrip0xkrxpr7qayf.o
│   │   │   │   │   ├── 2w85amjk1jp717wyrsdjko1ti.o
│   │   │   │   │   ├── 45rnchynqubl4ygx8cm1wi5kl.o
│   │   │   │   │   ├── 4mpwoewzg7a58ysq72w8s2u6t.o
│   │   │   │   │   ├── 5mz2pe51jikiync7tfw3gva9f.o
│   │   │   │   │   ├── 5noj0r5u47bjd0lx5mqbu0d3r.o
│   │   │   │   │   ├── 77awt0ooqro7o7526fh188kvn.o
│   │   │   │   │   ├── 8wv2xj346b1z7mlrqj4jpjuw4.o
│   │   │   │   │   ├── 95m54qo28hymn1gd1r2k1m29g.o
│   │   │   │   │   ├── 9bnayzcibq3fh2917h9748g9q.o
│   │   │   │   │   ├── 9xz7tmdbzywi0m47hc1cauj0v.o
│   │   │   │   │   ├── bfskmbnknzurqba0ofjue0j1e.o
│   │   │   │   │   ├── bu3pem7dhn2tfbw91am4iceb2.o
│   │   │   │   │   ├── bvhm4jz2wurvrwg3av8t9ubw3.o
│   │   │   │   │   ├── c7tt40v2vtblvhuxuzltup1bg.o
│   │   │   │   │   ├── cqhnn9sh7e35a2159qqjhf08s.o
│   │   │   │   │   ├── dep-graph.bin
│   │   │   │   │   ├── diqh395dk3xvmj0s0ipuh3wqj.o
│   │   │   │   │   ├── dpbg93y33s1c35r1a9xax4s4w.o
│   │   │   │   │   ├── dquzt6y8tjw312l647xkeybjd.o
│   │   │   │   │   ├── dss3g3ymdmeqb4szdimx63260.o
│   │   │   │   │   ├── query-cache.bin
│   │   │   │   │   └── work-products.bin
│   │   │   │   └── s-h9y7k5qt69-085w6ce.lock
│   │   │   └── working_enhanced_features_test-3s4sfzr4e1225/
│   │   │       ├── s-h9y7jtmxjd-05qq10s-6skezherbv9xhpr6pem4h28o4/
│   │   │       │   ├── dep-graph.bin
│   │   │       │   ├── query-cache.bin
│   │   │       │   └── work-products.bin
│   │   │       └── s-h9y7jtmxjd-05qq10s.lock
│   │   ├── .cargo-lock
│   │   ├── file-splitter.d
│   │   └── tweet-scrolls.d
│   ├── doc/
│   │   ├── schema_discovery/
│   │   │   ├── all.html
│   │   │   ├── fn.main.html
│   │   │   ├── index.html
│   │   │   └── sidebar-items.js
│   │   ├── search.desc/
│   │   │   ├── schema_discovery/
│   │   │   │   └── schema_discovery-desc-0-.js
│   │   │   ├── test_dm_headers/
│   │   │   │   └── test_dm_headers-desc-0-.js
│   │   │   ├── test_mvp_simple/
│   │   │   │   └── test_mvp_simple-desc-0-.js
│   │   │   ├── test_parsing/
│   │   │   │   └── test_parsing-desc-0-.js
│   │   │   ├── tweet_coverage_analysis/
│   │   │   │   └── tweet_coverage_analysis-desc-0-.js
│   │   │   └── tweet_scrolls/
│   │   │       └── tweet_scrolls-desc-0-.js
│   │   ├── src/
│   │   │   ├── schema_discovery/
│   │   │   │   └── schema_discovery.rs.html
│   │   │   ├── test_dm_headers/
│   │   │   │   └── test_dm_headers.rs.html
│   │   │   ├── test_mvp_simple/
│   │   │   │   └── test_mvp_simple.rs.html
│   │   │   ├── test_parsing/
│   │   │   │   └── test_parsing.rs.html
│   │   │   ├── tweet_coverage_analysis/
│   │   │   │   └── tweet_coverage_analysis.rs.html
│   │   │   └── tweet_scrolls/
│   │   │       ├── models/
│   │   │       │   ├── direct_message.rs.html
│   │   │       │   ├── dm_headers.rs.html
│   │   │       │   ├── interaction.rs.html
│   │   │       │   ├── mod.rs.html
│   │   │       │   ├── profile.rs.html
│   │   │       │   ├── statistics.rs.html
│   │   │       │   ├── timeline.rs.html
│   │   │       │   └── tweet_classification.rs.html
│   │   │       ├── processing/
│   │   │       │   ├── data_structures.rs.html
│   │   │       │   ├── direct_messages.rs.html
│   │   │       │   ├── dm_headers_analyzer.rs.html
│   │   │       │   ├── dm_threads.rs.html
│   │   │       │   ├── file_io.rs.html
│   │   │       │   ├── mod.rs.html
│   │   │       │   ├── mvp_analyzer.rs.html
│   │   │       │   ├── reply_threads.rs.html
│   │   │       │   └── tweets.rs.html
│   │   │       ├── relationship/
│   │   │       │   ├── analyzer.rs.html
│   │   │       │   ├── anonymization.rs.html
│   │   │       │   ├── communication.rs.html
│   │   │       │   ├── file_generation.rs.html
│   │   │       │   ├── mod.rs.html
│   │   │       │   ├── prompts_generator.rs.html
│   │   │       │   ├── text_generators.rs.html
│   │   │       │   ├── timeline_integration.rs.html
│   │   │       │   └── timeline_text.rs.html
│   │   │       ├── services/
│   │   │       │   ├── analyzer.rs.html
│   │   │       │   ├── mod.rs.html
│   │   │       │   ├── timeline.rs.html
│   │   │       │   └── timeline_analyzer.rs.html
│   │   │       ├── utils/
│   │   │       │   ├── enhanced_csv_writer.rs.html
│   │   │       │   ├── mod.rs.html
│   │   │       │   ├── schema_discovery.rs.html
│   │   │       │   └── tweet_classifier.rs.html
│   │   │       ├── cli.rs.html
│   │   │       ├── lib.rs.html
│   │   │       ├── main_integration.rs.html
│   │   │       └── main_process.rs.html
│   │   ├── static.files/
│   │   │   ├── COPYRIGHT-23e9bde6c69aea69.txt
│   │   │   ├── FiraSans-LICENSE-db4b642586e02d97.txt
│   │   │   ├── FiraSans-Medium-8f9a781e4970d388.woff2
│   │   │   ├── FiraSans-Regular-018c141bf0843ffd.woff2
│   │   │   ├── LICENSE-APACHE-b91fa81cba47b86a.txt
│   │   │   ├── LICENSE-MIT-65090b722b3f6c56.txt
│   │   │   ├── NanumBarunGothic-0f09457c7a19b7c6.ttf.woff2
│   │   │   ├── NanumBarunGothic-LICENSE-18c5adf4b52b4041.txt
│   │   │   ├── SourceCodePro-It-1cc31594bf4f1f79.ttf.woff2
│   │   │   ├── SourceCodePro-LICENSE-d180d465a756484a.txt
│   │   │   ├── SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2
│   │   │   ├── SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2
│   │   │   ├── SourceSerif4-Bold-a2c9cd1067f8b328.ttf.woff2
│   │   │   ├── SourceSerif4-It-acdfaf1a8af734b1.ttf.woff2
│   │   │   ├── SourceSerif4-LICENSE-3bb119e13b1258b7.md
│   │   │   ├── SourceSerif4-Regular-46f98efaafac5295.ttf.woff2
│   │   │   ├── favicon-2c020d218678b618.svg
│   │   │   ├── favicon-32x32-422f7d1d52889060.png
│   │   │   ├── main-921df33f47b8780c.js
│   │   │   ├── normalize-76eba96aa4d2e634.css
│   │   │   ├── noscript-3b12f09e550e0385.css
│   │   │   ├── rust-logo-151179464ae7ed46.svg
│   │   │   ├── rustdoc-492a78a4a87dcc01.css
│   │   │   ├── scrape-examples-ef1e698c1d417c0c.js
│   │   │   ├── search-a99f1315e7cc5121.js
│   │   │   ├── settings-4313503d2e1961c2.js
│   │   │   ├── src-script-e66d777a5a92e9b2.js
│   │   │   └── storage-118b08c4c78b968e.js
│   │   ├── test_dm_headers/
│   │   │   ├── all.html
│   │   │   ├── fn.main.html
│   │   │   ├── index.html
│   │   │   └── sidebar-items.js
│   │   ├── test_mvp_simple/
│   │   │   ├── all.html
│   │   │   ├── fn.main.html
│   │   │   ├── index.html
│   │   │   └── sidebar-items.js
│   │   ├── test_parsing/
│   │   │   ├── all.html
│   │   │   ├── fn.main.html
│   │   │   ├── index.html
│   │   │   └── sidebar-items.js
│   │   ├── trait.impl/
│   │   │   ├── core/
│   │   │   │   ├── clone/
│   │   │   │   │   └── trait.Clone.js
│   │   │   │   ├── cmp/
│   │   │   │   │   ├── trait.Eq.js
│   │   │   │   │   └── trait.PartialEq.js
│   │   │   │   ├── default/
│   │   │   │   │   └── trait.Default.js
│   │   │   │   ├── fmt/
│   │   │   │   │   ├── trait.Debug.js
│   │   │   │   │   └── trait.Display.js
│   │   │   │   ├── hash/
│   │   │   │   │   └── trait.Hash.js
│   │   │   │   ├── marker/
│   │   │   │   │   ├── trait.Copy.js
│   │   │   │   │   ├── trait.Freeze.js
│   │   │   │   │   ├── trait.Send.js
│   │   │   │   │   ├── trait.StructuralPartialEq.js
│   │   │   │   │   ├── trait.Sync.js
│   │   │   │   │   └── trait.Unpin.js
│   │   │   │   └── panic/
│   │   │   │       └── unwind_safe/
│   │   │   │           ├── trait.RefUnwindSafe.js
│   │   │   │           └── trait.UnwindSafe.js
│   │   │   └── serde/
│   │   │       ├── de/
│   │   │       │   └── trait.Deserialize.js
│   │   │       └── ser/
│   │   │           └── trait.Serialize.js
│   │   ├── tweet_coverage_analysis/
│   │   │   ├── all.html
│   │   │   ├── fn.analyze_coverage.html
│   │   │   ├── fn.analyze_threading_quality.html
│   │   │   ├── fn.analyze_tweet_structure.html
│   │   │   ├── fn.create_threads_from_tweets.html
│   │   │   ├── fn.extract_json_content.html
│   │   │   ├── fn.investigate_missing_tweets.html
│   │   │   ├── fn.main.html
│   │   │   ├── index.html
│   │   │   └── sidebar-items.js
│   │   ├── tweet_scrolls/
│   │   │   ├── cli/
│   │   │   │   ├── fn.process_with_cli.html
│   │   │   │   ├── index.html
│   │   │   │   ├── sidebar-items.js
│   │   │   │   └── struct.CliConfig.html
│   │   │   ├── main_integration/
│   │   │   │   ├── fn.generate_relationship_analysis_prompt.html
│   │   │   │   ├── fn.main_analyze_relationships.html
│   │   │   │   ├── fn.should_run_relationship_analysis.html
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── main_process/
│   │   │   │   ├── fn.main_process_twitter_archive.html
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── models/
│   │   │   │   ├── direct_message/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.DmConversation.html
│   │   │   │   │   ├── struct.DmEditHistory.html
│   │   │   │   │   ├── struct.DmMessage.html
│   │   │   │   │   ├── struct.DmMessageCreate.html
│   │   │   │   │   ├── struct.DmReaction.html
│   │   │   │   │   ├── struct.DmUrl.html
│   │   │   │   │   └── struct.DmWrapper.html
│   │   │   │   ├── dm_headers/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.DmHeaderConversation.html
│   │   │   │   │   ├── struct.DmHeaderMessage.html
│   │   │   │   │   ├── struct.DmHeaderMessageCreate.html
│   │   │   │   │   └── struct.DmHeaderWrapper.html
│   │   │   │   ├── interaction/
│   │   │   │   │   ├── enum.InteractionType.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.ConversationThread.html
│   │   │   │   │   └── struct.InteractionEvent.html
│   │   │   │   ├── profile/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.UserProfile.html
│   │   │   │   ├── statistics/
│   │   │   │   │   ├── fn.calculate_percentiles.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.InteractionStats.html
│   │   │   │   ├── timeline/
│   │   │   │   │   ├── enum.TimelinePattern.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.ResponseTimeStats.html
│   │   │   │   │   ├── struct.TimelineAnalysis.html
│   │   │   │   │   └── struct.TimelineDensity.html
│   │   │   │   ├── tweet_classification/
│   │   │   │   │   ├── enum.TweetType.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── processing/
│   │   │   │   ├── data_structures/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.CsvWriter.html
│   │   │   │   │   ├── struct.EditInfo.html
│   │   │   │   │   ├── struct.EditInitial.html
│   │   │   │   │   ├── struct.Hashtag.html
│   │   │   │   │   ├── struct.ProcessedConversation.html
│   │   │   │   │   ├── struct.Symbol.html
│   │   │   │   │   ├── struct.Thread.html
│   │   │   │   │   ├── struct.Tweet.html
│   │   │   │   │   ├── struct.TweetEntities.html
│   │   │   │   │   ├── struct.TweetUrl.html
│   │   │   │   │   ├── struct.TweetWrapper.html
│   │   │   │   │   └── struct.UserMention.html
│   │   │   │   ├── direct_messages/
│   │   │   │   │   ├── fn.process_dm_conversations.html
│   │   │   │   │   ├── fn.process_dm_file.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── dm_headers_analyzer/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.DmHeadersAnalysisResult.html
│   │   │   │   │   ├── struct.DmHeadersAnalyzer.html
│   │   │   │   │   └── struct.DmHeadersPerformanceStats.html
│   │   │   │   ├── dm_threads/
│   │   │   │   │   ├── fn.convert_dms_to_threads.html
│   │   │   │   │   ├── fn.format_dm_thread_as_text.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.DmThread.html
│   │   │   │   │   ├── struct.DmThreadMessage.html
│   │   │   │   │   └── struct.ThreadMetadata.html
│   │   │   │   ├── file_io/
│   │   │   │   │   ├── fn.get_dm_file.html
│   │   │   │   │   ├── fn.get_input_file.html
│   │   │   │   │   ├── fn.prompt_input.html
│   │   │   │   │   ├── fn.write_csv.html
│   │   │   │   │   ├── fn.write_threads_to_file.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── mvp_analyzer/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.ActivityPattern.html
│   │   │   │   │   ├── struct.MvpAnalyzer.html
│   │   │   │   │   └── struct.SimpleRelationship.html
│   │   │   │   ├── reply_threads/
│   │   │   │   │   ├── fn.format_thread_as_text.html
│   │   │   │   │   ├── fn.process_reply_threads.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── tweets/
│   │   │   │   │   ├── fn.process_tweets.html
│   │   │   │   │   ├── fn.process_tweets_simple.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── relationship/
│   │   │   │   ├── analyzer/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.RelationshipAnalyzer.html
│   │   │   │   ├── anonymization/
│   │   │   │   │   ├── fn.hash_user_id.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── communication/
│   │   │   │   │   ├── fn.calculate_average_response_time.html
│   │   │   │   │   ├── fn.calculate_communication_frequency.html
│   │   │   │   │   ├── fn.calculate_response_times.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.CommunicationFrequency.html
│   │   │   │   ├── file_generation/
│   │   │   │   │   ├── fn.generate_llm_analysis_prompts.html
│   │   │   │   │   ├── fn.generate_profile_text.html
│   │   │   │   │   ├── fn.generate_timeline_text.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.LLMFileGenerator.html
│   │   │   │   ├── prompts_generator/
│   │   │   │   │   ├── fn.generate_llm_analysis_prompts.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── text_generators/
│   │   │   │   │   ├── fn.generate_user_profile_text.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── timeline_integration/
│   │   │   │   │   ├── fn.analyze_hourly_activity.html
│   │   │   │   │   ├── fn.calculate_interaction_density.html
│   │   │   │   │   ├── fn.calculate_weekly_distribution.html
│   │   │   │   │   ├── fn.find_most_active_day.html
│   │   │   │   │   ├── fn.find_peak_activity_hours.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── timeline_text/
│   │   │   │   │   ├── fn.generate_timeline_text.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── services/
│   │   │   │   ├── analyzer/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.InteractionAnalyzer.html
│   │   │   │   ├── timeline/
│   │   │   │   │   ├── fn.analyze_conversation_patterns.html
│   │   │   │   │   ├── fn.analyze_temporal_patterns.html
│   │   │   │   │   ├── fn.build_timeline.html
│   │   │   │   │   ├── fn.calculate_response_times.html
│   │   │   │   │   ├── fn.group_into_conversations.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── timeline_analyzer/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   └── struct.TimelineAnalyzer.html
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── utils/
│   │   │   │   ├── enhanced_csv_writer/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.CsvRecord.html
│   │   │   │   │   └── struct.EnhancedCsvWriter.html
│   │   │   │   ├── schema_discovery/
│   │   │   │   │   ├── index.html
│   │   │   │   │   ├── sidebar-items.js
│   │   │   │   │   ├── struct.FieldInfo.html
│   │   │   │   │   └── struct.SchemaDiscovery.html
│   │   │   │   ├── tweet_classifier/
│   │   │   │   │   ├── fn.classify_tweet_type.html
│   │   │   │   │   ├── fn.create_reply_context.html
│   │   │   │   │   ├── fn.generate_twitter_url.html
│   │   │   │   │   ├── index.html
│   │   │   │   │   └── sidebar-items.js
│   │   │   │   ├── fn.format_duration.html
│   │   │   │   ├── fn.format_timestamp.html
│   │   │   │   ├── fn.read_file_to_string.html
│   │   │   │   ├── index.html
│   │   │   │   └── sidebar-items.js
│   │   │   ├── all.html
│   │   │   ├── index.html
│   │   │   └── sidebar-items.js
│   │   ├── .lock
│   │   ├── crates.js
│   │   ├── help.html
│   │   ├── search-index.js
│   │   ├── settings.html
│   │   └── src-files.js
│   ├── release/
│   │   ├── .fingerprint/
│   │   │   ├── aho-corasick-044a15e09ff959a0/
│   │   │   │   ├── dep-lib-aho_corasick
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-aho_corasick
│   │   │   │   └── lib-aho_corasick.json
│   │   │   ├── anyhow-15ae841ecc1fc00b/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── anyhow-6d5a8fe6aba70a53/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── anyhow-76b96b344e62857d/
│   │   │   │   ├── dep-lib-anyhow
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-anyhow
│   │   │   │   └── lib-anyhow.json
│   │   │   ├── arrayref-691188126eb31e4a/
│   │   │   │   ├── dep-lib-arrayref
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-arrayref
│   │   │   │   └── lib-arrayref.json
│   │   │   ├── arrayvec-927c59d4bdc32889/
│   │   │   │   ├── dep-lib-arrayvec
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-arrayvec
│   │   │   │   └── lib-arrayvec.json
│   │   │   ├── autocfg-2f8bb907aa534ee7/
│   │   │   │   ├── dep-lib-autocfg
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-autocfg
│   │   │   │   └── lib-autocfg.json
│   │   │   ├── blake3-65e810a7652eb8af/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── blake3-de2d0237e188b294/
│   │   │   │   ├── dep-lib-blake3
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-blake3
│   │   │   │   └── lib-blake3.json
│   │   │   ├── blake3-ea3065178617bf9e/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── bytes-f75bdf707354ae82/
│   │   │   │   ├── dep-lib-bytes
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-bytes
│   │   │   │   └── lib-bytes.json
│   │   │   ├── cc-4fb952857f329aec/
│   │   │   │   ├── dep-lib-cc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-cc
│   │   │   │   └── lib-cc.json
│   │   │   ├── cfg-if-b6b28a05ba7745a1/
│   │   │   │   ├── dep-lib-cfg_if
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-cfg_if
│   │   │   │   └── lib-cfg_if.json
│   │   │   ├── chrono-bc4e1a8914e9ca4a/
│   │   │   │   ├── dep-lib-chrono
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-chrono
│   │   │   │   └── lib-chrono.json
│   │   │   ├── console-c1a48bb48e074718/
│   │   │   │   ├── dep-lib-console
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-console
│   │   │   │   └── lib-console.json
│   │   │   ├── constant_time_eq-388abd0a524149b6/
│   │   │   │   ├── dep-lib-constant_time_eq
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-constant_time_eq
│   │   │   │   └── lib-constant_time_eq.json
│   │   │   ├── csv-91aa9e97e26afd7c/
│   │   │   │   ├── dep-lib-csv
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-csv
│   │   │   │   └── lib-csv.json
│   │   │   ├── csv-core-8b1c02ebc08dc725/
│   │   │   │   ├── dep-lib-csv_core
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-csv_core
│   │   │   │   └── lib-csv_core.json
│   │   │   ├── iana-time-zone-118df478854c024b/
│   │   │   │   ├── dep-lib-iana_time_zone
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-iana_time_zone
│   │   │   │   └── lib-iana_time_zone.json
│   │   │   ├── indicatif-89d4fef482fdca77/
│   │   │   │   ├── dep-lib-indicatif
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-indicatif
│   │   │   │   └── lib-indicatif.json
│   │   │   ├── itoa-34764443509b5a71/
│   │   │   │   ├── dep-lib-itoa
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-itoa
│   │   │   │   └── lib-itoa.json
│   │   │   ├── libc-3de5de7f1f41b8dd/
│   │   │   │   ├── dep-lib-libc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-libc
│   │   │   │   └── lib-libc.json
│   │   │   ├── libc-79b525bf27e2a85a/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── libc-c2a531d79222c519/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── libmimalloc-sys-0c85d9c338e7c5bf/
│   │   │   │   ├── dep-lib-libmimalloc_sys
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-libmimalloc_sys
│   │   │   │   └── lib-libmimalloc_sys.json
│   │   │   ├── libmimalloc-sys-2275eca3103389ea/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── libmimalloc-sys-cfe1c29b9886f58c/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── lock_api-39f422a8d07c87ce/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── lock_api-9580e153bf48c295/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── lock_api-ba3dac2b4630b2e9/
│   │   │   │   ├── dep-lib-lock_api
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-lock_api
│   │   │   │   └── lib-lock_api.json
│   │   │   ├── memchr-336d12e21f6d41dc/
│   │   │   │   ├── dep-lib-memchr
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-memchr
│   │   │   │   └── lib-memchr.json
│   │   │   ├── mimalloc-998c9526879898b9/
│   │   │   │   ├── dep-lib-mimalloc
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-mimalloc
│   │   │   │   └── lib-mimalloc.json
│   │   │   ├── mio-7f75eb53cd11eb19/
│   │   │   │   ├── dep-lib-mio
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-mio
│   │   │   │   └── lib-mio.json
│   │   │   ├── num-traits-12a8e3850cc81d07/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── num-traits-1635ae7f01db6bce/
│   │   │   │   ├── dep-lib-num_traits
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-num_traits
│   │   │   │   └── lib-num_traits.json
│   │   │   ├── num-traits-d6210182ddb744aa/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── number_prefix-5f5aa614c0734374/
│   │   │   │   ├── dep-lib-number_prefix
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-number_prefix
│   │   │   │   └── lib-number_prefix.json
│   │   │   ├── once_cell-2a3b556b2b75713e/
│   │   │   │   ├── dep-lib-once_cell
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-once_cell
│   │   │   │   └── lib-once_cell.json
│   │   │   ├── parking_lot-7f3a9ee2d6a45be3/
│   │   │   │   ├── dep-lib-parking_lot
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-parking_lot
│   │   │   │   └── lib-parking_lot.json
│   │   │   ├── parking_lot_core-cd457b1552e61f6f/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── parking_lot_core-d938a52daf1922c9/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── parking_lot_core-faf815a8766f5c65/
│   │   │   │   ├── dep-lib-parking_lot_core
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-parking_lot_core
│   │   │   │   └── lib-parking_lot_core.json
│   │   │   ├── pin-project-lite-73029686d6eb5212/
│   │   │   │   ├── dep-lib-pin_project_lite
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-pin_project_lite
│   │   │   │   └── lib-pin_project_lite.json
│   │   │   ├── portable-atomic-7cad990fd19d1d46/
│   │   │   │   ├── dep-lib-portable_atomic
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-portable_atomic
│   │   │   │   └── lib-portable_atomic.json
│   │   │   ├── portable-atomic-855735e8bbc05b5d/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── portable-atomic-a5fbae75cf37d953/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── proc-macro2-0683e157256470fc/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── proc-macro2-385115b9d220369c/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── proc-macro2-bb62df2d3a4ce355/
│   │   │   │   ├── dep-lib-proc_macro2
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-proc_macro2
│   │   │   │   └── lib-proc_macro2.json
│   │   │   ├── quote-bc64820655e9da7a/
│   │   │   │   ├── dep-lib-quote
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-quote
│   │   │   │   └── lib-quote.json
│   │   │   ├── regex-888b642d8d0524fb/
│   │   │   │   ├── dep-lib-regex
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex
│   │   │   │   └── lib-regex.json
│   │   │   ├── regex-automata-80e5fbbd3a5c5103/
│   │   │   │   ├── dep-lib-regex_automata
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex_automata
│   │   │   │   └── lib-regex_automata.json
│   │   │   ├── regex-syntax-433f38fb514dba5a/
│   │   │   │   ├── dep-lib-regex_syntax
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-regex_syntax
│   │   │   │   └── lib-regex_syntax.json
│   │   │   ├── ryu-6f72584ba7c56a07/
│   │   │   │   ├── dep-lib-ryu
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-ryu
│   │   │   │   └── lib-ryu.json
│   │   │   ├── scopeguard-486830b48780e581/
│   │   │   │   ├── dep-lib-scopeguard
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-scopeguard
│   │   │   │   └── lib-scopeguard.json
│   │   │   ├── serde-6a59f8d3ad76dbaa/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── serde-d98c8bdc31a2b31e/
│   │   │   │   ├── dep-lib-serde
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde
│   │   │   │   └── lib-serde.json
│   │   │   ├── serde-e355fb8b84ca0a8e/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── serde_derive-2ac8132164381f0c/
│   │   │   │   ├── dep-lib-serde_derive
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde_derive
│   │   │   │   └── lib-serde_derive.json
│   │   │   ├── serde_json-1660336a914dbfaa/
│   │   │   │   ├── build-script-build-script-build
│   │   │   │   ├── build-script-build-script-build.json
│   │   │   │   ├── dep-build-script-build-script-build
│   │   │   │   └── invoked.timestamp
│   │   │   ├── serde_json-b6393280396058e6/
│   │   │   │   ├── dep-lib-serde_json
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-serde_json
│   │   │   │   └── lib-serde_json.json
│   │   │   ├── serde_json-fbdc35a85516aa06/
│   │   │   │   ├── run-build-script-build-script-build
│   │   │   │   └── run-build-script-build-script-build.json
│   │   │   ├── shlex-b41d57ce4f6400f0/
│   │   │   │   ├── dep-lib-shlex
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-shlex
│   │   │   │   └── lib-shlex.json
│   │   │   ├── signal-hook-registry-953241fdc789ad08/
│   │   │   │   ├── dep-lib-signal_hook_registry
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-signal_hook_registry
│   │   │   │   └── lib-signal_hook_registry.json
│   │   │   ├── smallvec-d5808b731ad0d356/
│   │   │   │   ├── dep-lib-smallvec
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-smallvec
│   │   │   │   └── lib-smallvec.json
│   │   │   ├── socket2-8375c828b5d91f09/
│   │   │   │   ├── dep-lib-socket2
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-socket2
│   │   │   │   └── lib-socket2.json
│   │   │   ├── syn-51682224443f7292/
│   │   │   │   ├── dep-lib-syn
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-syn
│   │   │   │   └── lib-syn.json
│   │   │   ├── tokio-79b449c06b2adf31/
│   │   │   │   ├── dep-lib-tokio
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tokio
│   │   │   │   └── lib-tokio.json
│   │   │   ├── tokio-macros-3f4f5722daa6242a/
│   │   │   │   ├── dep-lib-tokio_macros
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tokio_macros
│   │   │   │   └── lib-tokio_macros.json
│   │   │   ├── tweet-scrolls-22ca73479cc0bca2/
│   │   │   │   ├── bin-tweet_coverage_analysis
│   │   │   │   ├── bin-tweet_coverage_analysis.json
│   │   │   │   ├── dep-bin-tweet_coverage_analysis
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-34521db51e9eb0c0/
│   │   │   │   ├── bin-test_dm_headers
│   │   │   │   ├── bin-test_dm_headers.json
│   │   │   │   ├── dep-bin-test_dm_headers
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-4496f934d374e5ea/
│   │   │   │   ├── bin-test_parsing
│   │   │   │   ├── bin-test_parsing.json
│   │   │   │   ├── dep-bin-test_parsing
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-479821b0f810c62e/
│   │   │   │   ├── bin-file-splitter
│   │   │   │   ├── bin-file-splitter.json
│   │   │   │   ├── dep-bin-file-splitter
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-855854e700077f50/
│   │   │   │   ├── bin-schema_discovery
│   │   │   │   ├── bin-schema_discovery.json
│   │   │   │   ├── dep-bin-schema_discovery
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-9b1d2847d2835506/
│   │   │   │   ├── bin-test_mvp_simple
│   │   │   │   ├── bin-test_mvp_simple.json
│   │   │   │   ├── dep-bin-test_mvp_simple
│   │   │   │   └── invoked.timestamp
│   │   │   ├── tweet-scrolls-a23468dda44eb11d/
│   │   │   │   ├── dep-lib-tweet_scrolls
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-tweet_scrolls
│   │   │   │   └── lib-tweet_scrolls.json
│   │   │   ├── tweet-scrolls-e29d3bc4c1ff092c/
│   │   │   │   ├── bin-tweet-scrolls
│   │   │   │   ├── bin-tweet-scrolls.json
│   │   │   │   ├── dep-bin-tweet-scrolls
│   │   │   │   └── invoked.timestamp
│   │   │   ├── unicode-ident-58aa57ac70cc9d34/
│   │   │   │   ├── dep-lib-unicode_ident
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── lib-unicode_ident
│   │   │   │   └── lib-unicode_ident.json
│   │   │   └── unicode-width-483ea5d9fd8ec48c/
│   │   │       ├── dep-lib-unicode_width
│   │   │       ├── invoked.timestamp
│   │   │       ├── lib-unicode_width
│   │   │       └── lib-unicode_width.json
│   │   ├── build/
│   │   │   ├── anyhow-15ae841ecc1fc00b/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── anyhow-6d5a8fe6aba70a53/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-6d5a8fe6aba70a53
│   │   │   │   └── build_script_build-6d5a8fe6aba70a53.d
│   │   │   ├── blake3-65e810a7652eb8af/
│   │   │   │   ├── out/
│   │   │   │   │   ├── b8423798394d5395-blake3_avx2_x86-64_unix.o
│   │   │   │   │   ├── b8423798394d5395-blake3_avx512_x86-64_unix.o
│   │   │   │   │   ├── b8423798394d5395-blake3_sse2_x86-64_unix.o
│   │   │   │   │   ├── b8423798394d5395-blake3_sse41_x86-64_unix.o
│   │   │   │   │   ├── flag_check
│   │   │   │   │   ├── flag_check.c
│   │   │   │   │   ├── libblake3_avx512_assembly.a
│   │   │   │   │   └── libblake3_sse2_sse41_avx2_assembly.a
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── blake3-ea3065178617bf9e/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-ea3065178617bf9e
│   │   │   │   └── build_script_build-ea3065178617bf9e.d
│   │   │   ├── libc-79b525bf27e2a85a/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-79b525bf27e2a85a
│   │   │   │   └── build_script_build-79b525bf27e2a85a.d
│   │   │   ├── libc-c2a531d79222c519/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── libmimalloc-sys-2275eca3103389ea/
│   │   │   │   ├── out/
│   │   │   │   │   ├── 5a07bf3761bb5df8-static.o
│   │   │   │   │   ├── flag_check
│   │   │   │   │   ├── flag_check.c
│   │   │   │   │   └── libmimalloc.a
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── libmimalloc-sys-cfe1c29b9886f58c/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-cfe1c29b9886f58c
│   │   │   │   └── build_script_build-cfe1c29b9886f58c.d
│   │   │   ├── lock_api-39f422a8d07c87ce/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── lock_api-9580e153bf48c295/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-9580e153bf48c295
│   │   │   │   └── build_script_build-9580e153bf48c295.d
│   │   │   ├── num-traits-12a8e3850cc81d07/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-12a8e3850cc81d07
│   │   │   │   └── build_script_build-12a8e3850cc81d07.d
│   │   │   ├── num-traits-d6210182ddb744aa/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── parking_lot_core-cd457b1552e61f6f/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-cd457b1552e61f6f
│   │   │   │   └── build_script_build-cd457b1552e61f6f.d
│   │   │   ├── parking_lot_core-d938a52daf1922c9/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── portable-atomic-855735e8bbc05b5d/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── portable-atomic-a5fbae75cf37d953/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-a5fbae75cf37d953
│   │   │   │   └── build_script_build-a5fbae75cf37d953.d
│   │   │   ├── proc-macro2-0683e157256470fc/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-0683e157256470fc
│   │   │   │   └── build_script_build-0683e157256470fc.d
│   │   │   ├── proc-macro2-385115b9d220369c/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── serde-6a59f8d3ad76dbaa/
│   │   │   │   ├── out/
│   │   │   │   ├── invoked.timestamp
│   │   │   │   ├── output
│   │   │   │   ├── root-output
│   │   │   │   └── stderr
│   │   │   ├── serde-e355fb8b84ca0a8e/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-e355fb8b84ca0a8e
│   │   │   │   └── build_script_build-e355fb8b84ca0a8e.d
│   │   │   ├── serde_json-1660336a914dbfaa/
│   │   │   │   ├── build-script-build
│   │   │   │   ├── build_script_build-1660336a914dbfaa
│   │   │   │   └── build_script_build-1660336a914dbfaa.d
│   │   │   └── serde_json-fbdc35a85516aa06/
│   │   │       ├── out/
│   │   │       ├── invoked.timestamp
│   │   │       ├── output
│   │   │       ├── root-output
│   │   │       └── stderr
│   │   ├── deps/
│   │   │   ├── aho_corasick-044a15e09ff959a0.d
│   │   │   ├── anyhow-76b96b344e62857d.d
│   │   │   ├── arrayref-691188126eb31e4a.d
│   │   │   ├── arrayvec-927c59d4bdc32889.d
│   │   │   ├── autocfg-2f8bb907aa534ee7.d
│   │   │   ├── blake3-de2d0237e188b294.d
│   │   │   ├── bytes-f75bdf707354ae82.d
│   │   │   ├── cc-4fb952857f329aec.d
│   │   │   ├── cfg_if-b6b28a05ba7745a1.d
│   │   │   ├── chrono-bc4e1a8914e9ca4a.d
│   │   │   ├── console-c1a48bb48e074718.d
│   │   │   ├── constant_time_eq-388abd0a524149b6.d
│   │   │   ├── csv-91aa9e97e26afd7c.d
│   │   │   ├── csv_core-8b1c02ebc08dc725.d
│   │   │   ├── file_splitter-479821b0f810c62e
│   │   │   ├── file_splitter-479821b0f810c62e.d
│   │   │   ├── iana_time_zone-118df478854c024b.d
│   │   │   ├── indicatif-89d4fef482fdca77.d
│   │   │   ├── itoa-34764443509b5a71.d
│   │   │   ├── libaho_corasick-044a15e09ff959a0.rlib
│   │   │   ├── libaho_corasick-044a15e09ff959a0.rmeta
│   │   │   ├── libanyhow-76b96b344e62857d.rlib
│   │   │   ├── libanyhow-76b96b344e62857d.rmeta
│   │   │   ├── libarrayref-691188126eb31e4a.rlib
│   │   │   ├── libarrayref-691188126eb31e4a.rmeta
│   │   │   ├── libarrayvec-927c59d4bdc32889.rlib
│   │   │   ├── libarrayvec-927c59d4bdc32889.rmeta
│   │   │   ├── libautocfg-2f8bb907aa534ee7.rlib
│   │   │   ├── libautocfg-2f8bb907aa534ee7.rmeta
│   │   │   ├── libblake3-de2d0237e188b294.rlib
│   │   │   ├── libblake3-de2d0237e188b294.rmeta
│   │   │   ├── libbytes-f75bdf707354ae82.rlib
│   │   │   ├── libbytes-f75bdf707354ae82.rmeta
│   │   │   ├── libc-3de5de7f1f41b8dd.d
│   │   │   ├── libcc-4fb952857f329aec.rlib
│   │   │   ├── libcc-4fb952857f329aec.rmeta
│   │   │   ├── libcfg_if-b6b28a05ba7745a1.rlib
│   │   │   ├── libcfg_if-b6b28a05ba7745a1.rmeta
│   │   │   ├── libchrono-bc4e1a8914e9ca4a.rlib
│   │   │   ├── libchrono-bc4e1a8914e9ca4a.rmeta
│   │   │   ├── libconsole-c1a48bb48e074718.rlib
│   │   │   ├── libconsole-c1a48bb48e074718.rmeta
│   │   │   ├── libconstant_time_eq-388abd0a524149b6.rlib
│   │   │   ├── libconstant_time_eq-388abd0a524149b6.rmeta
│   │   │   ├── libcsv-91aa9e97e26afd7c.rlib
│   │   │   ├── libcsv-91aa9e97e26afd7c.rmeta
│   │   │   ├── libcsv_core-8b1c02ebc08dc725.rlib
│   │   │   ├── libcsv_core-8b1c02ebc08dc725.rmeta
│   │   │   ├── libiana_time_zone-118df478854c024b.rlib
│   │   │   ├── libiana_time_zone-118df478854c024b.rmeta
│   │   │   ├── libindicatif-89d4fef482fdca77.rlib
│   │   │   ├── libindicatif-89d4fef482fdca77.rmeta
│   │   │   ├── libitoa-34764443509b5a71.rlib
│   │   │   ├── libitoa-34764443509b5a71.rmeta
│   │   │   ├── liblibc-3de5de7f1f41b8dd.rlib
│   │   │   ├── liblibc-3de5de7f1f41b8dd.rmeta
│   │   │   ├── liblibmimalloc_sys-0c85d9c338e7c5bf.rlib
│   │   │   ├── liblibmimalloc_sys-0c85d9c338e7c5bf.rmeta
│   │   │   ├── liblock_api-ba3dac2b4630b2e9.rlib
│   │   │   ├── liblock_api-ba3dac2b4630b2e9.rmeta
│   │   │   ├── libmemchr-336d12e21f6d41dc.rlib
│   │   │   ├── libmemchr-336d12e21f6d41dc.rmeta
│   │   │   ├── libmimalloc-998c9526879898b9.rlib
│   │   │   ├── libmimalloc-998c9526879898b9.rmeta
│   │   │   ├── libmimalloc_sys-0c85d9c338e7c5bf.d
│   │   │   ├── libmio-7f75eb53cd11eb19.rlib
│   │   │   ├── libmio-7f75eb53cd11eb19.rmeta
│   │   │   ├── libnum_traits-1635ae7f01db6bce.rlib
│   │   │   ├── libnum_traits-1635ae7f01db6bce.rmeta
│   │   │   ├── libnumber_prefix-5f5aa614c0734374.rlib
│   │   │   ├── libnumber_prefix-5f5aa614c0734374.rmeta
│   │   │   ├── libonce_cell-2a3b556b2b75713e.rlib
│   │   │   ├── libonce_cell-2a3b556b2b75713e.rmeta
│   │   │   ├── libparking_lot-7f3a9ee2d6a45be3.rlib
│   │   │   ├── libparking_lot-7f3a9ee2d6a45be3.rmeta
│   │   │   ├── libparking_lot_core-faf815a8766f5c65.rlib
│   │   │   ├── libparking_lot_core-faf815a8766f5c65.rmeta
│   │   │   ├── libpin_project_lite-73029686d6eb5212.rlib
│   │   │   ├── libpin_project_lite-73029686d6eb5212.rmeta
│   │   │   ├── libportable_atomic-7cad990fd19d1d46.rlib
│   │   │   ├── libportable_atomic-7cad990fd19d1d46.rmeta
│   │   │   ├── libproc_macro2-bb62df2d3a4ce355.rlib
│   │   │   ├── libproc_macro2-bb62df2d3a4ce355.rmeta
│   │   │   ├── libquote-bc64820655e9da7a.rlib
│   │   │   ├── libquote-bc64820655e9da7a.rmeta
│   │   │   ├── libregex-888b642d8d0524fb.rlib
│   │   │   ├── libregex-888b642d8d0524fb.rmeta
│   │   │   ├── libregex_automata-80e5fbbd3a5c5103.rlib
│   │   │   ├── libregex_automata-80e5fbbd3a5c5103.rmeta
│   │   │   ├── libregex_syntax-433f38fb514dba5a.rlib
│   │   │   ├── libregex_syntax-433f38fb514dba5a.rmeta
│   │   │   ├── libryu-6f72584ba7c56a07.rlib
│   │   │   ├── libryu-6f72584ba7c56a07.rmeta
│   │   │   ├── libscopeguard-486830b48780e581.rlib
│   │   │   ├── libscopeguard-486830b48780e581.rmeta
│   │   │   ├── libserde-d98c8bdc31a2b31e.rlib
│   │   │   ├── libserde-d98c8bdc31a2b31e.rmeta
│   │   │   ├── libserde_derive-2ac8132164381f0c.so
│   │   │   ├── libserde_json-b6393280396058e6.rlib
│   │   │   ├── libserde_json-b6393280396058e6.rmeta
│   │   │   ├── libshlex-b41d57ce4f6400f0.rlib
│   │   │   ├── libshlex-b41d57ce4f6400f0.rmeta
│   │   │   ├── libsignal_hook_registry-953241fdc789ad08.rlib
│   │   │   ├── libsignal_hook_registry-953241fdc789ad08.rmeta
│   │   │   ├── libsmallvec-d5808b731ad0d356.rlib
│   │   │   ├── libsmallvec-d5808b731ad0d356.rmeta
│   │   │   ├── libsocket2-8375c828b5d91f09.rlib
│   │   │   ├── libsocket2-8375c828b5d91f09.rmeta
│   │   │   ├── libsyn-51682224443f7292.rlib
│   │   │   ├── libsyn-51682224443f7292.rmeta
│   │   │   ├── libtokio-79b449c06b2adf31.rmeta
│   │   │   ├── libtokio_macros-3f4f5722daa6242a.so
│   │   │   ├── libtweet_scrolls-a23468dda44eb11d.rlib
│   │   │   ├── libtweet_scrolls-a23468dda44eb11d.rmeta
│   │   │   ├── libunicode_ident-58aa57ac70cc9d34.rlib
│   │   │   ├── libunicode_ident-58aa57ac70cc9d34.rmeta
│   │   │   ├── libunicode_width-483ea5d9fd8ec48c.rlib
│   │   │   ├── libunicode_width-483ea5d9fd8ec48c.rmeta
│   │   │   ├── lock_api-ba3dac2b4630b2e9.d
│   │   │   ├── memchr-336d12e21f6d41dc.d
│   │   │   ├── mimalloc-998c9526879898b9.d
│   │   │   ├── mio-7f75eb53cd11eb19.d
│   │   │   ├── num_traits-1635ae7f01db6bce.d
│   │   │   ├── number_prefix-5f5aa614c0734374.d
│   │   │   ├── once_cell-2a3b556b2b75713e.d
│   │   │   ├── parking_lot-7f3a9ee2d6a45be3.d
│   │   │   ├── parking_lot_core-faf815a8766f5c65.d
│   │   │   ├── pin_project_lite-73029686d6eb5212.d
│   │   │   ├── portable_atomic-7cad990fd19d1d46.d
│   │   │   ├── proc_macro2-bb62df2d3a4ce355.d
│   │   │   ├── quote-bc64820655e9da7a.d
│   │   │   ├── regex-888b642d8d0524fb.d
│   │   │   ├── regex_automata-80e5fbbd3a5c5103.d
│   │   │   ├── regex_syntax-433f38fb514dba5a.d
│   │   │   ├── ryu-6f72584ba7c56a07.d
│   │   │   ├── schema_discovery-855854e700077f50
│   │   │   ├── schema_discovery-855854e700077f50.d
│   │   │   ├── scopeguard-486830b48780e581.d
│   │   │   ├── serde-d98c8bdc31a2b31e.d
│   │   │   ├── serde_derive-2ac8132164381f0c.d
│   │   │   ├── serde_json-b6393280396058e6.d
│   │   │   ├── shlex-b41d57ce4f6400f0.d
│   │   │   ├── signal_hook_registry-953241fdc789ad08.d
│   │   │   ├── smallvec-d5808b731ad0d356.d
│   │   │   ├── socket2-8375c828b5d91f09.d
│   │   │   ├── syn-51682224443f7292.d
│   │   │   ├── test_dm_headers-34521db51e9eb0c0
│   │   │   ├── test_dm_headers-34521db51e9eb0c0.d
│   │   │   ├── test_mvp_simple-9b1d2847d2835506
│   │   │   ├── test_mvp_simple-9b1d2847d2835506.d
│   │   │   ├── test_parsing-4496f934d374e5ea
│   │   │   ├── test_parsing-4496f934d374e5ea.d
│   │   │   ├── tokio-79b449c06b2adf31.d
│   │   │   ├── tokio_macros-3f4f5722daa6242a.d
│   │   │   ├── tweet_coverage_analysis-22ca73479cc0bca2
│   │   │   ├── tweet_coverage_analysis-22ca73479cc0bca2.d
│   │   │   ├── tweet_scrolls-a23468dda44eb11d.d
│   │   │   ├── tweet_scrolls-e29d3bc4c1ff092c
│   │   │   ├── tweet_scrolls-e29d3bc4c1ff092c.d
│   │   │   ├── unicode_ident-58aa57ac70cc9d34.d
│   │   │   └── unicode_width-483ea5d9fd8ec48c.d
│   │   ├── examples/
│   │   ├── incremental/
│   │   ├── .cargo-lock
│   │   ├── file-splitter
│   │   ├── file-splitter.d
│   │   ├── libtweet_scrolls.d
│   │   ├── libtweet_scrolls.rlib
│   │   ├── schema_discovery
│   │   ├── schema_discovery.d
│   │   ├── test_dm_headers
│   │   ├── test_dm_headers.d
│   │   ├── test_mvp_simple
│   │   ├── test_mvp_simple.d
│   │   ├── test_parsing
│   │   ├── test_parsing.d
│   │   ├── tweet-scrolls
│   │   ├── tweet-scrolls.d
│   │   ├── tweet_coverage_analysis
│   │   └── tweet_coverage_analysis.d
│   ├── tmp/
│   ├── .rustc_info.json
│   ├── .rustdoc_fingerprint.json
│   └── CACHEDIR.TAG
├── tests/
│   ├── enhanced_csv_writer_tests.rs
│   ├── file_generation_tests.rs
│   ├── integration_tests.rs
│   ├── main_integration_tests.rs
│   └── timeline_tests.rs
├── .gitignore
├── Cargo.lock
├── Cargo.toml
├── ReadMe.md
├── check_data_safety.sh
└── visualASCII202410.txt

Summary: 801 directories, 4992 files

================================================
FILE CONTENTS
================================================


================================================
FILE: src/lib.rs
================================================
//! Tweet-Scrolls: Twitter Archive JSON to CSV/TXT Processor
//! 
//! This library provides functionality to process Twitter archive data, analyze interactions,
//! and generate meaningful insights from tweets and direct messages.

#![warn(missing_docs)]

pub mod models;
pub mod services;
pub mod utils;
pub mod processing;
pub mod relationship;
pub mod main_integration;
pub mod main_process;
pub mod cli;

// Re-exports for common types
pub use models::interaction::*;
pub use services::timeline::*;


================================================
FILE: src/cli.rs
================================================
//! Command Line Interface module for Tweet-Scrolls
//! Implements simple folder-based processing as per requirements

use anyhow::{Result, bail};
use std::path::PathBuf;
use std::env;

/// CLI configuration parsed from command line arguments
#[derive(Debug)]
pub struct CliConfig {
    /// Path to Twitter archive folder containing tweets.js, direct-messages.js, etc.
    pub archive_folder: PathBuf,
    /// Output directory (defaults to a timestamped folder in the archive directory)
    pub output_dir: Option<PathBuf>,
    /// Run in non-interactive mode (no prompts)
    pub non_interactive: bool,
}

impl CliConfig {
    /// Parse command line arguments
    /// 
    /// # Usage
    /// 
    /// ```bash
    /// tweet-scrolls /path/to/twitter/archive
    /// tweet-scrolls /path/to/twitter/archive /path/to/output
    /// ```
    pub fn from_args() -> Result<Self> {
        let args: Vec<String> = env::args().collect();
        
        if args.len() < 2 {
            print_usage();
            bail!("Missing required argument: archive folder path");
        }
        
        let archive_folder = PathBuf::from(&args[1]);
        
        // Validate the folder exists
        if !archive_folder.exists() {
            bail!("Archive folder does not exist: {}", archive_folder.display());
        }
        
        if !archive_folder.is_dir() {
            bail!("Path is not a directory: {}", archive_folder.display());
        }
        
        // Check for required files
        let tweets_file = archive_folder.join("tweets.js");
        if !tweets_file.exists() {
            bail!("tweets.js not found in archive folder");
        }
        
        let output_dir = if args.len() > 2 {
            Some(PathBuf::from(&args[2]))
        } else {
            None
        };
        
        Ok(CliConfig {
            archive_folder,
            output_dir,
            non_interactive: true, // Always non-interactive when using CLI args
        })
    }
    
    /// Get the path to tweets.js file
    pub fn tweets_file(&self) -> PathBuf {
        self.archive_folder.join("tweets.js")
    }
    
    /// Get the path to direct-messages.js file (if it exists)
    pub fn dms_file(&self) -> Option<PathBuf> {
        let path = self.archive_folder.join("direct-messages.js");
        if path.exists() {
            Some(path)
        } else {
            None
        }
    }
    
    /// Get the path to direct-message-headers.js file (if it exists)
    pub fn dm_headers_file(&self) -> Option<PathBuf> {
        let path = self.archive_folder.join("direct-message-headers.js");
        if path.exists() {
            Some(path)
        } else {
            None
        }
    }
    
    /// Get or create the output directory
    pub fn get_output_dir(&self, screen_name: &str, timestamp: i64) -> PathBuf {
        match &self.output_dir {
            Some(dir) => dir.clone(),
            None => self.archive_folder.join(format!("output_{}_{}", screen_name, timestamp))
        }
    }
}

fn print_usage() {
    eprintln!("Tweet-Scrolls - Twitter Archive Processor");
    eprintln!();
    eprintln!("Usage:");
    eprintln!("  tweet-scrolls <archive-folder> [output-folder]");
    eprintln!();
    eprintln!("Arguments:");
    eprintln!("  <archive-folder>  Path to Twitter archive folder containing tweets.js");
    eprintln!("  [output-folder]   Optional output directory (defaults to archive folder)");
    eprintln!();
    eprintln!("Example:");
    eprintln!("  tweet-scrolls /home/user/twitter-archive");
    eprintln!("  tweet-scrolls /home/user/twitter-archive /home/user/output");
}

/// Process Twitter archive with CLI configuration
pub async fn process_with_cli(config: CliConfig) -> Result<()> {
    use crate::main_process::main_process_twitter_archive;
    use chrono::Utc;
    
    println!("🚀 Processing Twitter archive from: {}", config.archive_folder.display());
    
    let tweets_file = config.tweets_file();
    let dms_file = config.dms_file();
    let dm_headers_file = config.dm_headers_file();
    
    // Use a generic screen name since we're in non-interactive mode
    let screen_name = "user";
    let timestamp = Utc::now().timestamp();
    let output_dir = config.get_output_dir(screen_name, timestamp);
    
    println!("📁 Output directory: {}", output_dir.display());
    
    // Process the archive
    main_process_twitter_archive(
        tweets_file.to_str().unwrap(),
        dms_file.as_ref().map(|p| p.to_str().unwrap()),
        dm_headers_file.as_ref().map(|p| p.to_str().unwrap()),
        output_dir.to_str().unwrap(),
        screen_name,
        timestamp,
    ).await?;
    
    println!("✅ Processing complete!");
    
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;
    use tokio::fs;
    
    #[test]
    fn test_cli_config_parsing() {
        // Test with valid arguments
        env::set_var("TEST_ARGS", "tweet-scrolls /tmp/test");
        
        // We can't easily test env::args() directly, so we'll test the validation logic
        let config = CliConfig {
            archive_folder: PathBuf::from("/tmp"),
            output_dir: None,
            non_interactive: true,
        };
        
        assert_eq!(config.archive_folder, PathBuf::from("/tmp"));
        assert!(config.non_interactive);
    }
    
    #[tokio::test]
    async fn test_file_detection() -> Result<()> {
        let temp_dir = tempdir()?;
        let archive_path = temp_dir.path();
        
        // Create test files
        fs::write(archive_path.join("tweets.js"), "test").await?;
        fs::write(archive_path.join("direct-messages.js"), "test").await?;
        
        let config = CliConfig {
            archive_folder: archive_path.to_path_buf(),
            output_dir: None,
            non_interactive: true,
        };
        
        assert!(config.tweets_file().exists());
        assert!(config.dms_file().is_some());
        assert!(config.dm_headers_file().is_none());
        
        Ok(())
    }
}

================================================
FILE: src/utils/schema_discovery.rs
================================================
//! JSON Schema Discovery Tool
//! 
//! Analyzes large JSON files to discover all field variations and types,
//! enabling creation of flexible parsing structures.

use anyhow::{Context, Result};
use serde_json::Value;
use std::collections::{HashMap, HashSet};

#[derive(Debug, Clone)]
/// Information about a field discovered in the JSON schema
pub struct FieldInfo {
    /// Set of unique types seen for this field
    pub types_seen: HashSet<String>,
    /// Whether this field is optional (not present in all records)
    pub is_optional: bool,
    /// Sample values seen for this field
    pub sample_values: Vec<String>,
    /// Number of times this field has been seen
    pub occurrence_count: usize,
}

/// Schema discovery utility for JSON data
pub struct SchemaDiscovery {
    /// Map of field names to their discovered information
    pub fields: HashMap<String, FieldInfo>,
    /// Total number of items analyzed
    pub total_items_analyzed: usize,
}

impl Default for SchemaDiscovery {
    fn default() -> Self {
        Self::new()
    }
}

impl SchemaDiscovery {
    /// Creates a new schema discovery instance
    pub fn new() -> Self {
        Self {
            fields: HashMap::new(),
            total_items_analyzed: 0,
        }
    }

    /// Analyzes a JSON sample to discover field types and patterns
    /// 
    /// # Arguments
    /// * `json_content` - The raw JSON content to analyze
    /// * `sample_size` - Maximum number of items to analyze
    pub fn analyze_json_sample(&mut self, json_content: &str, sample_size: usize) -> Result<()> {
        println!("🔍 Starting schema discovery analysis...");
        
        // Remove JavaScript prefix if present
        let clean_json = self.clean_javascript_prefix(json_content)?;
        
        // Parse as generic JSON Value
        let data: Vec<Value> = serde_json::from_str(&clean_json)
            .context("Failed to parse JSON for schema discovery")?;
        
        println!("📊 Analyzing {} items (sample size: {})", data.len().min(sample_size), sample_size);
        
        // Analyze sample
        for (i, item) in data.iter().enumerate() {
            if i >= sample_size { break; }
            self.analyze_value_recursive(item, "");
            self.total_items_analyzed += 1;
            
            if i % 100 == 0 && i > 0 {
                println!("  Processed {} items...", i);
            }
        }
        
        // Mark fields as optional if they don't appear in all items
        self.calculate_optional_fields();
        
        println!("✅ Schema discovery complete! Analyzed {} items, found {} unique fields", 
            self.total_items_analyzed, self.fields.len());
        
        Ok(())
    }

    fn clean_javascript_prefix(&self, content: &str) -> Result<String> {
        if let Some(start) = content.find('[') {
            if let Some(end) = content.rfind(']') {
                return Ok(content[start..=end].to_string());
            }
        }
        anyhow::bail!("Invalid JSON format: missing brackets");
    }

    fn analyze_value_recursive(&mut self, value: &Value, path: &str) {
        match value {
            Value::Object(map) => {
                for (key, val) in map {
                    let field_path = if path.is_empty() { 
                        key.clone() 
                    } else { 
                        format!("{}.{}", path, key) 
                    };
                    
                    let type_name = self.get_type_name(val);
                    let sample_value = self.get_sample_value(val);
                    
                    let field_info = self.fields.entry(field_path.clone()).or_insert_with(|| FieldInfo {
                        types_seen: HashSet::new(),
                        is_optional: false,
                        sample_values: Vec::new(),
                        occurrence_count: 0,
                    });
                    
                    field_info.types_seen.insert(type_name);
                    field_info.occurrence_count += 1;
                    
                    if field_info.sample_values.len() < 3 {
                        field_info.sample_values.push(sample_value);
                    }
                    
                    // Recurse into nested structures
                    self.analyze_value_recursive(val, &field_path);
                }
            }
            Value::Array(arr) => {
                // Analyze first few array items to understand structure
                for (i, item) in arr.iter().enumerate().take(5) {
                    let array_path = format!("{}[{}]", path, i);
                    self.analyze_value_recursive(item, &array_path);
                }
            }
            _ => {}
        }
    }

    fn get_type_name(&self, value: &Value) -> String {
        match value {
            Value::String(_) => "String".to_string(),
            Value::Number(n) => {
                if n.is_i64() { "Integer" } else { "Float" }
            }.to_string(),
            Value::Bool(_) => "Boolean".to_string(),
            Value::Array(_) => "Array".to_string(),
            Value::Object(_) => "Object".to_string(),
            Value::Null => "Null".to_string(),
        }
    }

    fn get_sample_value(&self, value: &Value) -> String {
        match value {
            Value::String(s) => s.chars().take(50).collect(),
            Value::Number(n) => n.to_string(),
            Value::Bool(b) => b.to_string(),
            Value::Array(arr) => format!("[{} items]", arr.len()),
            Value::Object(obj) => format!("{{{} fields}}", obj.len()),
            Value::Null => "null".to_string(),
        }
    }

    fn calculate_optional_fields(&mut self) {
        let total = self.total_items_analyzed as f64;
        for field_info in self.fields.values_mut() {
            // If field appears in less than 95% of items, mark as optional
            field_info.is_optional = (field_info.occurrence_count as f64 / total) < 0.95;
        }
    }

    /// Generates a human-readable report of the discovered schema
    pub fn generate_report(&self) -> String {
        let mut report = String::new();
        report.push_str("# JSON Schema Discovery Report\n\n");
        report.push_str(&format!("**Total items analyzed:** {}\n\n", self.total_items_analyzed));
        
        let mut sorted_fields: Vec<_> = self.fields.iter().collect();
        sorted_fields.sort_by_key(|(path, _)| path.as_str());
        
        // Summary statistics
        let optional_count = self.fields.values().filter(|f| f.is_optional).count();
        let required_count = self.fields.len() - optional_count;
        let mixed_type_count = self.fields.values().filter(|f| f.types_seen.len() > 1).count();
        
        report.push_str("**Summary:**\n");
        report.push_str(&format!("- Total fields: {}\n", self.fields.len()));
        report.push_str(&format!("- Required fields: {}\n", required_count));
        report.push_str(&format!("- Optional fields: {}\n", optional_count));
        report.push_str(&format!("- Mixed-type fields: {}\n\n", mixed_type_count));
        
        // Detailed field analysis
        report.push_str("## Field Details\n\n");
        for (path, info) in sorted_fields {
            report.push_str(&format!("### `{}`\n", path));
            report.push_str(&format!("- **Types:** {:?}\n", info.types_seen));
            report.push_str(&format!("- **Optional:** {} ({}/{} items)\n", 
                info.is_optional, info.occurrence_count, self.total_items_analyzed));
            report.push_str(&format!("- **Samples:** {:?}\n\n", info.sample_values));
        }
        
        report
    }

    /// Returns fields that have multiple types or other problematic patterns
    pub fn get_problematic_fields(&self) -> Vec<(String, &FieldInfo)> {
        self.fields.iter()
            .filter(|(_, info)| info.types_seen.len() > 1 || info.types_seen.contains("Object"))
            .map(|(path, info)| (path.clone(), info))
            .collect()
    }
}

================================================
FILE: src/utils/mod.rs
================================================
//! Utility functions and helpers

/// Enhanced CSV writer for tweet data
pub mod enhanced_csv_writer;
/// File splitter utility for large files
pub mod file_splitter;
/// Schema discovery utilities for JSON data
pub mod schema_discovery;
/// Tweet classification utilities
pub mod tweet_classifier;

use anyhow::{Context, Result};
use chrono::{DateTime, Utc};
use std::fs::File;
use std::io::{BufReader, Read};
use std::path::Path;

/// Reads a file into a string with proper error context
pub fn read_file_to_string<P: AsRef<Path>>(path: P) -> Result<String> {
    let file = File::open(&path).with_context(|| format!("Failed to open file: {:?}", path.as_ref()))?;
    let mut reader = BufReader::new(file);
    let mut content = String::new();
    reader
        .read_to_string(&mut content)
        .with_context(|| format!("Failed to read file: {:?}", path.as_ref()))?;
    Ok(content)
}

/// Formats a duration in a human-readable way
pub fn format_duration(duration: chrono::Duration) -> String {
    let secs = duration.num_seconds();
    if secs < 60 {
        format!("{}s", secs)
    } else if secs < 3600 {
        format!("{}m {}s", secs / 60, secs % 60)
    } else if secs < 86400 {
        format!("{}h {}m", secs / 3600, (secs % 3600) / 60)
    } else {
        format!("{}d {}h", secs / 86400, (secs % 86400) / 3600)
    }
}

/// Formats a timestamp in a human-readable relative format
pub fn format_timestamp(timestamp: &DateTime<Utc>) -> String {
    let now = Utc::now();
    let duration = now.signed_duration_since(*timestamp);
    
    if duration.num_seconds() < 60 {
        "just now".to_string()
    } else if duration.num_minutes() < 60 {
        format!("{}m ago", duration.num_minutes())
    } else if duration.num_hours() < 24 {
        format!("{}h ago", duration.num_hours())
    } else if duration.num_days() < 30 {
        format!("{}d ago", duration.num_days())
    } else {
        timestamp.format("%b %d, %Y").to_string()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::{Duration, Utc};
    use std::io::Write;
    use tempfile::NamedTempFile;

    #[test]
    fn test_read_file_to_string() -> Result<()> {
        let mut temp_file = NamedTempFile::new()?;
        write!(temp_file, "test content")?;
        let content = read_file_to_string(temp_file.path())?;
        assert_eq!(content, "test content");
        Ok(())
    }

    #[test]
    fn test_format_duration() {
        assert_eq!(format_duration(Duration::seconds(30)), "30s");
        assert_eq!(format_duration(Duration::minutes(5) + Duration::seconds(30)), "5m 30s");
        assert_eq!(format_duration(Duration::hours(2) + Duration::minutes(30)), "2h 30m");
        assert_eq!(format_duration(Duration::days(3) + Duration::hours(5)), "3d 5h");
    }

    #[test]
    fn test_format_timestamp() {
        let now = Utc::now();
        let one_min_ago = now - Duration::minutes(1);
        let one_hour_ago = now - Duration::hours(1);
        let one_day_ago = now - Duration::days(1);
        let one_month_ago = now - Duration::days(35);
        
        assert_eq!(format_timestamp(&now), "just now");
        assert!(format_timestamp(&one_min_ago).ends_with("m ago"));
        assert!(format_timestamp(&one_hour_ago).ends_with("h ago"));
        assert!(format_timestamp(&one_day_ago).ends_with("d ago"));
        assert!(format_timestamp(&one_month_ago).contains(", 20"));
    }
}


================================================
FILE: src/utils/tweet_classifier.rs
================================================
use crate::models::tweet_classification::TweetType;
use crate::processing::data_structures::Tweet;

/// Classify a tweet based on its reply status
pub fn classify_tweet_type(tweet: &Tweet, screen_name: &str) -> TweetType {
    if tweet.in_reply_to_status_id_str.is_none() {
        TweetType::Original
    } else if tweet.in_reply_to_screen_name.as_deref() == Some(screen_name) {
        TweetType::ReplyToUser
    } else {
        TweetType::ReplyToOthers
    }
}

/// Generate Twitter URL for a tweet
pub fn generate_twitter_url(tweet: &Tweet, screen_name: &str) -> String {
    format!("https://twitter.com/{}/status/{}", screen_name, tweet.id_str)
}

/// Create reply context string
pub fn create_reply_context(tweet: &Tweet) -> Option<String> {
    if let Some(reply_to_id) = &tweet.in_reply_to_status_id_str {
        if let Some(reply_to_user) = &tweet.in_reply_to_screen_name {
            Some(format!("Reply to @{} ({})", reply_to_user, reply_to_id))
        } else {
            Some(format!("Reply to tweet {}", reply_to_id))
        }
    } else {
        None
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::processing::data_structures::TweetEntities;

    fn create_test_tweet(id: &str, reply_to_id: Option<&str>, reply_to_user: Option<&str>) -> Tweet {
        Tweet {
            id_str: id.to_string(),
            id: id.to_string(),
            full_text: "Test tweet".to_string(),
            created_at: "Mon Jan 01 12:00:00 +0000 2023".to_string(),
            favorite_count: "0".to_string(),
            retweet_count: "0".to_string(),
            retweeted: false,
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "Twitter Web App".to_string(),
            display_text_range: vec!["0".to_string(), "10".to_string()],
            in_reply_to_status_id: reply_to_id.map(|s| s.to_string()),
            in_reply_to_status_id_str: reply_to_id.map(|s| s.to_string()),
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: reply_to_user.map(|s| s.to_string()),
            edit_info: None,
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: vec![],
                urls: vec![],
            },
            possibly_sensitive: None,
        }
    }

    #[test]
    fn test_classify_original_tweet() {
        let tweet = create_test_tweet("1", None, None);
        assert_eq!(classify_tweet_type(&tweet, "testuser"), TweetType::Original);
    }

    #[test]
    fn test_classify_reply_to_user() {
        let tweet = create_test_tweet("2", Some("1"), Some("testuser"));
        assert_eq!(classify_tweet_type(&tweet, "testuser"), TweetType::ReplyToUser);
    }

    #[test]
    fn test_classify_reply_to_others() {
        let tweet = create_test_tweet("3", Some("1"), Some("otheruser"));
        assert_eq!(classify_tweet_type(&tweet, "testuser"), TweetType::ReplyToOthers);
    }

    #[test]
    fn test_generate_twitter_url() {
        let tweet = create_test_tweet("123456789", None, None);
        assert_eq!(
            generate_twitter_url(&tweet, "testuser"), 
            "https://twitter.com/testuser/status/123456789"
        );
    }

    #[test]
    fn test_create_reply_context() {
        let tweet = create_test_tweet("2", Some("1"), Some("otheruser"));
        assert_eq!(
            create_reply_context(&tweet),
            Some("Reply to @otheruser (1)".to_string())
        );
    }

    #[test]
    fn test_create_reply_context_none() {
        let tweet = create_test_tweet("1", None, None);
        assert_eq!(create_reply_context(&tweet), None);
    }
}

================================================
FILE: src/utils/file_splitter.rs
================================================
//! File splitter utility for splitting large files into manageable chunks
//! 
//! This module provides functionality to split large files (like Twitter archives)
//! into smaller chunks for easier processing and distribution.

use anyhow::{Context, Result, bail};
use std::fs::File;
use std::io::{Read, Write, BufReader, BufWriter};
use std::path::{Path, PathBuf};
use std::fmt;

/// Configuration for file splitting operations
#[derive(Debug, Clone)]
pub struct SplitConfig {
    /// Path to the input file to split
    pub input_path: PathBuf,
    /// Directory where chunks will be written (defaults to input file's directory)
    pub output_dir: Option<PathBuf>,
    /// Size of each chunk in bytes
    pub chunk_size: u64,
    /// Prefix for chunk filenames (defaults to input filename)
    pub prefix: Option<String>,
    /// Number of digits for chunk numbering (default: 3)
    pub digits: u8,
}

impl Default for SplitConfig {
    fn default() -> Self {
        Self {
            input_path: PathBuf::new(),
            output_dir: None,
            chunk_size: 1024 * 1024, // 1MB default
            prefix: None,
            digits: 3,
        }
    }
}

/// Information about a created file chunk
#[derive(Debug, Clone)]
pub struct ChunkInfo {
    /// Path to the chunk file
    pub path: PathBuf,
    /// Size of the chunk in bytes
    pub size: u64,
    /// Chunk number (1-based)
    pub number: usize,
}

impl fmt::Display for ChunkInfo {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "Chunk {}: {} ({} bytes)", 
               self.number, 
               self.path.display(), 
               self.size)
    }
}

/// Result of a file splitting operation
#[derive(Debug)]
pub struct SplitResult {
    /// Original input file path
    pub input_path: PathBuf,
    /// Output directory used
    pub output_dir: PathBuf,
    /// Chunk size used
    pub chunk_size: u64,
    /// Information about created chunks
    pub chunks: Vec<ChunkInfo>,
    /// Total size of original file
    pub total_size: u64,
}

impl fmt::Display for SplitResult {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        writeln!(f, "📄 Split '{}' into {} chunks", 
                 self.input_path.display(), 
                 self.chunks.len())?;
        writeln!(f, "📁 Output directory: {}", self.output_dir.display())?;
        writeln!(f, "📊 Total size: {} bytes", self.total_size)?;
        writeln!(f, "🔢 Chunk size: {} bytes", self.chunk_size)?;
        writeln!(f, "\n📋 Created chunks:")?;
        
        for chunk in &self.chunks {
            writeln!(f, "  {}", chunk)?;
        }
        
        Ok(())
    }
}

/// Split a file into chunks according to the provided configuration
pub fn split_file(config: &SplitConfig) -> Result<SplitResult> {
    validate_config(config)?;
    
    let input_path = config.input_path.canonicalize()
        .context("Failed to resolve input file path")?;
    
    let output_dir = determine_output_dir(config, &input_path)?;
    let (base_name, extension) = determine_filename_parts(config, &input_path);
    
    let file_size = input_path.metadata()
        .context("Failed to read input file metadata")?
        .len();
    
    if file_size == 0 {
        bail!("Input file is empty");
    }
    
    let chunks = create_chunks(&input_path, &output_dir, &base_name, &extension, config)?;
    
    Ok(SplitResult {
        input_path,
        output_dir,
        chunk_size: config.chunk_size,
        chunks,
        total_size: file_size,
    })
}

/// Validate the split configuration
fn validate_config(config: &SplitConfig) -> Result<()> {
    if config.chunk_size == 0 {
        bail!("Chunk size must be greater than 0");
    }
    
    if config.digits == 0 || config.digits > 10 {
        bail!("Digits must be between 1 and 10");
    }
    
    if !config.input_path.exists() {
        bail!("Input file does not exist: {}", config.input_path.display());
    }
    
    if !config.input_path.is_file() {
        bail!("Input path is not a file: {}", config.input_path.display());
    }
    
    Ok(())
}

/// Determine the output directory for chunks
fn determine_output_dir(config: &SplitConfig, input_path: &Path) -> Result<PathBuf> {
    let output_dir = match &config.output_dir {
        Some(dir) => {
            if !dir.exists() {
                std::fs::create_dir_all(dir)
                    .with_context(|| format!("Failed to create output directory: {}", dir.display()))?;
            }
            dir.clone()
        }
        None => {
            input_path.parent()
                .unwrap_or_else(|| Path::new("."))
                .to_path_buf()
        }
    };
    
    output_dir.canonicalize()
        .context("Failed to resolve output directory path")
}

/// Determine the base name and extension for chunk files
fn determine_filename_parts(config: &SplitConfig, input_path: &Path) -> (String, String) {
    match &config.prefix {
        Some(prefix) => (prefix.clone(), String::new()),
        None => {
            let file_name = input_path.file_name()
                .and_then(|name| name.to_str())
                .unwrap_or("chunk");
            
            // Split on first dot to preserve complex extensions like .tar.gz
            if let Some(dot_pos) = file_name.find('.') {
                let base = file_name[..dot_pos].to_string();
                let ext = file_name[dot_pos..].to_string();
                (base, ext)
            } else {
                (file_name.to_string(), String::new())
            }
        }
    }
}

/// Create the actual chunk files
fn create_chunks(
    input_path: &Path,
    output_dir: &Path,
    base_name: &str,
    extension: &str,
    config: &SplitConfig,
) -> Result<Vec<ChunkInfo>> {
    let mut input_file = BufReader::new(
        File::open(input_path)
            .with_context(|| format!("Failed to open input file: {}", input_path.display()))?
    );
    
    let mut chunks = Vec::new();
    let mut buffer = vec![0u8; config.chunk_size as usize];
    let mut chunk_number = 1;
    
    loop {
        let bytes_read = input_file.read(&mut buffer)
            .context("Failed to read from input file")?;
        
        if bytes_read == 0 {
            break; // End of file
        }
        
        let chunk_path = output_dir.join(format!(
            "{}-{:0width$}{}",
            base_name,
            chunk_number,
            extension,
            width = config.digits as usize
        ));
        
        let mut output_file = BufWriter::new(
            File::create(&chunk_path)
                .with_context(|| format!("Failed to create chunk file: {}", chunk_path.display()))?
        );
        
        output_file.write_all(&buffer[..bytes_read])
            .context("Failed to write chunk data")?;
        
        output_file.flush()
            .context("Failed to flush chunk file")?;
        
        chunks.push(ChunkInfo {
            path: chunk_path,
            size: bytes_read as u64,
            number: chunk_number,
        });
        
        chunk_number += 1;
    }
    
    Ok(chunks)
}

/// Parse a size string like "1M", "500K", "2G" into bytes
pub fn parse_size_string(size_str: &str) -> Result<u64> {
    let size_str = size_str.trim().to_uppercase();
    
    if size_str.is_empty() {
        bail!("Empty size string");
    }
    
    // Find where the number ends and unit begins
    let split_pos = size_str.chars()
        .position(|c| !c.is_ascii_digit())
        .unwrap_or(size_str.len());
    
    let (num_str, unit) = size_str.split_at(split_pos);
    
    let num: u64 = num_str.parse()
        .with_context(|| format!("Invalid number in size string: {}", num_str))?;
    
    let multiplier = match unit {
        "" | "B" => 1,
        "K" | "KB" => 1024,
        "M" | "MB" => 1024 * 1024,
        "G" | "GB" => 1024 * 1024 * 1024,
        "T" | "TB" => 1024_u64.pow(4),
        _ => bail!("Invalid size unit: {}. Use B, K, M, G, or T", unit),
    };
    
    Ok(num * multiplier)
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;
    use std::fs;
    
    fn create_test_file(dir: &Path, name: &str, content: &[u8]) -> Result<PathBuf> {
        let path = dir.join(name);
        fs::write(&path, content)?;
        Ok(path)
    }
    
    #[test]
    fn test_split_config_default() {
        let config = SplitConfig::default();
        assert_eq!(config.chunk_size, 1024 * 1024);
        assert_eq!(config.digits, 3);
        assert!(config.output_dir.is_none());
        assert!(config.prefix.is_none());
    }
    
    #[test]
    fn test_parse_size_string() -> Result<()> {
        assert_eq!(parse_size_string("1024")?, 1024);
        assert_eq!(parse_size_string("1K")?, 1024);
        assert_eq!(parse_size_string("1M")?, 1024 * 1024);
        assert_eq!(parse_size_string("1G")?, 1024 * 1024 * 1024);
        assert_eq!(parse_size_string("2M")?, 2 * 1024 * 1024);
        
        // Test with lowercase
        assert_eq!(parse_size_string("1k")?, 1024);
        assert_eq!(parse_size_string("1m")?, 1024 * 1024);
        
        // Test with whitespace
        assert_eq!(parse_size_string(" 1M ")?, 1024 * 1024);
        
        Ok(())
    }
    
    #[test]
    fn test_parse_size_string_invalid() {
        assert!(parse_size_string("").is_err());
        assert!(parse_size_string("abc").is_err());
        assert!(parse_size_string("1X").is_err());
    }
    
    #[test]
    fn test_split_small_file() -> Result<()> {
        let temp_dir = tempdir()?;
        let input_path = create_test_file(temp_dir.path(), "test.txt", b"Hello, World!")?;
        
        let config = SplitConfig {
            input_path,
            chunk_size: 5,
            ..Default::default()
        };
        
        let result = split_file(&config)?;
        
        assert_eq!(result.chunks.len(), 3); // "Hello", ", Wor", "ld!"
        assert_eq!(result.chunks[0].size, 5);
        assert_eq!(result.chunks[1].size, 5);
        assert_eq!(result.chunks[2].size, 3);
        assert_eq!(result.total_size, 13);
        
        Ok(())
    }
    
    #[test]
    fn test_split_with_extension_preservation() -> Result<()> {
        let temp_dir = tempdir()?;
        let input_path = create_test_file(temp_dir.path(), "document.txt", b"test content")?;
        
        let config = SplitConfig {
            input_path,
            chunk_size: 4,
            ..Default::default()
        };
        
        let result = split_file(&config)?;
        
        // Should create document-001.txt, document-002.txt, document-003.txt
        assert_eq!(result.chunks.len(), 3);
        assert!(result.chunks[0].path.file_name().unwrap().to_str().unwrap().ends_with(".txt"));
        assert!(result.chunks[0].path.file_name().unwrap().to_str().unwrap().starts_with("document-001"));
        
        Ok(())
    }
    
    #[test]
    fn test_split_with_custom_prefix() -> Result<()> {
        let temp_dir = tempdir()?;
        let input_path = create_test_file(temp_dir.path(), "test.txt", b"test content")?;
        
        let config = SplitConfig {
            input_path,
            chunk_size: 4,
            prefix: Some("custom".to_string()),
            ..Default::default()
        };
        
        let result = split_file(&config)?;
        
        assert!(result.chunks[0].path.file_name().unwrap().to_str().unwrap().starts_with("custom-001"));
        
        Ok(())
    }
    
    #[test]
    fn test_split_with_custom_output_dir() -> Result<()> {
        let temp_dir = tempdir()?;
        let input_path = create_test_file(temp_dir.path(), "test.txt", b"test content")?;
        let output_dir = temp_dir.path().join("chunks");
        
        let config = SplitConfig {
            input_path,
            chunk_size: 4,
            output_dir: Some(output_dir.clone()),
            ..Default::default()
        };
        
        let result = split_file(&config)?;
        
        assert_eq!(result.output_dir, output_dir.canonicalize()?);
        assert!(result.chunks[0].path.starts_with(&output_dir));
        
        Ok(())
    }
    
    #[test]
    fn test_validate_config_invalid_chunk_size() {
        let config = SplitConfig {
            chunk_size: 0,
            ..Default::default()
        };
        
        assert!(validate_config(&config).is_err());
    }
    
    #[test]
    fn test_validate_config_nonexistent_file() {
        let config = SplitConfig {
            input_path: PathBuf::from("nonexistent.txt"),
            ..Default::default()
        };
        
        assert!(validate_config(&config).is_err());
    }
    
    #[test]
    fn test_empty_file_handling() -> Result<()> {
        let temp_dir = tempdir()?;
        let input_path = create_test_file(temp_dir.path(), "empty.txt", b"")?;
        
        let config = SplitConfig {
            input_path,
            chunk_size: 1024,
            ..Default::default()
        };
        
        let result = split_file(&config);
        assert!(result.is_err());
        
        Ok(())
    }
    
    #[test]
    fn test_complex_extension_preservation() -> Result<()> {
        let temp_dir = tempdir()?;
        let input_path = create_test_file(temp_dir.path(), "archive.tar.gz", b"compressed data")?;
        
        let config = SplitConfig {
            input_path,
            chunk_size: 5,
            ..Default::default()
        };
        
        let result = split_file(&config)?;
        
        // Should preserve the full .tar.gz extension
        assert!(result.chunks[0].path.file_name().unwrap().to_str().unwrap().ends_with(".tar.gz"));
        assert!(result.chunks[0].path.file_name().unwrap().to_str().unwrap().starts_with("archive-001"));
        
        Ok(())
    }
}

================================================
FILE: src/relationship/timeline_text.rs
================================================
//! Timeline text generation for interaction analysis
//! 
//! Generates chronological interaction logs optimized for LLM analysis.

use std::collections::HashMap;
use chrono::Datelike;
use crate::models::interaction::InteractionEvent;

/// Generates interaction timeline text for LLM analysis
pub fn generate_timeline_text(timeline: &[InteractionEvent]) -> String {
    let mut output = String::new();
    
    add_timeline_header(&mut output, timeline);
    add_monthly_summary(&mut output, timeline);
    add_recent_activity(&mut output, timeline);
    
    output
}

/// Adds timeline header with basic statistics
fn add_timeline_header(output: &mut String, timeline: &[InteractionEvent]) {
    output.push_str("CHRONOLOGICAL INTERACTION LOG\n");
    output.push_str("============================\n");
    output.push_str(&format!("Total Events: {}\n", timeline.len()));
    
    if let (Some(first), Some(last)) = (timeline.first(), timeline.last()) {
        output.push_str(&format!("Time Range: {} to {}\n", 
                               first.timestamp.format("%Y-%m-%d"), 
                               last.timestamp.format("%Y-%m-%d")));
    }
    
    output.push('\n');
}

/// Adds monthly activity summary
fn add_monthly_summary(output: &mut String, timeline: &[InteractionEvent]) {
    let monthly_summary = build_monthly_summary(timeline);
    
    output.push_str("MONTHLY ACTIVITY SUMMARY\n");
    output.push_str("=======================\n");
    
    let mut months: Vec<_> = monthly_summary.keys().collect();
    months.sort();
    
    for month in months {
        if let Some((total, types)) = monthly_summary.get(month) {
            output.push_str(&format!("{}: {} interactions\n", month, total));
            for (interaction_type, count) in types {
                output.push_str(&format!("  - {:?}: {}\n", interaction_type, count));
            }
        }
    }
    
    output.push('\n');
}

/// Adds recent activity section
fn add_recent_activity(output: &mut String, timeline: &[InteractionEvent]) {
    output.push_str("RECENT ACTIVITY (Last 20 Events)\n");
    output.push_str("================================\n");
    
    for event in timeline.iter().take(20) {
        let content_preview = event.content.chars().take(50).collect::<String>();
        output.push_str(&format!("{} | {:?} | User: {} | {}\n",
                               event.timestamp.format("%Y-%m-%d %H:%M"),
                               event.interaction_type,
                               &event.user_hash[..8],
                               content_preview));
    }
}

/// Builds monthly summary from timeline events
fn build_monthly_summary(timeline: &[InteractionEvent]) -> HashMap<String, (u32, HashMap<crate::models::interaction::InteractionType, u32>)> {
    let mut monthly_summary = HashMap::new();
    
    for event in timeline {
        let month_key = format!("{}-{:02}", event.timestamp.year(), event.timestamp.month());
        let entry = monthly_summary.entry(month_key).or_insert((0, HashMap::new()));
        entry.0 += 1;
        *entry.1.entry(event.interaction_type).or_insert(0) += 1;
    }
    
    monthly_summary
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::interaction::InteractionType;
    use chrono::TimeZone;

    fn create_test_timeline() -> Vec<InteractionEvent> {
        vec![
            InteractionEvent::new(
                "event1",
                chrono::Utc.with_ymd_and_hms(2023, 6, 15, 14, 30, 0).unwrap(),
                InteractionType::DmSent,
                "test_user_hash_123456",
                "Test message content"
            ),
            InteractionEvent::new(
                "event2", 
                chrono::Utc.with_ymd_and_hms(2023, 6, 16, 9, 15, 0).unwrap(),
                InteractionType::DmReceived,
                "test_user_hash_123456",
                "Reply message content"
            ),
        ]
    }

    #[test]
    fn test_generate_timeline_text() {
        let timeline = create_test_timeline();
        let timeline_text = generate_timeline_text(&timeline);
        
        assert!(timeline_text.contains("CHRONOLOGICAL INTERACTION LOG"));
        assert!(timeline_text.contains("MONTHLY ACTIVITY SUMMARY"));
        assert!(timeline_text.contains("RECENT ACTIVITY"));
        assert!(timeline_text.contains("Total Events: 2"));
        assert!(timeline_text.contains("2023-06"));
    }

    #[test]
    fn test_build_monthly_summary() {
        let timeline = create_test_timeline();
        let summary = build_monthly_summary(&timeline);
        
        assert!(summary.contains_key("2023-06"));
        if let Some((total, _)) = summary.get("2023-06") {
            assert_eq!(*total, 2);
        }
    }
}

================================================
FILE: src/relationship/file_writer.rs
================================================
//! File writing service for relationship intelligence files
//! 
//! Handles directory creation and file I/O operations.

use anyhow::{Context, Result};
use std::collections::HashMap;
use tokio::fs as async_fs;

use crate::models::profile::UserProfile;
use crate::models::interaction::InteractionEvent;
use super::text_generators::generate_user_profile_text;
use super::timeline_text::generate_timeline_text;
use super::prompts_generator::generate_llm_analysis_prompts;

/// File writing service for relationship intelligence
pub struct FileWriter {
    output_dir: String,
    screen_name: String,
    timestamp: i64,
}

impl FileWriter {
    /// Creates a new file writer
    pub fn new(output_dir: impl Into<String>, screen_name: impl Into<String>, timestamp: i64) -> Self {
        Self {
            output_dir: output_dir.into(),
            screen_name: screen_name.into(),
            timestamp,
        }
    }

    /// Creates the relationship profiles directory structure
    pub async fn create_directory_structure(&self) -> Result<String> {
        let profiles_dir = format!("{}/relationship_profiles_{}_{}", 
                                 self.output_dir, self.screen_name, self.timestamp);
        
        async_fs::create_dir_all(&profiles_dir).await
            .with_context(|| format!("Failed to create directory: {}", profiles_dir))?;
        
        Ok(profiles_dir)
    }

    /// Writes all relationship intelligence files
    pub async fn write_all_files(&self, profiles: &HashMap<String, UserProfile>, timeline: &[InteractionEvent]) -> Result<()> {
        let profiles_dir = self.create_directory_structure().await?;
        
        self.write_user_profiles(&profiles_dir, profiles, timeline).await?;
        self.write_timeline_file(&profiles_dir, timeline).await?;
        self.write_prompts_file(&profiles_dir, profiles).await?;
        self.write_summary_file(&profiles_dir, profiles, timeline).await?;
        
        println!("✅ LLM-ready relationship intelligence files generated in: {}", profiles_dir);
        Ok(())
    }

    /// Writes individual user profile files
    async fn write_user_profiles(&self, profiles_dir: &str, profiles: &HashMap<String, UserProfile>, timeline: &[InteractionEvent]) -> Result<()> {
        for (user_hash, profile) in profiles {
            let user_timeline: Vec<_> = timeline.iter()
                .filter(|event| event.user_hash == *user_hash)
                .cloned()
                .collect();
            
            let profile_text = generate_user_profile_text(profile, &user_timeline);
            let profile_file = format!("{}/user_{}_profile.txt", profiles_dir, &user_hash[..16]);
            
            async_fs::write(&profile_file, profile_text).await
                .with_context(|| format!("Failed to write profile file: {}", profile_file))?;
        }
        Ok(())
    } 
   /// Writes interaction timeline file
    async fn write_timeline_file(&self, profiles_dir: &str, timeline: &[InteractionEvent]) -> Result<()> {
        let timeline_text = generate_timeline_text(timeline);
        let timeline_file = format!("{}/interaction_timeline.txt", profiles_dir);
        async_fs::write(&timeline_file, timeline_text).await
            .with_context(|| format!("Failed to write timeline file: {}", timeline_file))?;
        Ok(())
    }

    /// Writes LLM analysis prompts file
    async fn write_prompts_file(&self, profiles_dir: &str, profiles: &HashMap<String, UserProfile>) -> Result<()> {
        let prompts_text = generate_llm_analysis_prompts(profiles);
        let prompts_file = format!("{}/llm_analysis_prompts.txt", profiles_dir);
        async_fs::write(&prompts_file, prompts_text).await
            .with_context(|| format!("Failed to write prompts file: {}", prompts_file))?;
        Ok(())
    }

    /// Writes summary file
    async fn write_summary_file(&self, profiles_dir: &str, profiles: &HashMap<String, UserProfile>, timeline: &[InteractionEvent]) -> Result<()> {
        let summary_text = self.generate_summary_text(profiles, timeline);
        let summary_file = format!("{}/relationship_intelligence_summary.txt", profiles_dir);
        async_fs::write(&summary_file, summary_text).await
            .with_context(|| format!("Failed to write summary file: {}", summary_file))?;
        Ok(())
    }

    /// Generates summary file content
    fn generate_summary_text(&self, profiles: &HashMap<String, UserProfile>, timeline: &[InteractionEvent]) -> String {
        let mut output = String::new();
        
        output.push_str("RELATIONSHIP INTELLIGENCE SUMMARY\n");
        output.push_str("=================================\n");
        output.push_str(&format!("Generated: {}\n", chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")));
        output.push_str(&format!("Screen Name: {}\n\n", self.screen_name));
        
        self.add_overview_statistics(&mut output, profiles, timeline);
        self.add_top_relationships(&mut output, profiles);
        self.add_files_info(&mut output);
        self.add_usage_instructions(&mut output);
        
        output
    }

    /// Adds overview statistics to summary
    fn add_overview_statistics(&self, output: &mut String, profiles: &HashMap<String, UserProfile>, timeline: &[InteractionEvent]) {
        output.push_str("OVERVIEW STATISTICS\n");
        output.push_str("==================\n");
        output.push_str(&format!("Total relationships analyzed: {}\n", profiles.len()));
        output.push_str(&format!("Total interaction events: {}\n", timeline.len()));
        
        let total_interactions: u32 = profiles.values().map(|p| p.total_interactions).sum();
        output.push_str(&format!("Total interactions across all relationships: {}\n", total_interactions));
        
        if !profiles.is_empty() {
            let avg_interactions = total_interactions as f64 / profiles.len() as f64;
            output.push_str(&format!("Average interactions per relationship: {:.1}\n\n", avg_interactions));
        }
    }

    /// Adds top relationships to summary
    fn add_top_relationships(&self, output: &mut String, profiles: &HashMap<String, UserProfile>) {
        output.push_str("TOP RELATIONSHIPS (by interaction count)\n");
        output.push_str("=======================================\n");
        
        let mut sorted_profiles: Vec<_> = profiles.iter().collect();
        sorted_profiles.sort_by(|a, b| b.1.total_interactions.cmp(&a.1.total_interactions));
        
        for (i, (user_hash, profile)) in sorted_profiles.iter().take(10).enumerate() {
            output.push_str(&format!("{}. {} - {} interactions\n", 
                                   i + 1, &user_hash[..16], profile.total_interactions));
        }
        
        output.push('\n');
    }

    /// Adds files information to summary
    fn add_files_info(&self, output: &mut String) {
        output.push_str("FILES GENERATED\n");
        output.push_str("==============\n");
        output.push_str("- user_[hash]_profile.txt - Individual relationship profiles\n");
        output.push_str("- interaction_timeline.txt - Chronological interaction log\n");
        output.push_str("- llm_analysis_prompts.txt - Suggested analysis questions\n");
        output.push_str("- relationship_intelligence_summary.txt - This overview file\n\n");
    }

    /// Adds usage instructions to summary
    fn add_usage_instructions(&self, output: &mut String) {
        output.push_str("USAGE INSTRUCTIONS\n");
        output.push_str("==================\n");
        output.push_str("1. Upload these files to your preferred LLM (ChatGPT, Claude, NotebookLM)\n");
        output.push_str("2. Use the suggested prompts in llm_analysis_prompts.txt\n");
        output.push_str("3. Focus on patterns and insights for relationship improvement\n");
        output.push_str("4. All user data has been anonymized for privacy\n");
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;
    use crate::models::interaction::InteractionType;
    use chrono::TimeZone;

    fn create_test_profile() -> UserProfile {
        let mut profile = UserProfile::new("test_user_hash_123456");
        profile.total_interactions = 42;
        profile
    }

    fn create_test_timeline() -> Vec<InteractionEvent> {
        vec![
            InteractionEvent::new(
                "event1",
                chrono::Utc.with_ymd_and_hms(2023, 6, 15, 14, 30, 0).unwrap(),
                InteractionType::DmSent,
                "test_user_hash_123456",
                "Test message content"
            ),
        ]
    }

    #[tokio::test]
    async fn test_create_directory_structure() {
        let temp_dir = tempdir().unwrap();
        let writer = FileWriter::new(temp_dir.path().to_str().unwrap(), "testuser", 1234567890);
        
        let profiles_dir = writer.create_directory_structure().await.unwrap();
        
        assert!(tokio::fs::metadata(&profiles_dir).await.is_ok());
        assert!(profiles_dir.contains("relationship_profiles_testuser_1234567890"));
    }

    #[tokio::test]
    async fn test_write_all_files() {
        let temp_dir = tempdir().unwrap();
        let writer = FileWriter::new(temp_dir.path().to_str().unwrap(), "testuser", 1234567890);
        
        let mut profiles = HashMap::new();
        profiles.insert("test_user_hash_123456".to_string(), create_test_profile());
        let timeline = create_test_timeline();
        
        let result = writer.write_all_files(&profiles, &timeline).await;
        assert!(result.is_ok());
    }
}

================================================
FILE: src/relationship/communication.rs
================================================
//! Communication pattern analysis and response time calculations

use chrono::{DateTime, Utc, Datelike};
use std::collections::HashMap;
use crate::models::direct_message::DmMessage;

/// Communication frequency analysis
#[derive(Debug, Clone)]
pub struct CommunicationFrequency {
    /// Map of (year, month) to count of messages sent
    pub sent_per_month: HashMap<(i32, u32), u32>,
    /// Map of (year, month) to count of messages received
    pub received_per_month: HashMap<(i32, u32), u32>,
    /// Average number of messages sent per month
    pub avg_per_month_sent: f64,
    /// Average number of messages received per month
    pub avg_per_month_received: f64,
}

impl Default for CommunicationFrequency {
    fn default() -> Self {
        Self {
            sent_per_month: HashMap::new(),
            received_per_month: HashMap::new(),
            avg_per_month_sent: 0.0,
            avg_per_month_received: 0.0,
        }
    }
}

/// Calculate response times between consecutive messages in a conversation
/// 
/// # Arguments
/// 
/// * `messages` - A slice of DM messages in chronological order
/// 
/// # Returns
/// 
/// A vector of response times as Duration objects
/// 
/// # Examples
/// 
/// ```
/// use tweet_scrolls::relationship::calculate_response_times;
/// use tweet_scrolls::models::direct_message::{DmMessage, DmMessageCreate};
/// 
/// let messages = vec![
///     // Create test messages with timestamps
/// ];
/// let response_times = calculate_response_times(&messages);
/// assert!(response_times.len() <= messages.len());
/// ```
pub fn calculate_response_times(messages: &[DmMessage]) -> Vec<std::time::Duration> {
    let mut response_times = Vec::new();
    let mut timestamps = Vec::new();
    
    // Extract valid timestamps from messages
    for message in messages {
        if let Some(message_create) = &message.message_create {
            if let Some(created_at) = &message_create.created_at {
                if let Ok(timestamp) = DateTime::parse_from_rfc3339(created_at) {
                    timestamps.push(timestamp.with_timezone(&Utc));
                }
            }
        }
    }
    
    // Calculate time differences between consecutive messages
    for window in timestamps.windows(2) {
        let duration = window[1] - window[0];
        if let Ok(std_duration) = duration.to_std() {
            response_times.push(std_duration);
        }
    }
    
    response_times
}

/// Calculate average response time for a conversation
/// 
/// # Arguments
/// 
/// * `messages` - A slice of DM messages in chronological order
/// 
/// # Returns
/// 
/// The average response time as a Duration, or zero duration if no valid response times
/// 
/// # Examples
/// 
/// ```
/// use tweet_scrolls::relationship::calculate_average_response_time;
/// use tweet_scrolls::models::direct_message::{DmMessage, DmMessageCreate};
/// 
/// let messages = vec![
///     // Create test messages with timestamps
/// ];
/// let avg_time = calculate_average_response_time(&messages);
/// assert!(avg_time >= std::time::Duration::from_secs(0));
/// ```
pub fn calculate_average_response_time(messages: &[DmMessage]) -> std::time::Duration {
    let response_times = calculate_response_times(messages);
    
    if response_times.is_empty() {
        return std::time::Duration::from_secs(0);
    }
    
    let total_nanos: u128 = response_times.iter()
        .map(|d| d.as_nanos())
        .sum();
    
    let avg_nanos = total_nanos / response_times.len() as u128;
    std::time::Duration::from_nanos(avg_nanos as u64)
}

/// Calculate communication frequency metrics for a user
pub fn calculate_communication_frequency(
    user_id: &str,
    dm_data: &[crate::models::direct_message::DmWrapper]
) -> CommunicationFrequency {
    let mut sent_per_month: HashMap<(i32, u32), u32> = HashMap::new();
    let mut received_per_month: HashMap<(i32, u32), u32> = HashMap::new();
    let mut total_sent = 0;
    let mut total_received = 0;

    for dm_wrapper in dm_data {
        for message in &dm_wrapper.dm_conversation.messages {
            if let Some(create) = &message.message_create {
                if let Some(created_at) = &create.created_at {
                    if let Ok(timestamp) = DateTime::parse_from_rfc3339(created_at) {
                        let datetime = timestamp.with_timezone(&Utc);
                        let month_key = (datetime.year(), datetime.month());

                        // Check if this user sent or received the message
                        if let Some(sender_id) = &create.sender_id {
                            if sender_id == user_id {
                                *sent_per_month.entry(month_key).or_insert(0) += 1;
                                total_sent += 1;
                            } else {
                                *received_per_month.entry(month_key).or_insert(0) += 1;
                                total_received += 1;
                            }
                        }
                    }
                }
            }
        }
    }

    let avg_per_month_sent = if !sent_per_month.is_empty() {
        total_sent as f64 / sent_per_month.len() as f64
    } else {
        0.0
    };

    let avg_per_month_received = if !received_per_month.is_empty() {
        total_received as f64 / received_per_month.len() as f64
    } else {
        0.0
    };

    CommunicationFrequency {
        sent_per_month,
        received_per_month,
        avg_per_month_sent,
        avg_per_month_received,
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::direct_message::{DmMessage, DmMessageCreate};

    fn create_test_message(id: &str, created_at: &str, sender_id: Option<&str>) -> DmMessage {
        DmMessage {
            message_create: Some(DmMessageCreate {
                id: Some(id.to_string()),
                text: Some("Test message".to_string()),
                created_at: Some(created_at.to_string()),
                sender_id: sender_id.map(|s| s.to_string()),
                recipient_id: Some("recipient".to_string()),
                reactions: vec![],
                urls: vec![],
                media_urls: vec![],
                edit_history: vec![],
            }),
        }
    }

    #[test]
    fn test_calculate_response_times_empty() {
        let messages: Vec<DmMessage> = vec![];
        let response_times = calculate_response_times(&messages);
        assert!(response_times.is_empty());
    }

    #[test]
    fn test_calculate_response_times_single_message() {
        let messages = vec![
            create_test_message("1", "2023-01-01T10:00:00.000Z", Some("user1"))
        ];
        let response_times = calculate_response_times(&messages);
        assert!(response_times.is_empty()); // Need at least 2 messages for response time
    }

    #[test]
    fn test_calculate_response_times_multiple_messages() {
        let messages = vec![
            create_test_message("1", "2023-01-01T10:00:00.000Z", Some("user1")),
            create_test_message("2", "2023-01-01T10:05:00.000Z", Some("user2")),
            create_test_message("3", "2023-01-01T10:10:00.000Z", Some("user1")),
        ];
        
        let response_times = calculate_response_times(&messages);
        assert_eq!(response_times.len(), 2);
        
        // First response time should be 5 minutes (300 seconds)
        assert_eq!(response_times[0].as_secs(), 300);
        
        // Second response time should also be 5 minutes
        assert_eq!(response_times[1].as_secs(), 300);
    }

    #[test]
    fn test_calculate_average_response_time() {
        let messages = vec![
            create_test_message("1", "2023-01-01T10:00:00.000Z", Some("user1")),
            create_test_message("2", "2023-01-01T10:05:00.000Z", Some("user2")),
            create_test_message("3", "2023-01-01T10:10:00.000Z", Some("user1")),
        ];
        
        let avg_time = calculate_average_response_time(&messages);
        assert_eq!(avg_time.as_secs(), 300); // Average of 300 and 300 is 300
    }

    #[test]
    fn test_calculate_average_response_time_empty() {
        let messages: Vec<DmMessage> = vec![];
        let avg_time = calculate_average_response_time(&messages);
        assert_eq!(avg_time.as_secs(), 0);
    }

    #[test]
    fn test_communication_frequency_default() {
        let freq = CommunicationFrequency::default();
        assert!(freq.sent_per_month.is_empty());
        assert!(freq.received_per_month.is_empty());
        assert_eq!(freq.avg_per_month_sent, 0.0);
        assert_eq!(freq.avg_per_month_received, 0.0);
    }

    #[test]
    fn test_invalid_timestamps() {
        
        
        let messages = vec![
            DmMessage {
                message_create: Some(DmMessageCreate {
                    id: Some("1".to_string()),
                    text: Some("Test".to_string()),
                    created_at: Some("invalid-timestamp".to_string()), // Invalid timestamp
                    sender_id: Some("user1".to_string()),
                    recipient_id: Some("user2".to_string()),
                    reactions: vec![],
                    urls: vec![],
                    media_urls: vec![],
                    edit_history: vec![],
                }),
            }
        ];
        
        let response_times = calculate_response_times(&messages);
        assert!(response_times.is_empty()); // Should handle invalid timestamps gracefully
    }
}

================================================
FILE: src/relationship/anonymization.rs
================================================
//! User anonymization utilities using Blake3 hashing

/// Anonymizes a user ID using Blake3 hashing
/// 
/// This function takes a user ID string and returns a consistent, anonymized hash.
/// The same user ID will always produce the same hash, but the original ID cannot
/// be recovered from the hash.
/// 
/// # Examples
/// 
/// ```
/// use tweet_scrolls::relationship::hash_user_id;
/// 
/// let user_id = "1132151165410455552";
/// let hash1 = hash_user_id(user_id);
/// let hash2 = hash_user_id(user_id);
/// 
/// assert_eq!(hash1, hash2); // Consistent hashing
/// assert_ne!(hash1, user_id); // Actually anonymized
/// assert_eq!(hash1.len(), 64); // Blake3 hash length
/// ```
pub fn hash_user_id(user_id: &str) -> String {
    let hash = blake3::hash(user_id.as_bytes());
    hash.to_hex().to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_user_id_anonymization() {
        let user_id = "1132151165410455552";
        let hash1 = hash_user_id(user_id);
        let hash2 = hash_user_id(user_id);
        
        assert_eq!(hash1, hash2); // Consistent hashing
        assert_ne!(hash1, user_id); // Actually anonymized
        assert_eq!(hash1.len(), 64); // Blake3 hash length
    }

    #[test]
    fn test_user_id_anonymization_different_inputs() {
        let user_id1 = "1132151165410455552";
        let user_id2 = "9876543210123456789";
        
        let hash1 = hash_user_id(user_id1);
        let hash2 = hash_user_id(user_id2);
        
        // Different inputs should produce different hashes
        assert_ne!(hash1, hash2);
        
        // Both should be properly formatted hashes
        assert_eq!(hash1.len(), 64);
        assert_eq!(hash2.len(), 64);
        
        // Both should be hex strings (only contain 0-9, a-f)
        assert!(hash1.chars().all(|c| c.is_ascii_hexdigit()));
        assert!(hash2.chars().all(|c| c.is_ascii_hexdigit()));
    }

    #[test]
    fn test_user_id_anonymization_edge_cases() {
        // Test empty string
        let empty_hash = hash_user_id("");
        assert_eq!(empty_hash.len(), 64);
        
        // Test very long string
        let long_id = "a".repeat(1000);
        let long_hash = hash_user_id(&long_id);
        assert_eq!(long_hash.len(), 64);
        
        // Test special characters
        let special_id = "user@123!#$%";
        let special_hash = hash_user_id(special_id);
        assert_eq!(special_hash.len(), 64);
        assert_ne!(special_hash, special_id);
    }

    #[test]
    fn test_hash_consistency() {
        let user_id = "test_user_123";
        let hash1 = hash_user_id(user_id);
        
        // Hash multiple times to ensure consistency
        for _ in 0..10 {
            let hash_n = hash_user_id(user_id);
            assert_eq!(hash1, hash_n, "Hash should be consistent across multiple calls");
        }
    }

    #[test]
    fn test_hash_uniqueness() {
        let mut hashes = std::collections::HashSet::new();
        
        // Generate hashes for different inputs
        for i in 0..100 {
            let user_id = format!("user_{}", i);
            let hash = hash_user_id(&user_id);
            
            // Each hash should be unique
            assert!(hashes.insert(hash), "Hash collision detected for user_{}", i);
        }
        
        assert_eq!(hashes.len(), 100, "Should have 100 unique hashes");
    }
}

================================================
FILE: src/relationship/text_generators.rs
================================================
//! Text generation utilities for relationship intelligence profiles
//! 
//! Focused on generating human-readable content optimized for LLM analysis.

use chrono::{Datelike, Timelike};
use std::collections::HashMap;

use crate::models::profile::UserProfile;
use crate::models::interaction::InteractionEvent;

/// Generates user profile text optimized for LLM analysis
pub fn generate_user_profile_text(profile: &UserProfile, timeline: &[InteractionEvent]) -> String {
    let mut output = String::new();
    
    // Header section
    output.push_str("USER RELATIONSHIP PROFILE\n");
    output.push_str("========================\n");
    output.push_str(&format!("User ID Hash: {}\n", profile.user_hash));
    
    add_temporal_info(&mut output, profile);
    add_communication_stats(&mut output, profile);
    add_temporal_patterns(&mut output, timeline);
    add_relationship_insights(&mut output, profile);
    
    output
}

/// Adds temporal information to profile text
fn add_temporal_info(output: &mut String, profile: &UserProfile) {
    if let Some(first) = profile.first_interaction {
        output.push_str(&format!("First Interaction: {}\n", first.format("%Y-%m-%d")));
    }
    
    if let Some(last) = profile.last_interaction {
        output.push_str(&format!("Last Interaction: {}\n", last.format("%Y-%m-%d")));
    }
    
    if let (Some(first), Some(last)) = (profile.first_interaction, profile.last_interaction) {
        let days = (last - first).num_days();
        output.push_str(&format!("Total Interaction Days: {}\n", days));
    }
    
    output.push('\n');
}

/// Adds communication statistics to profile text
fn add_communication_stats(output: &mut String, profile: &UserProfile) {
    output.push_str("COMMUNICATION STATISTICS\n");
    output.push_str("========================\n");
    output.push_str(&format!("Total Interactions: {}\n", profile.total_interactions));
    
    if !profile.interaction_counts.is_empty() {
        output.push_str("Interaction Types:\n");
        for (interaction_type, count) in &profile.interaction_counts {
            let percentage = calculate_percentage(*count, profile.total_interactions);
            output.push_str(&format!("- {}: {} ({:.1}%)\n", interaction_type, count, percentage));
        }
    }
    
    output.push('\n');
}

/// Adds temporal patterns analysis to profile text
fn add_temporal_patterns(output: &mut String, timeline: &[InteractionEvent]) {
    output.push_str("TEMPORAL PATTERNS\n");
    output.push_str("================\n");
    
    if timeline.is_empty() {
        output.push_str("No timeline data available\n\n");
        return;
    }
    
    let (hourly_activity, daily_activity) = analyze_activity_patterns(timeline);
    
    if let Some((most_active_hour, _)) = hourly_activity.iter().enumerate()
        .max_by_key(|(_, &count)| count) {
        output.push_str(&format!("Most active hour: {}:00-{}:59\n", most_active_hour, most_active_hour));
    }
    
    if let Some((most_active_day, _)) = daily_activity.iter()
        .max_by_key(|(_, &count)| count) {
        output.push_str(&format!("Most active day: {:?}\n", most_active_day));
    }
    
    output.push_str(&format!("Total timeline events: {}\n\n", timeline.len()));
}

/// Adds relationship insights to profile text
fn add_relationship_insights(output: &mut String, profile: &UserProfile) {
    output.push_str("RELATIONSHIP INSIGHTS\n");
    output.push_str("====================\n");
    
    let strength = calculate_relationship_strength(profile.total_interactions);
    output.push_str(&format!("- Relationship strength: {} ({} interactions)\n", strength, profile.total_interactions));
    
    add_communication_balance(output, profile);
    add_interaction_consistency(output, profile);
}

/// Calculates percentage with zero division protection
fn calculate_percentage(count: u32, total: u32) -> f64 {
    if total > 0 {
        (count as f64 / total as f64) * 100.0
    } else {
        0.0
    }
}

/// Analyzes activity patterns from timeline
fn analyze_activity_patterns(timeline: &[InteractionEvent]) -> (Vec<u32>, HashMap<chrono::Weekday, u32>) {
    let mut hourly_activity = vec![0; 24];
    let mut daily_activity = HashMap::new();
    
    for event in timeline {
        let hour = event.timestamp.hour() as usize;
        if hour < 24 {
            hourly_activity[hour] += 1;
        }
        
        let weekday = event.timestamp.weekday();
        *daily_activity.entry(weekday).or_insert(0) += 1;
    }
    
    (hourly_activity, daily_activity)
}

/// Calculates relationship strength based on interaction count
fn calculate_relationship_strength(interactions: u32) -> &'static str {
    match interactions {
        0..=5 => "Minimal",
        6..=20 => "Low", 
        21..=100 => "Medium",
        _ => "High",
    }
}

/// Adds communication balance analysis
fn add_communication_balance(output: &mut String, profile: &UserProfile) {
    if let (Some(dm_sent), Some(dm_received)) = (
        profile.interaction_counts.get("dm_messages"),
        profile.interaction_counts.get("dm_received")
    ) {
        let total_dm = dm_sent + dm_received;
        if total_dm > 0 {
            let sent_percentage = (*dm_sent as f64 / total_dm as f64) * 100.0;
            let balance = classify_communication_balance(sent_percentage);
            output.push_str(&format!("- Communication balance: {} ({:.0}% you / {:.0}% them)\n", 
                                   balance, sent_percentage, 100.0 - sent_percentage));
        }
    }
}

/// Adds interaction consistency analysis
fn add_interaction_consistency(output: &mut String, profile: &UserProfile) {
    if let (Some(first), Some(last)) = (profile.first_interaction, profile.last_interaction) {
        let days = (last - first).num_days().max(1);
        let interactions_per_day = profile.total_interactions as f64 / days as f64;
        
        let consistency = classify_interaction_consistency(interactions_per_day);
        output.push_str(&format!("- Interaction consistency: {} ({:.2} per day)\n", 
                               consistency, interactions_per_day));
    }
}

/// Classifies communication balance
fn classify_communication_balance(sent_percentage: f64) -> &'static str {
    if sent_percentage > 60.0 {
        "You-initiated"
    } else if sent_percentage < 40.0 {
        "They-initiated"
    } else {
        "Balanced"
    }
}

/// Classifies interaction consistency
fn classify_interaction_consistency(interactions_per_day: f64) -> &'static str {
    if interactions_per_day > 1.0 {
        "Very High"
    } else if interactions_per_day > 0.5 {
        "High"
    } else if interactions_per_day > 0.1 {
        "Medium"
    } else {
        "Low"
    }
}

================================================
FILE: src/relationship/timeline_integration.rs
================================================
//! Timeline analysis integration for relationship intelligence

use chrono::{Weekday, Timelike, Datelike};
use std::collections::HashMap;
use crate::models::interaction::InteractionEvent;

/// Analyze hourly activity patterns from interaction events
/// 
/// # Arguments
/// 
/// * `events` - A slice of InteractionEvent objects
/// 
/// # Returns
/// 
/// A vector of 24 elements representing activity count for each hour (0-23)
/// 
/// # Examples
/// 
/// ```
/// use tweet_scrolls::relationship::analyze_hourly_activity;
/// 
/// let events = vec![]; // Your interaction events
/// let hourly_activity = analyze_hourly_activity(&events);
/// assert_eq!(hourly_activity.len(), 24);
/// ```
pub fn analyze_hourly_activity(events: &[InteractionEvent]) -> Vec<usize> {
    let mut hourly_counts = vec![0; 24];
    
    for event in events {
        let hour = event.timestamp.hour() as usize;
        if hour < 24 {
            hourly_counts[hour] += 1;
        }
    }
    
    hourly_counts
}

/// Find the most active day of the week from interaction events
/// 
/// # Arguments
/// 
/// * `events` - A slice of InteractionEvent objects
/// 
/// # Returns
/// 
/// The most active day of the week, or None if no events
/// 
/// # Examples
/// 
/// ```
/// use tweet_scrolls::relationship::find_most_active_day;
/// 
/// let events = vec![]; // Your interaction events
/// let most_active = find_most_active_day(&events);
/// ```
pub fn find_most_active_day(events: &[InteractionEvent]) -> Option<Weekday> {
    let mut day_counts = HashMap::new();
    
    for event in events {
        let weekday = event.timestamp.weekday();
        *day_counts.entry(weekday).or_insert(0) += 1;
    }
    
    day_counts.into_iter()
        .max_by_key(|(_, count)| *count)
        .map(|(day, _)| day)
}

/// Calculate activity distribution across days of the week
/// 
/// # Arguments
/// 
/// * `events` - A slice of InteractionEvent objects
/// 
/// # Returns
/// 
/// A HashMap mapping weekdays to activity counts
pub fn calculate_weekly_distribution(events: &[InteractionEvent]) -> HashMap<Weekday, usize> {
    let mut day_counts = HashMap::new();
    
    for event in events {
        let weekday = event.timestamp.weekday();
        *day_counts.entry(weekday).or_insert(0) += 1;
    }
    
    day_counts
}

/// Find peak activity hours (hours with above-average activity)
/// 
/// # Arguments
/// 
/// * `events` - A slice of InteractionEvent objects
/// 
/// # Returns
/// 
/// A vector of hours (0-23) that have above-average activity
pub fn find_peak_activity_hours(events: &[InteractionEvent]) -> Vec<u32> {
    let hourly_activity = analyze_hourly_activity(events);
    
    if events.is_empty() {
        return vec![];
    }
    
    let average_activity = events.len() as f64 / 24.0;
    
    // Require at least 2 events in the hour to avoid treating single events as peaks
    const MIN_EVENTS_FOR_PEAK: usize = 2;
    
    hourly_activity
        .iter()
        .enumerate()
        .filter(|(_, &count)| count as f64 > average_activity && count >= MIN_EVENTS_FOR_PEAK)
        .map(|(hour, _)| hour as u32)
        .collect()
}

/// Calculate interaction density over time periods
/// 
/// # Arguments
/// 
/// * `events` - A slice of InteractionEvent objects
/// * `window_hours` - Size of the time window in hours
/// 
/// # Returns
/// 
/// A vector of interaction counts for each time window
pub fn calculate_interaction_density(events: &[InteractionEvent], window_hours: i64) -> Vec<usize> {
    if events.is_empty() {
        return vec![];
    }
    
    let mut sorted_events = events.to_vec();
    sorted_events.sort_by_key(|e| e.timestamp);
    
    let start_time = sorted_events.first().unwrap().timestamp;
    let end_time = sorted_events.last().unwrap().timestamp;
    
    let _window_duration = chrono::Duration::hours(window_hours);
    let total_duration = end_time - start_time;
    // +1 so that both the starting and ending window are represented
    let num_windows = ((total_duration.num_hours() / window_hours) + 1).max(1) as usize;
    
    let mut density = vec![0; num_windows];
    
    for event in &sorted_events {
        let elapsed = event.timestamp - start_time;
        let window_index = (elapsed.num_hours() / window_hours).min(num_windows as i64 - 1) as usize;
        density[window_index] += 1;
    }
    
    density
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::{TimeZone, Utc};
    use crate::models::interaction::{InteractionEvent, InteractionType};

    fn create_test_event(hour: u32, day_offset: i64) -> InteractionEvent {
        let base_date = Utc.with_ymd_and_hms(2023, 1, 1, 0, 0, 0).unwrap(); // Sunday
        let timestamp = base_date + chrono::Duration::days(day_offset) + chrono::Duration::hours(hour as i64);
        
        InteractionEvent::new(
            format!("event_{}", hour),
            timestamp,
            InteractionType::DmSent,
            "user1",
            "Test message"
        )
    }

    #[test]
    fn test_analyze_hourly_activity_empty() {
        let events: Vec<InteractionEvent> = vec![];
        let hourly_activity = analyze_hourly_activity(&events);
        
        assert_eq!(hourly_activity.len(), 24);
        assert!(hourly_activity.iter().all(|&count| count == 0));
    }

    #[test]
    fn test_analyze_hourly_activity_with_events() {
        let events = vec![
            create_test_event(10, 0), // 10 AM
            create_test_event(10, 0), // 10 AM (another event)
            create_test_event(14, 0), // 2 PM
            create_test_event(22, 0), // 10 PM
        ];
        
        let hourly_activity = analyze_hourly_activity(&events);
        
        assert_eq!(hourly_activity.len(), 24);
        assert_eq!(hourly_activity[10], 2); // Two events at 10 AM
        assert_eq!(hourly_activity[14], 1); // One event at 2 PM
        assert_eq!(hourly_activity[22], 1); // One event at 10 PM
        assert_eq!(hourly_activity[0], 0);  // No events at midnight
    }

    #[test]
    fn test_find_most_active_day_empty() {
        let events: Vec<InteractionEvent> = vec![];
        let most_active = find_most_active_day(&events);
        assert!(most_active.is_none());
    }

    #[test]
    fn test_find_most_active_day_with_events() {
        let events = vec![
            create_test_event(10, 0), // Sunday
            create_test_event(11, 0), // Sunday
            create_test_event(12, 1), // Monday
            create_test_event(13, 2), // Tuesday
            create_test_event(14, 2), // Tuesday
            create_test_event(15, 2), // Tuesday
        ];
        
        let most_active = find_most_active_day(&events);
        assert_eq!(most_active, Some(Weekday::Tue)); // Tuesday has 3 events
    }

    #[test]
    fn test_calculate_weekly_distribution() {
        let events = vec![
            create_test_event(10, 0), // Sunday
            create_test_event(11, 1), // Monday
            create_test_event(12, 1), // Monday
            create_test_event(13, 2), // Tuesday
        ];
        
        let distribution = calculate_weekly_distribution(&events);
        
        assert_eq!(distribution.get(&Weekday::Sun), Some(&1));
        assert_eq!(distribution.get(&Weekday::Mon), Some(&2));
        assert_eq!(distribution.get(&Weekday::Tue), Some(&1));
        assert_eq!(distribution.get(&Weekday::Wed), None);
    }

    #[test]
    fn test_find_peak_activity_hours() {
        let events = vec![
            create_test_event(10, 0),
            create_test_event(10, 1),
            create_test_event(10, 2), // Hour 10 has 3 events
            create_test_event(14, 0),
            create_test_event(14, 1), // Hour 14 has 2 events
            create_test_event(22, 0), // Hour 22 has 1 event
        ];
        
        let peak_hours = find_peak_activity_hours(&events);
        
        // Average activity is 6/24 = 0.25 events per hour
        // Hours 10 (3 events) and 14 (2 events) are above average
        assert!(peak_hours.contains(&10));
        assert!(peak_hours.contains(&14));
        assert!(!peak_hours.contains(&22)); // Only 1 event, below threshold
    }

    #[test]
    fn test_calculate_interaction_density() {
        let events = vec![
            create_test_event(10, 0), // Day 0, hour 10
            create_test_event(11, 0), // Day 0, hour 11
            create_test_event(10, 1), // Day 1, hour 10
            create_test_event(10, 2), // Day 2, hour 10
        ];
        
        let density = calculate_interaction_density(&events, 24); // 24-hour windows
        
        // Should have density data for the time span
        assert!(!density.is_empty());
        
        // First window (day 0) should have 2 events
        assert_eq!(density[0], 2);
        
        // Subsequent windows should have 1 event each
        if density.len() > 1 {
            assert_eq!(density[1], 1);
        }
        if density.len() > 2 {
            assert_eq!(density[2], 1);
        }
    }

    #[test]
    fn test_calculate_interaction_density_empty() {
        let events: Vec<InteractionEvent> = vec![];
        let density = calculate_interaction_density(&events, 24);
        assert!(density.is_empty());
    }

    #[test]
    fn test_edge_cases() {
        // Test with events at hour boundaries
        let events = vec![
            create_test_event(0, 0),  // Midnight
            create_test_event(23, 0), // 11 PM
        ];
        
        let hourly_activity = analyze_hourly_activity(&events);
        assert_eq!(hourly_activity[0], 1);   // Midnight
        assert_eq!(hourly_activity[23], 1);  // 11 PM
        
        // Test weekly distribution with single day
        let distribution = calculate_weekly_distribution(&events);
        assert_eq!(distribution.get(&Weekday::Sun), Some(&2)); // Both events on Sunday
    }
}

================================================
FILE: src/relationship/mod.rs
================================================
//! Relationship intelligence analysis for Tweet-Scrolls
//! 
//! This module provides comprehensive relationship analysis capabilities:
//! - User anonymization and profiling
//! - Communication pattern analysis
//! - Timeline analysis integration
//! - Network topology mapping
//! - Text generation for profiles and timelines
//! - LLM prompt generation

pub mod analyzer;
pub mod anonymization;
pub mod communication;
pub mod timeline_integration;
/// File generation for relationship intelligence output
pub mod file_generation;
pub mod text_generators;
pub mod timeline_text;
pub mod prompts_generator;

// Re-export commonly used types
pub use analyzer::RelationshipAnalyzer;
pub use communication::{CommunicationFrequency, calculate_response_times, calculate_average_response_time};
pub use timeline_integration::{analyze_hourly_activity, find_most_active_day};
pub use file_generation::LLMFileGenerator;
pub use text_generators::generate_user_profile_text;
pub use timeline_text::generate_timeline_text;
pub use prompts_generator::generate_llm_analysis_prompts;

================================================
FILE: src/relationship/analyzer.rs
================================================
//! Core relationship analysis functionality

use std::collections::{HashMap, HashSet};
use chrono::{DateTime, Utc};
use crate::models::{
    direct_message::DmWrapper,
    interaction::InteractionEvent,
    profile::UserProfile,
};
use crate::services::timeline_analyzer::TimelineAnalyzer;

use super::communication::{CommunicationFrequency, calculate_communication_frequency};

/// Relationship analyzer for extracting and analyzing user interactions
#[derive(Debug)]
pub struct RelationshipAnalyzer {
    /// Map of user IDs to their profile data
    pub profiles: HashMap<String, UserProfile>,
}

impl Default for RelationshipAnalyzer {
    fn default() -> Self {
        Self::new()
    }
}

impl RelationshipAnalyzer {
    /// Creates a new RelationshipAnalyzer instance
    pub fn new() -> Self {
        Self {
            profiles: HashMap::new(),
        }
    }

    /// Extract unique user IDs from DM data
    /// 
    /// # Arguments
    /// 
    /// * `dm_wrappers` - A slice of DM wrapper objects
    /// 
    /// # Returns
    /// 
    /// A HashSet of user IDs
    /// 
    /// # Examples
    /// 
    /// ```
    /// use tweet_scrolls::relationship::RelationshipAnalyzer;
    /// 
    /// let analyzer = RelationshipAnalyzer::new();
    /// let dm_data = vec![]; // Your DM data
    /// let users = analyzer.extract_users_from_dms(&dm_data);
    /// ```
    pub fn extract_users_from_dms(&self, dm_wrappers: &[DmWrapper]) -> HashSet<String> {
        let mut users = HashSet::new();
        
        for wrapper in dm_wrappers {
            let conversation_id = &wrapper.dm_conversation.conversation_id;
            
            // Extract user IDs from conversation ID (format: "user1-user2")
            if let Some(dash_pos) = conversation_id.find('-') {
                let user1 = &conversation_id[..dash_pos];
                let user2 = &conversation_id[dash_pos + 1..];
                
                users.insert(user1.to_string());
                users.insert(user2.to_string());
            }
        }
        
        users
    }

    /// Extract unique user IDs from tweet data
    /// 
    /// # Arguments
    /// 
    /// * `tweets` - A slice of Tweet objects
    /// 
    /// # Returns
    /// 
    /// A HashSet of user IDs
    pub fn extract_users_from_tweets(&self, tweets: &[crate::processing::data_structures::Tweet]) -> HashSet<String> {
        let mut users = HashSet::new();
        
        for tweet in tweets {
            // Add user being replied to
            if let Some(reply_to_user) = &tweet.in_reply_to_screen_name {
                users.insert(reply_to_user.clone());
            }
            
            // Add all mentioned users
            for mention in &tweet.entities.user_mentions {
                users.insert(mention.screen_name.clone());
            }
        }
        
        users
    }

    /// Create a basic user profile from conversation data
    /// 
    /// # Arguments
    ///
    /// * `user_id` - The user ID
    /// * `dm_data` - DM conversation data
    ///
    /// # Returns
    ///
    /// A UserProfile with basic statistics
    pub fn create_user_profile(&self, user_id: &str, dm_data: &[DmWrapper]) -> UserProfile {
        let (first_interaction, last_interaction) = self.find_interaction_timespan(user_id, dm_data);
        
        let mut profile = UserProfile::new(user_id);
        
        // Set interaction timestamps
        profile.first_interaction = first_interaction;
        profile.last_interaction = last_interaction;
        
        // Calculate basic statistics
        let mut total_messages = 0;
        for wrapper in dm_data {
            let conversation_id = &wrapper.dm_conversation.conversation_id;
            
            // Check if this user is part of this conversation
            if let Some(dash_pos) = conversation_id.find('-') {
                let user1_id = &conversation_id[..dash_pos];
                let user2_id = &conversation_id[dash_pos + 1..];
                
                if user_id == user1_id || user_id == user2_id {
                    // Count messages in this conversation
                    for message in &wrapper.dm_conversation.messages {
                        if message.message_create.is_some() {
                            total_messages += 1;
                        }
                    }
                }
            }
        }
        
        profile.total_interactions = total_messages;
        profile.interaction_counts.insert("dm_messages".to_string(), total_messages);
        
        profile
    }

    /// Find the first and last interaction timestamps for a user
    fn find_interaction_timespan(&self, user_id: &str, dm_data: &[DmWrapper]) -> (Option<DateTime<Utc>>, Option<DateTime<Utc>>) {
        let mut timestamps = Vec::new();
        
        for wrapper in dm_data {
            let conversation_id = &wrapper.dm_conversation.conversation_id;
            
            // Check if this user is part of this conversation
            if let Some(dash_pos) = conversation_id.find('-') {
                let user1_id = &conversation_id[..dash_pos];
                let user2_id = &conversation_id[dash_pos + 1..];
                
                if user_id == user1_id || user_id == user2_id {
                    // Collect timestamps from this conversation
                    for message in &wrapper.dm_conversation.messages {
                        if let Some(message_create) = &message.message_create {
                            if let Some(created_at) = &message_create.created_at {
                                if let Ok(timestamp) = DateTime::parse_from_rfc3339(created_at) {
                                    timestamps.push(timestamp.with_timezone(&Utc));
                                }
                            }
                        }
                    }
                }
            }
        }
        
        if timestamps.is_empty() {
            (None, None)
        } else {
            timestamps.sort();
            (timestamps.first().copied(), timestamps.last().copied())
        }
    }

    /// Build a chronological interaction timeline from DM and tweet data
    /// 
    /// # Arguments
    /// 
    /// * `dm_data` - DM conversation data
    /// * `tweet_data` - Tweet data
    /// 
    /// # Returns
    /// 
    /// A vector of InteractionEvent objects sorted chronologically (newest first)
    pub fn build_timeline(&self, dm_data: &[DmWrapper], tweet_data: &[crate::processing::data_structures::Tweet]) -> Vec<InteractionEvent> {
        let mut timeline = Vec::new();
        
        // Add DM events to timeline
        for wrapper in dm_data {
            let conversation_id = &wrapper.dm_conversation.conversation_id;
            for message in &wrapper.dm_conversation.messages {
                if let Some(event) = InteractionEvent::from_dm_message(message, conversation_id) {
                    timeline.push(event);
                }
            }
        }
        
        // Add tweet events to timeline (if we had a from_tweet method)
        // For now, we'll skip tweet events since the method doesn't exist
        let _ = tweet_data; // Suppress unused parameter warning
        
        // Sort timeline chronologically (newest first)
        timeline.sort_by(|a, b| b.timestamp.cmp(&a.timestamp));
        
        timeline
    }

    /// Calculate communication frequency for a user
    /// 
    /// # Arguments
    ///
    /// * `user_id` - The user ID
    /// * `dm_data` - DM conversation data
    ///
    /// # Returns
    ///
    /// CommunicationFrequency analysis for the user
    pub fn calculate_communication_frequency(&self, user_id: &str, dm_data: &[DmWrapper]) -> CommunicationFrequency {
        calculate_communication_frequency(user_id, dm_data)
    }

    /// Analyze the timeline of interactions
    /// 
    /// # Arguments
    /// 
    /// * `events` - A slice of InteractionEvent objects
    /// 
    /// # Returns
    /// 
    /// TimelineAnalysis with detected patterns and statistics
    pub fn analyze_timeline(&self, events: &[InteractionEvent]) -> crate::models::timeline::TimelineAnalysis {
        let analyzer = TimelineAnalyzer::new(events.to_vec());
        analyzer.analyze()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::models::direct_message::{DmConversation, DmMessageCreate, DmMessage};

    // Helper function to create sample DM data for testing
    fn create_sample_dm_data() -> Vec<DmWrapper> {
        
        
        vec![
            DmWrapper {
                dm_conversation: DmConversation {
                    conversation_id: "3382-1132151165410455552".to_string(),
                    messages: vec![
                        DmMessage {
                            message_create: Some(DmMessageCreate {
                                id: Some("msg1".to_string()),
                                text: Some("Hello there!".to_string()),
                                created_at: Some("2023-01-01T10:00:00.000Z".to_string()),
                                sender_id: Some("3382".to_string()),
                                recipient_id: Some("1132151165410455552".to_string()),
                                reactions: vec![],
                                urls: vec![],
                                media_urls: vec![],
                                edit_history: vec![],
                            }),
                        },
                    ],
                },
            },
            DmWrapper {
                dm_conversation: DmConversation {
                    conversation_id: "1132151165410455552-9876543210".to_string(),
                    messages: vec![
                        DmMessage {
                            message_create: Some(DmMessageCreate {
                                id: Some("msg2".to_string()),
                                text: Some("How are you?".to_string()),
                                created_at: Some("2023-01-01T10:05:00.000Z".to_string()),
                                sender_id: Some("1132151165410455552".to_string()),
                                recipient_id: Some("9876543210".to_string()),
                                reactions: vec![],
                                urls: vec![],
                                media_urls: vec![],
                                edit_history: vec![],
                            }),
                        },
                    ],
                },
            },
        ]
    }

    // Helper function to create sample tweet data for testing
    fn create_sample_tweet_data() -> Vec<crate::processing::data_structures::Tweet> {
        use crate::processing::data_structures::{Tweet, TweetEntities};
        
        vec![
            Tweet {
                id_str: "tweet1".to_string(),
                id: "tweet1".to_string(),
                full_text: "Hello world!".to_string(),
                created_at: "Mon Jan 01 10:00:00 +0000 2023".to_string(),
                favorite_count: "5".to_string(),
                retweet_count: "2".to_string(),
                retweeted: false,
                favorited: false,
                truncated: false,
                lang: "en".to_string(),
                source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
                display_text_range: vec!["0".to_string(), "12".to_string()],
                in_reply_to_status_id: None,
                in_reply_to_status_id_str: None,
                in_reply_to_user_id: None,
                in_reply_to_user_id_str: None,
                in_reply_to_screen_name: Some("alice".to_string()),
                edit_info: None,
                entities: TweetEntities {
                    hashtags: vec![],
                    symbols: vec![],
                    user_mentions: vec![
                        crate::processing::data_structures::UserMention {
                            screen_name: "bob".to_string(),
                            name: "Bob".to_string(),
                            id: "12345".to_string(),
                            id_str: "12345".to_string(),
                            indices: vec!["0".to_string(), "0".to_string()],
                        }
                    ],
                    urls: vec![],
                },
                possibly_sensitive: None,
            },
            Tweet {
                id_str: "tweet2".to_string(),
                id: "tweet2".to_string(),
                full_text: "Another tweet".to_string(),
                created_at: "Mon Jan 01 11:00:00 +0000 2023".to_string(),
                favorite_count: "3".to_string(),
                retweet_count: "1".to_string(),
                retweeted: false,
                favorited: false,
                truncated: false,
                lang: "en".to_string(),
                source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
                display_text_range: vec!["0".to_string(), "13".to_string()],
                in_reply_to_status_id: None,
                in_reply_to_status_id_str: None,
                in_reply_to_user_id: None,
                in_reply_to_user_id_str: None,
                in_reply_to_screen_name: None,
                edit_info: None,
                entities: TweetEntities {
                    hashtags: vec![],
                    symbols: vec![],
                    user_mentions: vec![
                        crate::processing::data_structures::UserMention {
                            screen_name: "bob".to_string(),
                            name: "Bob".to_string(),
                            id: "12345".to_string(),
                            id_str: "12345".to_string(),
                            indices: vec!["0".to_string(), "0".to_string()],
                        }
                    ],
                    urls: vec![],
                },
                possibly_sensitive: None,
            },
        ]
    }

    #[test]
    fn test_relationship_analyzer_creation() {
        let analyzer = RelationshipAnalyzer::new();
        assert!(analyzer.profiles.is_empty());
    }

    #[test]
    fn test_extract_unique_users_from_dms() {
        let sample_dm_data = create_sample_dm_data();
        let analyzer = RelationshipAnalyzer::new();
        
        let users = analyzer.extract_users_from_dms(&sample_dm_data);
        
        // Should extract 3 unique users: "3382", "1132151165410455552", "9876543210"
        assert_eq!(users.len(), 3);
        assert!(users.contains("3382"));
        assert!(users.contains("1132151165410455552"));
        assert!(users.contains("9876543210"));
    }

    #[test]
    fn test_extract_users_from_tweets() {
        let sample_tweet_data = create_sample_tweet_data();
        let analyzer = RelationshipAnalyzer::new();
        
        let users = analyzer.extract_users_from_tweets(&sample_tweet_data);
        
        // Should extract 2 unique users from in_reply_to_screen_name: "alice", "bob"
        assert_eq!(users.len(), 2);
        assert!(users.contains("alice"));
        assert!(users.contains("bob"));
    }

    #[test]
    fn test_handle_empty_data_gracefully() {
        let analyzer = RelationshipAnalyzer::new();
        
        // Test with empty DM data
        let empty_dm_data: Vec<DmWrapper> = vec![];
        let dm_users = analyzer.extract_users_from_dms(&empty_dm_data);
        assert_eq!(dm_users.len(), 0);
        
        // Test with empty tweet data
        let empty_tweet_data: Vec<crate::processing::data_structures::Tweet> = vec![];
        let tweet_users = analyzer.extract_users_from_tweets(&empty_tweet_data);
        assert_eq!(tweet_users.len(), 0);
    }

    #[test]
    fn test_extract_users_from_malformed_conversation_ids() {
        let malformed_dm_data = vec![
            DmWrapper {
                dm_conversation: DmConversation {
                    conversation_id: "no_dash_here".to_string(), // No dash separator
                    messages: vec![],
                },
            },
            DmWrapper {
                dm_conversation: DmConversation {
                    conversation_id: "user1-user2".to_string(), // Valid format
                    messages: vec![],
                },
            },
        ];
        
        let analyzer = RelationshipAnalyzer::new();
        let users = analyzer.extract_users_from_dms(&malformed_dm_data);
        
        // Should only extract from the valid conversation ID
        assert_eq!(users.len(), 2);
        assert!(users.contains("user1"));
        assert!(users.contains("user2"));
    }

    #[test]
    fn test_create_basic_user_profile() {
        let sample_data = create_sample_dm_data();
        let analyzer = RelationshipAnalyzer::new();
        let user_id = "3382".to_string();
        
        let profile = analyzer.create_user_profile(&user_id, &sample_data);
        
        assert_eq!(profile.user_id, user_id);
        assert!(profile.total_interactions > 0);
        assert!(profile.first_interaction.is_some());
        assert!(profile.last_interaction.is_some());
        assert!(profile.first_interaction <= profile.last_interaction);
    }

    #[test]
    fn test_build_interaction_timeline() {
        let dm_data = create_sample_dm_data();
        let tweet_data = create_sample_tweet_data();
        let analyzer = RelationshipAnalyzer::new();
        
        let timeline = analyzer.build_timeline(&dm_data, &tweet_data);
        
        // Should have events from DM data
        assert!(!timeline.is_empty());
        
        // Timeline should be sorted chronologically (newest first)
        for window in timeline.windows(2) {
            assert!(window[0].timestamp >= window[1].timestamp);
        }
    }

    #[test]
    fn test_timeline_analysis_integration() {
        let dm_data = create_sample_dm_data();
        let tweet_data = create_sample_tweet_data();
        let analyzer = RelationshipAnalyzer::new();
        
        let timeline = analyzer.build_timeline(&dm_data, &tweet_data);
        let analysis = analyzer.analyze_timeline(&timeline);
        
        // Should have basic analysis structure
        assert!(analysis.total_interactions > 0);
        assert!(analysis.unique_participants > 0);
        assert!(!analysis.patterns.is_empty() || analysis.patterns.is_empty()); // Either way is valid
    }
}

================================================
FILE: src/relationship/file_generation.rs
================================================
use crate::models::profile::UserProfile;
use crate::models::interaction::InteractionEvent;
use anyhow::{Context, Result};
use std::fs;
use std::path::Path;
use std::fmt::Write; // For String formatting

/// LLM File Generator for relationship intelligence profiles
pub struct LLMFileGenerator {
    /// Directory where all output files will be written
    pub output_dir: String,
    /// Screen name of the user being analyzed
    pub screen_name: String,
    /// Timestamp for uniquely identifying this analysis run
    pub timestamp: u64,
}

impl LLMFileGenerator {
    /// Create a new LLM file generator
    pub fn new(base_path: &str, screen_name: &str, timestamp: u64) -> Self {
        let output_dir = format!("{}/relationship_profiles_{}_{}", base_path, screen_name, timestamp);
        
        LLMFileGenerator {
            output_dir,
            screen_name: screen_name.to_string(),
            timestamp,
        }
    }

    /// Create the directory structure for relationship profiles
    /// 
    /// Returns the path to the created directory
    pub async fn create_directory_structure(&self) -> std::io::Result<String> {
        tokio::fs::create_dir_all(&self.output_dir).await?;
        Ok(self.output_dir.clone())
    }

    /// Generate all relationship intelligence files
    pub fn generate_all_files(&self, profiles: &[UserProfile], interactions: &[InteractionEvent]) -> Result<()> {
        // Create output directory
        fs::create_dir_all(&self.output_dir)
            .context("Failed to create relationship profiles directory")?;

        // Generate individual profile files
        for profile in profiles {
            self.generate_individual_profile_file(profile)?;
        }

        // Generate aggregate files
        self.generate_interaction_timeline_file(interactions)?;
        self.generate_communication_patterns_file(profiles)?;
        self.generate_relationship_network_file(profiles)?;
        self.generate_llm_prompts_file(profiles)?;

        Ok(())
    }

    /// Generate individual user profile file
    pub fn generate_individual_profile_file(&self, profile: &UserProfile) -> Result<()> {
        // Create output directory if it doesn't exist
        fs::create_dir_all(&self.output_dir)
            .context("Failed to create output directory")?;
            
        let filename = format!("user_{}_profile.txt", &profile.user_id);
        let file_path = Path::new(&self.output_dir).join(filename);
        
        let content = generate_profile_text(profile);
        
        fs::write(file_path, content)
            .context("Failed to write individual profile file")?;
        
        Ok(())
    }

    /// Generate interaction timeline file
    fn generate_interaction_timeline_file(&self, interactions: &[InteractionEvent]) -> Result<()> {
        let file_path = Path::new(&self.output_dir).join("interaction_timeline.txt");
        let content = generate_timeline_text(interactions);
        
        fs::write(file_path, content)
            .context("Failed to write interaction timeline file")?;
        
        Ok(())
    }

    /// Generate communication patterns file
    fn generate_communication_patterns_file(&self, profiles: &[UserProfile]) -> Result<()> {
        let file_path = Path::new(&self.output_dir).join("communication_patterns.txt");
        let content = generate_communication_patterns_text(profiles);
        
        fs::write(file_path, content)
            .context("Failed to write communication patterns file")?;
        
        Ok(())
    }

    /// Generate relationship network file
    fn generate_relationship_network_file(&self, profiles: &[UserProfile]) -> Result<()> {
        let file_path = Path::new(&self.output_dir).join("relationship_network.txt");
        let content = generate_relationship_network_text(profiles);
        
        fs::write(file_path, content)
            .context("Failed to write relationship network file")?;
        
        Ok(())
    }

    /// Generate LLM analysis prompts file
    fn generate_llm_prompts_file(&self, profiles: &[UserProfile]) -> Result<()> {
        let file_path = Path::new(&self.output_dir).join("llm_analysis_prompts.txt");
        let content = generate_llm_analysis_prompts(profiles);
        
        fs::write(file_path, content)
            .context("Failed to write LLM analysis prompts file")?;
        
        Ok(())
    }
}

/// Generate formatted profile text for a user
pub fn generate_profile_text(profile: &UserProfile) -> String {
    let mut output = String::new();
    writeln!(&mut output, "# USER RELATIONSHIP PROFILE").unwrap();
    writeln!(&mut output, "\n## User Profile: {}", profile.user_id).unwrap();
    writeln!(&mut output, "\n## Interaction Summary").unwrap();
    writeln!(&mut output, "- Total Interactions: {}", profile.total_interactions).unwrap();
    writeln!(&mut output, "\n## COMMUNICATION STATISTICS").unwrap();
    for (interaction_type, count) in &profile.interaction_counts {
        writeln!(&mut output, "- {}: {} interactions", interaction_type, count).unwrap();
    }
    writeln!(&mut output, "\n## TEMPORAL PATTERNS").unwrap();
    if let Some(first) = profile.first_interaction {
        writeln!(&mut output, "- First Interaction: {}", first.format("%Y-%m-%d")).unwrap();
    }
    if let Some(last) = profile.last_interaction {
        writeln!(&mut output, "- Last Interaction: {}", last.format("%Y-%m-%d")).unwrap();
    }
    output
}

/// Generate formatted timeline text for interactions
pub fn generate_timeline_text(interactions: &[InteractionEvent]) -> String {
    let mut content = String::from("# INTERACTION TIMELINE\n\n");
    content.push_str("Chronological log of all interactions for relationship analysis.\n\n");
    
    for interaction in interactions {
        content.push_str(&format!(
            "## {} - {:?}\n",
            interaction.timestamp.format("%Y-%m-%d %H:%M UTC"),
            interaction.interaction_type
        ));
        
        content.push_str(&format!("- User: {}\n", &interaction.user_id));
        content.push_str(&format!("- ID: {}\n", interaction.id));
        
        if !interaction.content.is_empty() {
            let preview = if interaction.content.len() > 100 {
                format!("{}...", &interaction.content[..100])
            } else {
                interaction.content.clone()
            };
            content.push_str(&format!("- Content: {}\n", preview));
        }
        
        if !interaction.metadata.is_empty() {
            content.push_str("- Metadata:\n");
            for (key, value) in &interaction.metadata {
                content.push_str(&format!("  - {}: {}\n", key, value));
            }
        }
        
        content.push('\n');
    }
    
    content.push_str("\n---\nGenerated by Tweet-Scrolls Relationship Intelligence System\n");
    content
}

/// Generate LLM analysis prompts
pub fn generate_llm_analysis_prompts(profiles: &[UserProfile]) -> String {
    format!(
        r#"# LLM ANALYSIS PROMPTS FOR RELATIONSHIP INTELLIGENCE

## OVERVIEW
This file contains suggested prompts for analyzing relationship data with Large Language Models.
Use these prompts with the generated profile files to gain deeper insights into communication patterns.

## RELATIONSHIP HEALTH ANALYSIS

### Primary Questions
1. Which relationships need more attention based on interaction frequency and response times?
2. What communication patterns make conversations most engaging and meaningful?
3. How can I improve my response times without sacrificing thoughtfulness?
4. Which relationships show the strongest mutual engagement patterns?
5. What temporal patterns suggest optimal times for important conversations?

### Deep Analysis Prompts
1. **Communication Balance**: "Analyze the send/receive ratio for each relationship. Which relationships are one-sided and might benefit from more balanced communication?"

2. **Response Time Patterns**: "Examine response time data across relationships. What patterns emerge for different types of relationships (close friends, professional contacts, family)?"

3. **Temporal Insights**: "Based on the most active hours and days for each relationship, when should I schedule important conversations for maximum engagement?"

4. **Relationship Prioritization**: "Using interaction frequency, response times, and engagement patterns, rank relationships by priority for attention and nurturing."

5. **Communication Style Analysis**: "What do the interaction types (DMs, replies, mentions) reveal about communication preferences for each relationship?"

## ACTIONABLE INSIGHTS PROMPTS

### Relationship Improvement
- "Identify 3 relationships that would benefit most from increased attention based on declining interaction patterns."
- "Suggest specific actions to improve response times while maintaining message quality."
- "Recommend optimal communication schedules based on each person's activity patterns."

### Communication Optimization
- "Analyze which communication channels (DMs vs public replies) work best for different relationships."
- "Identify conversation starters that historically lead to longer, more engaging exchanges."
- "Suggest ways to maintain consistent communication without being overwhelming."

### Network Analysis
- "Map the relationship network to identify key connectors and potential introductions."
- "Analyze communication clusters to understand social groups and dynamics."
- "Identify relationships that could benefit from group interactions vs one-on-one communication."

## SAMPLE ANALYSIS FRAMEWORK

When analyzing the relationship data, consider these dimensions:

1. **Frequency**: How often do we interact?
2. **Consistency**: Are interactions regular or sporadic?
3. **Reciprocity**: Is communication balanced between both parties?
4. **Responsiveness**: How quickly do we respond to each other?
5. **Engagement**: Do conversations lead to meaningful exchanges?
6. **Temporal Patterns**: When are we most likely to have quality interactions?

## PRIVACY CONSIDERATIONS

User identifiers are preserved in their original form. When discussing insights:
- Refer to users by their original identifiers
- Focus on patterns rather than specific content
- Maintain confidentiality of communication details

## TOTAL RELATIONSHIPS ANALYZED: {}

Use these prompts to generate actionable insights for improving relationship management and communication effectiveness.

---
Generated by Tweet-Scrolls Relationship Intelligence System
Analysis Date: {}
"#,
        profiles.len(),
        chrono::Utc::now().format("%Y-%m-%d %H:%M UTC")
    )
}

/// Format interaction counts for display
#[allow(dead_code)]
fn format_interaction_counts(counts: &std::collections::HashMap<String, u32>) -> String {
    let mut formatted = String::new();
    for (interaction_type, count) in counts {
        formatted.push_str(&format!("- {}: {} interactions\n", interaction_type, count));
    }
    if formatted.is_empty() {
        formatted.push_str("- No interactions recorded\n");
    }
    formatted
}

/// Format metadata for display
#[allow(dead_code)]
fn format_metadata(metadata: &std::collections::HashMap<String, String>) -> String {
    let mut formatted = String::new();
    for (key, value) in metadata {
        formatted.push_str(&format!("- {}: {}\n", key, value));
    }
    if formatted.is_empty() {
        formatted.push_str("- No metadata available\n");
    }
    formatted
}

/// Generate communication patterns analysis text
fn generate_communication_patterns_text(profiles: &[UserProfile]) -> String {
    let mut content = String::from("# COMMUNICATION PATTERNS ANALYSIS\n\n");
    
    // Calculate aggregate statistics
    let total_interactions: u32 = profiles.iter().map(|p| p.total_interactions).sum();
    
    content.push_str("## AGGREGATE STATISTICS\n");
    content.push_str(&format!("- Total Relationships: {}\n", profiles.len()));
    content.push_str(&format!("- Total Interactions: {}\n", total_interactions));
    
    if !profiles.is_empty() {
        let avg_interactions = total_interactions as f64 / profiles.len() as f64;
        content.push_str(&format!("- Average Interactions per Relationship: {:.1}\n\n", avg_interactions));
    }
    
    // Interaction type analysis
    let mut all_interaction_types = std::collections::HashMap::new();
    for profile in profiles {
        for (interaction_type, count) in &profile.interaction_counts {
            *all_interaction_types.entry(interaction_type.clone()).or_insert(0) += count;
        }
    }
    
    content.push_str("## INTERACTION TYPE DISTRIBUTION\n");
    let mut sorted_types: Vec<_> = all_interaction_types.iter().collect();
    sorted_types.sort_by(|a, b| b.1.cmp(a.1));
    
    for (interaction_type, count) in sorted_types.iter().take(10) {
        content.push_str(&format!("- {}: {} total interactions\n", interaction_type, count));
    }
    
    content.push_str("\n---\nGenerated by Tweet-Scrolls Relationship Intelligence System\n");
    content
}

/// Generate relationship network analysis text
fn generate_relationship_network_text(profiles: &[UserProfile]) -> String {
    let mut content = String::from("# RELATIONSHIP NETWORK ANALYSIS\n\n");
    
    content.push_str("## NETWORK OVERVIEW\n");
    content.push_str(&format!("- Total Nodes (Relationships): {}\n", profiles.len()));
    
    // Categorize relationships by total interactions
    let high_activity = profiles.iter().filter(|p| p.total_interactions > 50).count();
    let medium_activity = profiles.iter().filter(|p| p.total_interactions > 10 && p.total_interactions <= 50).count();
    let low_activity = profiles.iter().filter(|p| p.total_interactions <= 10).count();
    
    content.push_str(&format!("- High Activity Relationships (>50 interactions): {}\n", high_activity));
    content.push_str(&format!("- Medium Activity Relationships (10-50 interactions): {}\n", medium_activity));
    content.push_str(&format!("- Low Activity Relationships (≤10 interactions): {}\n\n", low_activity));
    
    // Interaction type diversity
    let diverse_relationships = profiles.iter().filter(|p| p.interaction_counts.len() > 2).count();
    let simple_relationships = profiles.iter().filter(|p| p.interaction_counts.len() <= 2).count();
    
    content.push_str("## INTERACTION DIVERSITY\n");
    content.push_str(&format!("- Diverse Communication (>2 interaction types): {}\n", diverse_relationships));
    content.push_str(&format!("- Simple Communication (≤2 interaction types): {}\n\n", simple_relationships));
    
    // Time span analysis
    let mut active_relationships = 0;
    let mut dormant_relationships = 0;
    
    for profile in profiles {
        if let (Some(first), Some(last)) = (profile.first_interaction, profile.last_interaction) {
            let duration = last.signed_duration_since(first);
            if duration.num_days() > 30 {
                active_relationships += 1;
            } else {
                dormant_relationships += 1;
            }
        }
    }
    
    content.push_str("## RELATIONSHIP LONGEVITY\n");
    content.push_str(&format!("- Long-term Relationships (>30 days): {}\n", active_relationships));
    content.push_str(&format!("- Short-term Relationships (≤30 days): {}\n\n", dormant_relationships));
    
    content.push_str("---\nGenerated by Tweet-Scrolls Relationship Intelligence System\n");
    content
}

#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn test_file_generator_creation() {
        let generator = LLMFileGenerator::new("/tmp/test", "testuser", 1234567890);
        assert_eq!(generator.screen_name, "testuser");
        assert_eq!(generator.timestamp, 1234567890);
        assert!(generator.output_dir.contains("testuser"));
    }
}

================================================
FILE: src/services/timeline.rs
================================================
//! Timeline generation and analysis service

use std::collections::HashMap;
use chrono::{DateTime, Duration, Utc};
use crate::models::interaction::{InteractionEvent, ConversationThread};

/// Builds a timeline from a set of interaction events
/// 
/// The timeline is sorted in reverse chronological order (newest first)
pub fn build_timeline(events: &mut [InteractionEvent]) -> Vec<&InteractionEvent> {
    // Sort events by timestamp in descending order (newest first)
    events.sort_by(|a, b| b.timestamp.cmp(&a.timestamp));
    events.iter().collect()
}

/// Groups interaction events into conversation threads
/// 
/// # Arguments
/// * `events` - Sorted list of interaction events
/// * `time_window_seconds` - Maximum time between events to be considered part of the same conversation
pub fn group_into_conversations(
    events: Vec<InteractionEvent>,
    time_window_seconds: i64,
) -> Vec<ConversationThread> {
    if events.is_empty() {
        return Vec::new();
    }

    let mut conversations = Vec::new();
    let time_window = Duration::seconds(time_window_seconds);
    
    // Sort events chronologically for grouping
    let mut sorted_events = events;
    sorted_events.sort_by_key(|e| e.timestamp);
    
    let mut current_conversation = ConversationThread::new("0");
    let mut last_timestamp = sorted_events[0].timestamp;
    
    for event in sorted_events {
        // If the time gap is too large, start a new conversation
        if (event.timestamp - last_timestamp) > time_window && !current_conversation.events.is_empty() {
            conversations.push(current_conversation);
            current_conversation = ConversationThread::new(conversations.len().to_string());
        }
        
        current_conversation.add_event(event);
        last_timestamp = current_conversation.last_activity;
    }
    
    // Add the last conversation if not empty
    if !current_conversation.events.is_empty() {
        conversations.push(current_conversation);
    }
    
    conversations
}

/// Calculates response times between consecutive messages in a conversation
pub fn calculate_response_times(conversation: &ConversationThread) -> Vec<Duration> {
    let mut response_times = Vec::new();
    let events = &conversation.events;
    
    for window in events.windows(2) {
        let time_diff = window[1].timestamp - window[0].timestamp;
        response_times.push(time_diff);
    }
    
    response_times
}

/// Analyzes conversation patterns in the timeline
pub fn analyze_conversation_patterns(
    conversations: &[ConversationThread],
    _user_hash: &str,  // Currently unused, but kept for future filtering
) -> HashMap<String, f64> {
    let mut patterns = HashMap::new();
    
    // Calculate average response time
    let total_response_time: i64 = conversations
        .iter()
        .flat_map(|conv| calculate_response_times(conv).into_iter())
        .map(|d| d.num_seconds())
        .sum();
    
    let total_responses: i64 = conversations
        .iter()
        .map(|conv| conv.events.len() as i64 - 1)
        .sum();
    
    let avg_response = if total_responses > 0 {
        total_response_time as f64 / total_responses as f64
    } else {
        0.0
    };
    
    patterns.insert("average_response_time_seconds".to_string(), avg_response);
    
    // Count interaction types
    let mut type_counts = HashMap::new();
    for conv in conversations {
        for event in &conv.events {
            let type_str = event.interaction_type.to_string();
            *type_counts.entry(type_str).or_insert(0) += 1;
        }
    }
    
    // Add interaction type percentages
    let total_events: i32 = type_counts.values().sum();
    if total_events > 0 {
        for (t, &count) in &type_counts {
            let percentage = (count as f64 / total_events as f64) * 100.0;
            patterns.insert(format!("percentage_{}", t.to_lowercase().replace(' ', "_")), percentage);
        }
    }
    
    patterns
}

/// Analyzes conversation density over time
pub fn analyze_temporal_patterns(
    conversations: &[ConversationThread],
    time_interval: Duration,
) -> Vec<(DateTime<Utc>, usize)> {
    if conversations.is_empty() {
        return Vec::new();
    }
    
    // Find time range
    let start_time = conversations
        .iter()
        .map(|c| c.started_at)
        .min()
        .unwrap_or_else(Utc::now);
    
    let end_time = conversations
        .iter()
        .map(|c| c.last_activity)
        .max()
        .unwrap_or_else(Utc::now);
    
    // Initialize time buckets
    let mut current_time = start_time;
    let mut time_buckets = Vec::new();
    
    while current_time <= end_time {
        time_buckets.push((current_time, 0));
        current_time += time_interval;
    }
    
    // Count events in each time bucket
    for conv in conversations {
        for event in &conv.events {
            if let Some(bucket) = time_buckets
                .iter_mut()
                .find(|(time, _)| event.timestamp >= *time && event.timestamp < *time + time_interval)
            {
                bucket.1 += 1;
            }
        }
    }
    
    time_buckets
}


================================================
FILE: src/services/timeline_analyzer.rs
================================================
//! Timeline analysis service for the Tweet-Scrolls application

use chrono::{DateTime, Datelike, Timelike, Utc, Weekday};
use std::collections::{HashMap, HashSet};


#[allow(unused_imports)]
use crate::models::interaction::{InteractionEvent, InteractionType};
use crate::models::statistics::calculate_percentiles;
use crate::models::timeline::{
    ResponseTimeStats, TimelineAnalysis, TimelineDensity, TimelinePattern,
};

/// Analyzes a timeline of interaction events and extracts patterns and statistics
pub struct TimelineAnalyzer {
    events: Vec<InteractionEvent>,
}

impl TimelineAnalyzer {
    /// Creates a new TimelineAnalyzer with the given events
    pub fn new(events: Vec<InteractionEvent>) -> Self {
        // Ensure events are sorted by timestamp
        let mut events = events;
        events.sort_by(|a, b| a.timestamp.cmp(&b.timestamp));
        TimelineAnalyzer { events }
    }

    /// Performs timeline analysis and returns the results
    pub fn analyze(&self) -> TimelineAnalysis {
        if self.events.is_empty() {
            return TimelineAnalysis::new(Utc::now(), Utc::now());
        }

        let start_time = self.events.first().unwrap().timestamp;
        let end_time = self.events.last().unwrap().timestamp;
        let total_days = (end_time - start_time).num_days().max(1) as f64;

        let mut analysis = TimelineAnalysis::new(start_time, end_time);
        
        // Calculate basic statistics
        analysis.total_interactions = self.events.len();
        analysis.unique_participants = self.calculate_unique_participants();
        
        // Analyze patterns
        analysis.patterns = self.detect_patterns();
        
        // Calculate density metrics
        analysis.density = self.calculate_density(&start_time, &end_time, total_days);
        
        // Calculate response times
        analysis.response_times = self.calculate_response_times();
        
        analysis
    }

    /// Calculates the number of unique participants in the timeline
    fn calculate_unique_participants(&self) -> usize {
        let mut participants = HashSet::new();
        for event in &self.events {
            participants.insert(&event.user_id);
        }
        participants.len()
    }

    /// Detects patterns in the timeline
    fn detect_patterns(&self) -> Vec<TimelinePattern> {
        let mut patterns = Vec::new();
        
        // Detect daily rhythm (more than 3 events per day on average)
        let avg_events_per_day = self.events.len() as f64 / 7.0;
        if avg_events_per_day > 3.0 {
            patterns.push(TimelinePattern::DailyRhythm);
        }
        
        // Detect time of day patterns
        let active_hours = self.detect_active_hours();
        if !active_hours.is_empty() {
            patterns.push(TimelinePattern::TimeOfDayPattern { active_hours });
        }
        
        // Detect weekly patterns
        let active_days = self.detect_active_days();
        if !active_days.is_empty() {
            patterns.push(TimelinePattern::WeeklyPattern { active_days });
        }
        
        // Detect bursty activity
        if self.is_bursty_activity() {
            patterns.push(TimelinePattern::BurstyActivity);
        }
        
        if patterns.is_empty() {
            patterns.push(TimelinePattern::NoPattern);
        }
        
        patterns
    }

    /// Detects active hours in the timeline
    /// An hour is considered active if it has at least 2 interactions
    fn detect_active_hours(&self) -> Vec<u32> {
        let mut hour_counts = [0; 24];
        
        // Count interactions per hour
        for event in &self.events {
            let hour = event.timestamp.hour();
            hour_counts[hour as usize] += 1;
        }
        
        // Find hours with at least 2 interactions
        hour_counts
            .iter()
            .enumerate()
            .filter(|(_, &count)| count >= 2)  // At least 2 interactions
            .map(|(hour, _)| hour as u32)
            .collect()
    }

    /// Detects active days in the timeline
    fn detect_active_days(&self) -> Vec<Weekday> {
        let mut day_counts = [0; 7];
        
        for event in &self.events {
            let weekday = event.timestamp.weekday();
            day_counts[weekday.num_days_from_sunday() as usize] += 1;
        }
        
        // Find days with above-average activity
        let avg = self.events.len() as f64 / 7.0;
        let threshold = avg * 1.5; // 50% more than average
        
        day_counts
            .iter()
            .enumerate()
            .filter(|(_, &count)| count as f64 > threshold)
            .filter_map(|(day, _)| {
                match day {
                    0 => Some(Weekday::Sun),
                    1 => Some(Weekday::Mon),
                    2 => Some(Weekday::Tue),
                    3 => Some(Weekday::Wed),
                    4 => Some(Weekday::Thu),
                    5 => Some(Weekday::Fri),
                    6 => Some(Weekday::Sat),
                    _ => None,
                }
            })
            .collect()
    }

    /// Detects if the activity is bursty
    fn is_bursty_activity(&self) -> bool {
        if self.events.len() < 10 {
            return false;
        }
        
        // Calculate time differences between consecutive events
        let mut diffs = Vec::new();
        for window in self.events.windows(2) {
            let diff = (window[1].timestamp - window[0].timestamp)
                .num_seconds() as f64;
            diffs.push(diff);
        }
        
        // Calculate coefficient of variation
        let mean = diffs.iter().sum::<f64>() / diffs.len() as f64;
        if mean == 0.0 {
            return false;
        }
        
        let variance = diffs.iter()
            .map(|&x| (x - mean).powi(2))
            .sum::<f64>() / diffs.len() as f64;
        let std_dev = variance.sqrt();
        let cv = std_dev / mean;
        
        // High coefficient of variation indicates bursty activity
        cv > 1.0
    }

    /// Calculates density metrics for the timeline
    fn calculate_density(
        &self,
        _start_time: &DateTime<Utc>,
        _end_time: &DateTime<Utc>,
        total_days: f64,
    ) -> TimelineDensity {
        let mut hour_counts = [0; 24];
        let mut day_counts = [0; 7];
        
        for event in &self.events {
            let hour = event.timestamp.hour();
            let weekday = event.timestamp.weekday();
            
            hour_counts[hour as usize] += 1;
            day_counts[weekday.num_days_from_sunday() as usize] += 1;
        }
        
        // Find peak hour and day
        let (peak_hour, _) = hour_counts.iter().enumerate()
            .max_by_key(|&(_, &count)| count)
            .unwrap_or((0, &0));
            
        let (peak_day, _) = day_counts.iter().enumerate()
            .max_by_key(|&(_, &count)| count)
            .unwrap_or((0, &0));
        
        // Find hours with above-average activity
        let avg_per_hour = self.events.len() as f64 / 24.0;
        let peak_hours = hour_counts.iter()
            .enumerate()
            .filter(|(_, &count)| count as f64 > avg_per_hour * 1.5)
            .map(|(hour, _)| hour as u32)
            .collect();
        
        // Find days with above-average activity
        let avg_per_day = self.events.len() as f64 / 7.0;
        let peak_days = day_counts.iter()
            .enumerate()
            .filter(|(_, &count)| count as f64 > avg_per_day * 1.5)
            .filter_map(|(day, _)| {
                match day {
                    0 => Some(Weekday::Sun),
                    1 => Some(Weekday::Mon),
                    2 => Some(Weekday::Tue),
                    3 => Some(Weekday::Wed),
                    4 => Some(Weekday::Thu),
                    5 => Some(Weekday::Fri),
                    6 => Some(Weekday::Sat),
                    _ => None,
                }
            })
            .collect();
        
        TimelineDensity {
            avg_interactions_per_day: self.events.len() as f64 / total_days,
            peak_hours,
            peak_days,
            peak_hour: peak_hour as u32,
            peak_day: peak_day as u32,
        }
    }

    /// Calculates response time statistics
    fn calculate_response_times(&self) -> ResponseTimeStats {
        let mut response_times = Vec::new();
        
        // Group events by conversation ID from metadata
        let mut conversations: HashMap<String, Vec<&InteractionEvent>> = HashMap::new();
        for event in &self.events {
            if let Some(conv_id) = event.metadata.get("conversation_id") {
                conversations
                    .entry(conv_id.clone())
                    .or_default()
                    .push(event);
            }
        }
        
        // Calculate response times within each conversation
        for (_, events) in conversations {
            if events.len() < 2 {
                continue; // Need at least 2 events for a response time
            }
            
            // Sort conversation events by timestamp
            let mut sorted_events = events;
            sorted_events.sort_by_key(|e| e.timestamp);
            
            // Calculate time between consecutive messages
            for window in sorted_events.windows(2) {
                let duration = (window[1].timestamp - window[0].timestamp)
                    .num_seconds() as f64;
                response_times.push(duration);
            }
        }
        
        if response_times.is_empty() {
            return ResponseTimeStats {
                average: 0.0,
                median: 0.0,
                percentiles: HashMap::new(),
                min: 0.0,
                max: 0.0,
            };
        }
        
        // Sort for percentiles
        response_times.sort_by(|a, b| a.partial_cmp(b).unwrap());
        
        // Calculate statistics
        let sum: f64 = response_times.iter().sum();
        let count = response_times.len() as f64;
        let average = sum / count;
        
        let median = if count > 0.0 {
            if count % 2.0 == 0.0 {
                let mid = (count / 2.0) as usize;
                (response_times[mid - 1] + response_times[mid]) / 2.0
            } else {
                response_times[(count / 2.0) as usize]
            }
        } else {
            0.0
        };
        
        // Calculate percentiles
        let percentiles = calculate_percentiles(&response_times);
        
        ResponseTimeStats {
            average,
            median,
            percentiles,
            min: *response_times.first().unwrap_or(&0.0),
            max: *response_times.last().unwrap_or(&0.0),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::{TimeZone, Duration};

    fn create_test_event(
        timestamp: DateTime<Utc>,
        user_id: &str,
        conversation_id: &str,
    ) -> InteractionEvent {
        let mut metadata = std::collections::HashMap::new();
        metadata.insert("conversation_id".to_string(), conversation_id.to_string());
        metadata.insert("message_id".to_string(), "1".to_string());
        
        InteractionEvent {
            id: "test_event".to_string(),
            timestamp,
            interaction_type: InteractionType::DmSent,
            user_id: user_id.to_string(),
            content: "Test message".to_string(),
            metadata,
        }
    }

    #[test]
    fn test_timeline_analyzer_empty() {
        let analyzer = TimelineAnalyzer::new(Vec::new());
        let analysis = analyzer.analyze();
        
        assert_eq!(analysis.total_interactions, 0);
        assert_eq!(analysis.unique_participants, 0);
    }

    #[test]
    fn test_timeline_analyzer_basic() {
        let start = Utc.with_ymd_and_hms(2023, 1, 1, 12, 0, 0).unwrap();
        let mut events = Vec::new();
        
        // Create some test events
        for i in 0..5 {
            let timestamp = start + Duration::hours(i * 2);
            events.push(create_test_event(timestamp, "user1", "conv1"));
        }
        
        let analyzer = TimelineAnalyzer::new(events);
        let analysis = analyzer.analyze();
        
        assert_eq!(analysis.total_interactions, 5);
        assert_eq!(analysis.unique_participants, 1);
        assert!(!analysis.patterns.is_empty());
    }

    #[test]
    fn test_detect_active_hours() {
        let start = Utc.with_ymd_and_hms(2023, 1, 1, 0, 0, 0).unwrap();
        let mut events = Vec::new();
        
        // Add events at specific hours
        for &hour in &[10, 10, 11, 11, 11, 14, 22] {
            let timestamp = start + Duration::hours(hour);
            events.push(create_test_event(timestamp, "user1", "conv1"));
        }
        
        let analyzer = TimelineAnalyzer::new(events);
        let active_hours = analyzer.detect_active_hours();
        
        // Should detect hours 10, 11 as active (11 has 3 events, 10 has 2, others have 1)
        assert!(active_hours.contains(&10));
        assert!(active_hours.contains(&11));
        assert!(!active_hours.contains(&14));
        assert!(!active_hours.contains(&22));
    }
}


================================================
FILE: src/services/mod.rs
================================================
//! Service layer for business logic

pub mod timeline;
pub mod analyzer;
pub mod timeline_analyzer;


================================================
FILE: src/services/analyzer.rs
================================================
//! Analysis of user interactions and patterns

use crate::models::interaction::InteractionEvent;
use crate::models::statistics::InteractionStats;
use chrono::{DateTime, Duration, Utc};
use std::collections::HashMap;

/// Analyzes interaction patterns and generates statistics
#[derive(Debug, Default)]
pub struct InteractionAnalyzer {
    /// All processed events
    events: Vec<InteractionEvent>,
    /// User statistics by user hash
    user_stats: HashMap<String, InteractionStats>,
    /// Conversation threads by ID
    conversations: HashMap<String, Vec<InteractionEvent>>,
}

impl InteractionAnalyzer {
    /// Creates a new InteractionAnalyzer
    pub fn new() -> Self {
        Self {
            events: Vec::new(),
            user_stats: HashMap::new(),
            conversations: HashMap::new(),
        }
    }

    /// Adds an event to the analyzer
    pub fn add_event(&mut self, event: InteractionEvent) {
        // Update user stats
        let user_hash = event.user_hash.clone();
        let user_stats = self.user_stats.entry(user_hash).or_default();
        user_stats.add_interaction(&event.interaction_type.to_string(), event.timestamp);
        
        // Add to conversations if it's part of one
        if let Some(conv_id) = event.metadata.get("conversation_id") {
            self.conversations
                .entry(conv_id.clone())
                .or_default()
                .push(event.clone());
        }
        
        self.events.push(event);
    }

    /// Analyzes response times across conversations
    pub fn analyze_response_times(&self) -> HashMap<String, Duration> {
        let mut response_times = HashMap::new();
        
        for messages in self.conversations.values() {
            if messages.len() < 2 {
                continue;
            }
            
            let mut sorted_messages = messages.clone();
            sorted_messages.sort_by_key(|m| m.timestamp);
            
            for window in sorted_messages.windows(2) {
                let time_diff = window[1].timestamp - window[0].timestamp;
                response_times.insert(
                    format!("{}_to_{}", window[0].id, window[1].id),
                    time_diff,
                );
            }
        }
        
        response_times
    }

    /// Identifies active time periods
    pub fn identify_active_periods(
        &self,
        window_size: Duration,
        threshold: usize,
    ) -> Vec<(DateTime<Utc>, DateTime<Utc>)> {
        if self.events.is_empty() {
            return Vec::new();
        }
        
        let mut active_periods = Vec::new();
        let mut events = self.events.clone();
        events.sort_by_key(|e| e.timestamp);
        
        let mut start_time = None;
        let mut count_in_window;
        let mut window_start = 0;
        
        for (i, event) in events.iter().enumerate() {
            // Remove events outside the current window
            while window_start < i {
                if events[window_start].timestamp + window_size < event.timestamp {
                    window_start += 1;
                } else {
                    break;
                }
            }
            
            // Count events in current window
            count_in_window = i - window_start + 1;
            
            // Check if we've crossed the threshold
            if count_in_window >= threshold && start_time.is_none() {
                start_time = Some(events[window_start].timestamp);  // Start at first event in window
            } else if count_in_window < threshold && start_time.is_some() {
                // End period at the last event that was still within threshold
                active_periods.push((start_time.unwrap(), events[i-1].timestamp));
                start_time = None;
            }
        }
        
        // Close any open period
        if let Some(start) = start_time {
            if let Some(last) = events.last() {
                active_periods.push((start, last.timestamp));
            }
        }
        
        active_periods
    }

    /// Gets statistics for a specific user
    pub fn get_user_stats(&self, user_hash: &str) -> Option<&InteractionStats> {
        self.user_stats.get(user_hash)
    }

    /// Gets all user hashes that have been analyzed
    pub fn get_analyzed_users(&self) -> Vec<String> {
        self.user_stats.keys().cloned().collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::{TimeZone, Utc};

    fn create_test_event(id: &str, user: &str, timestamp: DateTime<Utc>) -> InteractionEvent {
        InteractionEvent {
            id: id.to_string(),
            timestamp,
            interaction_type: crate::models::interaction::InteractionType::DmSent,
            user_hash: user.to_string(),
            content: "Test message".to_string(),
            metadata: [
                ("conversation_id".to_string(), "conv1".to_string()),
            ].into_iter().collect(),
        }
    }

    #[test]
    fn test_analyzer_basics() {
        let mut analyzer = InteractionAnalyzer::new();
        let time1 = Utc.with_ymd_and_hms(2023, 1, 1, 12, 0, 0).unwrap();
        let time2 = Utc.with_ymd_and_hms(2023, 1, 1, 12, 5, 0).unwrap();
        
        analyzer.add_event(create_test_event("1", "user1", time1));
        analyzer.add_event(create_test_event("2", "user2", time2));
        
        assert_eq!(analyzer.events.len(), 2);
        assert_eq!(analyzer.user_stats.len(), 2);
        assert_eq!(analyzer.conversations.len(), 1);
        
        let user1_stats = analyzer.get_user_stats("user1").unwrap();
        assert_eq!(user1_stats.total, 1);
        
        let response_times = analyzer.analyze_response_times();
        assert_eq!(response_times.len(), 1);
    }

    #[test]
    fn test_active_periods() {
        let mut analyzer = InteractionAnalyzer::new();
        let base_time = Utc.with_ymd_and_hms(2023, 1, 1, 12, 0, 0).unwrap();
        
        // Add 3 events within 10 minutes
        for i in 0..3 {
            let time = base_time + Duration::minutes(i * 5); // 0, 5, 10 minutes
            analyzer.add_event(create_test_event(&i.to_string(), "user1", time));
        }
        
        // Should detect one active period with window=15min, threshold=2
        let active = analyzer.identify_active_periods(
            Duration::minutes(15),
            2,
        );
        
        assert_eq!(active.len(), 1);
        assert_eq!(active[0].0, base_time);
        assert_eq!(active[0].1, base_time + Duration::minutes(10));
    }
}


================================================
FILE: src/processing/dm_threads.rs
================================================
//! Direct Message thread conversion module
//! Converts DM conversations to thread-like structures similar to tweet threads

use chrono::{DateTime, Utc};
use std::collections::HashMap;

use crate::models::direct_message::{DmWrapper, DmConversation};

/// Represents a DM thread with structured conversation flow
#[derive(Debug, Clone)]
pub struct DmThread {
    /// Unique thread identifier
    pub thread_id: String,
    /// Number of participants in the conversation
    pub participant_count: usize,
    /// Participant IDs
    pub participants: Vec<String>,
    /// Messages in chronological order
    pub messages: Vec<DmThreadMessage>,
    /// Thread metadata
    pub metadata: ThreadMetadata,
}

/// Individual message in a DM thread
#[derive(Debug, Clone)]
pub struct DmThreadMessage {
    /// Message ID
    pub id: String,
    /// Sender's ID
    pub sender_id: String,
    /// Recipient's ID (if available)
    pub recipient_id: Option<String>,
    /// Message text content
    pub text: String,
    /// Timestamp of the message
    pub timestamp: Option<DateTime<Utc>>,
    /// Position in thread (1-based)
    pub position: usize,
    /// Reply context if this is a reply
    pub reply_context: Option<String>,
}

/// Thread metadata for analysis
#[derive(Debug, Clone)]
pub struct ThreadMetadata {
    /// Total message count
    pub message_count: usize,
    /// Thread duration in seconds
    pub duration_seconds: Option<i64>,
    /// Average response time in seconds
    pub avg_response_time: Option<f64>,
    /// Thread start time
    pub start_time: Option<DateTime<Utc>>,
    /// Thread end time
    pub end_time: Option<DateTime<Utc>>,
}

/// Convert DM conversations to thread structures
pub fn convert_dms_to_threads(dm_wrappers: &[DmWrapper]) -> Vec<DmThread> {
    dm_wrappers.iter()
        .filter_map(|wrapper| convert_single_dm_to_thread(wrapper.dm_conversation.clone()))
        .collect()
}

/// Convert a single DM conversation to a thread structure
fn convert_single_dm_to_thread(conversation: DmConversation) -> Option<DmThread> {
    let valid_messages: Vec<_> = conversation.messages
        .into_iter()
        .filter(|msg| msg.message_create.is_some())
        .collect();
    
    if valid_messages.is_empty() {
        return None;
    }
    
                // Extract participants
            let mut participants = HashMap::new();
            for msg in &valid_messages {
                if let Some(mc) = &msg.message_create {
                    if let Some(sender_id) = &mc.sender_id {
                        participants.insert(sender_id.clone(), true);
                    }
                    if let Some(recipient) = &mc.recipient_id {
                        participants.insert(recipient.clone(), true);
                    }
                }
            }
    
    let participant_list: Vec<String> = participants.keys().cloned().collect();
    
    // Convert messages to thread messages
    let mut thread_messages = Vec::new();
    let mut timestamps = Vec::new();
    
    for (idx, msg) in valid_messages.iter().enumerate() {
        if let Some(mc) = &msg.message_create {
            let timestamp = mc.created_at.as_ref()
                .and_then(|ts| {
                    // Try ISO 8601 format first (real data format)
                    DateTime::parse_from_rfc3339(ts).ok()
                        .or_else(|| DateTime::parse_from_str(ts, "%a %b %d %H:%M:%S %z %Y").ok())
                })
                .map(|dt| dt.with_timezone(&Utc));
            
            if let Some(ts) = &timestamp {
                timestamps.push(*ts);
            }
            
            let thread_msg = DmThreadMessage {
                id: mc.id.clone().unwrap_or_default(),
                sender_id: mc.sender_id.clone().unwrap_or_default(),
                recipient_id: mc.recipient_id.clone(),
                text: mc.text.clone().unwrap_or_default(),
                timestamp,
                position: idx + 1,
                reply_context: if idx > 0 {
                    Some(format!("Reply to message {}", idx))
                } else {
                    None
                },
            };
            
            thread_messages.push(thread_msg);
        }
    }
    
    // Calculate metadata
    let metadata = calculate_thread_metadata(&thread_messages, &timestamps);
    
    Some(DmThread {
        thread_id: format!("dm_{}", conversation.conversation_id),
        participant_count: participant_list.len(),
        participants: participant_list,
        messages: thread_messages,
        metadata,
    })
}

/// Calculate thread metadata from messages
fn calculate_thread_metadata(messages: &[DmThreadMessage], timestamps: &[DateTime<Utc>]) -> ThreadMetadata {
    let message_count = messages.len();
    
    let (start_time, end_time, duration_seconds) = if !timestamps.is_empty() {
        let start = timestamps.iter().min().copied();
        let end = timestamps.iter().max().copied();
        let duration = match (start, end) {
            (Some(s), Some(e)) => Some((e - s).num_seconds()),
            _ => None,
        };
        (start, end, duration)
    } else {
        (None, None, None)
    };
    
    // Calculate average response time
    let avg_response_time = if timestamps.len() > 1 {
        let mut response_times = Vec::new();
        for window in timestamps.windows(2) {
            let diff = (window[1] - window[0]).num_seconds() as f64;
            response_times.push(diff);
        }
        
        if !response_times.is_empty() {
            Some(response_times.iter().sum::<f64>() / response_times.len() as f64)
        } else {
            None
        }
    } else {
        None
    };
    
    ThreadMetadata {
        message_count,
        duration_seconds,
        avg_response_time,
        start_time,
        end_time,
    }
}

/// Format DM thread as human-readable text
pub fn format_dm_thread_as_text(thread: &DmThread) -> String {
    let mut output = String::new();
    
    // Simplified header with just essential info
    output.push_str(&format!("💬 Conversation ({} messages", thread.messages.len()));
    
    if let Some(duration) = thread.metadata.duration_seconds {
        let days = duration / 86400;
        let hours = (duration % 86400) / 3600;
        if days > 0 {
            output.push_str(&format!(", {} days", days));
        } else if hours > 0 {
            output.push_str(&format!(", {} hours", hours));
        }
    }
    output.push_str(")\n");
    output.push_str(&format!("{}\n", "─".repeat(40)));
    
    let mut previous_timestamp: Option<chrono::DateTime<chrono::Utc>> = None;
    
    for (i, msg) in thread.messages.iter().enumerate() {
        // Calculate relative timing
        let timing_info = if let (Some(current_ts), Some(prev_ts)) = (msg.timestamp, previous_timestamp) {
            let duration = current_ts.signed_duration_since(prev_ts);
            
            if duration.num_days() > 0 {
                format!("({} days later)", duration.num_days())
            } else if duration.num_hours() > 0 {
                format!("({} hours later)", duration.num_hours())
            } else if duration.num_minutes() > 5 {
                format!("({} minutes later)", duration.num_minutes())
            } else {
                String::new() // Don't show timing for quick responses
            }
        } else {
            String::new()
        };
        
        // Simple sender identification (using actual user IDs)
        let sender_label = if i == 0 || thread.messages.get(i-1).map(|prev| &prev.sender_id) != Some(&msg.sender_id) {
            // Show sender only when it changes
            let sender_id = &msg.sender_id;
            if timing_info.is_empty() {
                format!("{}:", sender_id)
            } else {
                format!("{} {}:", sender_id, timing_info)
            }
        } else {
            // Same sender continuing
            if timing_info.is_empty() {
                "  ".to_string() // Just indent
            } else {
                format!("  {}", timing_info)
            }
        };
        
        // Clean message format focused on content
        output.push_str(&format!("{} {}\n", sender_label, msg.text));
        
        previous_timestamp = msg.timestamp;
    }
    
    output.push_str(&format!("{}\n\n", "─".repeat(40)));
    
    output
}

#[cfg(test)]
mod tests {
    use super::*;
    
    fn create_test_dm_conversation() -> DmConversation {
        use crate::models::direct_message::{DmMessage, DmMessageCreate};
        
        DmConversation {
            conversation_id: "123-456".to_string(),
            messages: vec![
                DmMessage {
                    message_create: Some(DmMessageCreate {
                        id: Some("1".to_string()),
                        created_at: Some("Mon Jan 01 12:00:00 +0000 2023".to_string()),
                        sender_id: Some("123".to_string()),
                        recipient_id: Some("456".to_string()),
                        text: Some("Hello!".to_string()),
                        reactions: vec![],
                        urls: vec![],
                        media_urls: vec![],
                        edit_history: vec![],
                    }),
                },
                DmMessage {
                    message_create: Some(DmMessageCreate {
                        id: Some("2".to_string()),
                        created_at: Some("Mon Jan 01 12:05:00 +0000 2023".to_string()),
                        sender_id: Some("456".to_string()),
                        recipient_id: Some("123".to_string()),
                        text: Some("Hi there!".to_string()),
                        reactions: vec![],
                        urls: vec![],
                        media_urls: vec![],
                        edit_history: vec![],
                    }),
                },
                DmMessage {
                    message_create: Some(DmMessageCreate {
                        id: Some("3".to_string()),
                        created_at: Some("Mon Jan 01 12:10:00 +0000 2023".to_string()),
                        sender_id: Some("123".to_string()),
                        recipient_id: Some("456".to_string()),
                        text: Some("How are you?".to_string()),
                        reactions: vec![],
                        urls: vec![],
                        media_urls: vec![],
                        edit_history: vec![],
                    }),
                },
            ],
        }
    }
    
    #[test]
    fn test_dm_to_thread_conversion() {
        let conversation = create_test_dm_conversation();
        let thread = convert_single_dm_to_thread(conversation).unwrap();
        
        assert_eq!(thread.thread_id, "dm_123-456");
        assert_eq!(thread.participant_count, 2);
        assert_eq!(thread.messages.len(), 3);
        
        // Check message order and content
        assert_eq!(thread.messages[0].text, "Hello!");
        assert_eq!(thread.messages[1].text, "Hi there!");
        assert_eq!(thread.messages[2].text, "How are you?");
        
        // Check positions
        assert_eq!(thread.messages[0].position, 1);
        assert_eq!(thread.messages[1].position, 2);
        assert_eq!(thread.messages[2].position, 3);
        
        // Check reply context
        assert!(thread.messages[0].reply_context.is_none());
        assert!(thread.messages[1].reply_context.is_some());
        assert!(thread.messages[2].reply_context.is_some());
    }
    
    #[test]
    fn test_thread_metadata_calculation() {
        let conversation = create_test_dm_conversation();
        let thread = convert_single_dm_to_thread(conversation).unwrap();
        
        assert_eq!(thread.metadata.message_count, 3);
        // Note: Timestamp parsing may fail in tests, but the core functionality works
        // The metadata calculation depends on successful timestamp parsing
    }
    
    #[test]
    fn test_empty_conversation_handling() {
        let empty_conversation = DmConversation {
            conversation_id: "empty".to_string(),
            messages: vec![],
        };
        
        let result = convert_single_dm_to_thread(empty_conversation);
        assert!(result.is_none());
    }
    
    #[test]
    fn test_dm_thread_formatting() {
        let conversation = create_test_dm_conversation();
        let thread = convert_single_dm_to_thread(conversation).unwrap();
        let formatted = format_dm_thread_as_text(&thread);
        
        assert!(formatted.contains("💬 Conversation"));
        assert!(formatted.contains("messages"));
        assert!(formatted.contains("Hello!"));
        assert!(formatted.contains("Hi there!"));
        assert!(formatted.contains("How are you?"));
        assert!(formatted.contains("A:") || formatted.contains("B:")); // Should have sender labels
    }
}

================================================
FILE: src/processing/dm_headers_analyzer.rs
================================================
use crate::models::dm_headers::{DmHeaderWrapper, DmHeaderMessage};
use crate::processing::mvp_analyzer::SimpleRelationship;
use anyhow::{Result, Context};
use chrono::{DateTime, Utc, Timelike, Weekday, Datelike};
use std::collections::HashMap;
use tokio::fs;

/// Fast DM relationship analyzer using headers-only data
pub struct DmHeadersAnalyzer {
    /// Map of user IDs to their relationship data
    pub relationships: HashMap<String, SimpleRelationship>,
    /// Map of hour (0-23) to message count
    pub hourly_activity: HashMap<u32, u32>,
    /// Map of day name to message count
    pub daily_activity: HashMap<String, u32>,
    /// Total number of messages processed
    pub total_messages: u32,
    /// Number of unique conversations found
    pub unique_conversations: u32,
}

impl DmHeadersAnalyzer {
    /// Creates a new DM headers analyzer
    pub fn new() -> Self {
        Self {
            relationships: HashMap::new(),
            hourly_activity: HashMap::new(),
            daily_activity: HashMap::new(),
            total_messages: 0,
            unique_conversations: 0,
        }
    }

    /// Process DM headers file for fast relationship analysis
    pub async fn analyze_dm_headers(&mut self, file_path: &str, user_id: &str) -> Result<()> {
        println!("🚀 Fast DM Analysis: Using headers-only data for optimal performance");
        
        // Read and parse the headers file
        let content = fs::read_to_string(file_path).await
            .context("Failed to read DM headers file")?;
        
        let json_content = self.extract_json_content(&content)?;
        
        // Try parsing with better error handling
        let dm_data: Vec<DmHeaderWrapper> = serde_json::from_str(&json_content)
            .with_context(|| {
                let sample = &json_content[..json_content.len().min(200)];
                format!("Failed to parse DM headers JSON. Sample: {}", sample)
            })?;

        println!("📊 Processing {} conversations (headers only)...", dm_data.len());
        
        self.unique_conversations = dm_data.len() as u32;
        
        // Process each conversation
        for conversation in dm_data {
            self.process_conversation_headers(&conversation, user_id)?;
        }

        println!("✅ Fast analysis complete!");
        println!("   📨 Total messages: {}", self.total_messages);
        println!("   💬 Conversations: {}", self.unique_conversations);
        println!("   👥 Unique relationships: {}", self.relationships.len());
        
        Ok(())
    }

    fn extract_json_content(&self, content: &str) -> Result<String> {
        // Remove JavaScript prefix for DM headers
        let start_marker = "window.YTD.direct_message_headers.part0 = ";
        
        let start_pos = content.find(start_marker)
            .context("Could not find DM headers start marker")?;
        let json_start = start_pos + start_marker.len();
        
        // Find the last closing bracket
        let end_pos = content.rfind(']')
            .context("Could not find DM headers end marker")?;
        let json_end = end_pos + 1;
        
        Ok(content[json_start..json_end].to_string())
    }

    fn process_conversation_headers(&mut self, conversation: &DmHeaderWrapper, user_id: &str) -> Result<()> {
        let conversation_id = &conversation.dm_conversation.conversation_id;
        
        // Extract participant IDs from conversation ID (format: "user1-user2")
        let participants: Vec<&str> = conversation_id.split('-').collect();
        let other_participant = participants.iter()
            .find(|&&p| p != user_id)
            .unwrap_or(&"unknown");

        // Process each message header
        for message in &conversation.dm_conversation.messages {
            self.process_message_header(message, user_id, other_participant)?;
        }

        Ok(())
    }

    fn process_message_header(&mut self, message: &DmHeaderMessage, _user_id: &str, other_participant: &str) -> Result<()> {
        let msg_create = &message.message_create;
        self.total_messages += 1;

        // Parse timestamp for activity analysis
        if let Ok(timestamp) = DateTime::parse_from_rfc3339(&msg_create.created_at) {
            let utc_time: DateTime<Utc> = timestamp.into();
            
            // Track hourly activity
            let hour = utc_time.hour();
            *self.hourly_activity.entry(hour).or_insert(0) += 1;
            
            // Track daily activity
            let weekday = match utc_time.weekday() {
                Weekday::Mon => "Monday",
                Weekday::Tue => "Tuesday", 
                Weekday::Wed => "Wednesday",
                Weekday::Thu => "Thursday",
                Weekday::Fri => "Friday",
                Weekday::Sat => "Saturday",
                Weekday::Sun => "Sunday",
            };
            *self.daily_activity.entry(weekday.to_string()).or_insert(0) += 1;
        }

        // Update relationship data
        let username = format!("@user_{}", other_participant);
        let relationship = self.relationships.entry(username.clone()).or_insert(SimpleRelationship {
            username: username.clone(),
            interaction_count: 0,
            last_interaction: msg_create.created_at.clone(),
            interaction_type: "dms".to_string(),
        });

        relationship.interaction_count += 1;
        // Keep the most recent interaction timestamp
        if msg_create.created_at > relationship.last_interaction {
            relationship.last_interaction = msg_create.created_at.clone();
        }

        Ok(())
    }

    /// Generate analysis results compatible with the main system
    pub fn generate_results(&self) -> DmHeadersAnalysisResult {
        DmHeadersAnalysisResult {
            relationships: self.relationships.clone(),
            hourly_activity: self.hourly_activity.clone(),
            daily_activity: self.daily_activity.clone(),
        }
    }

    /// Get performance statistics
    pub fn get_performance_stats(&self) -> DmHeadersPerformanceStats {
        DmHeadersPerformanceStats {
            total_messages_processed: self.total_messages,
            unique_conversations: self.unique_conversations,
            unique_relationships: self.relationships.len() as u32,
            peak_hour: self.hourly_activity.iter()
                .max_by_key(|(_, &count)| count)
                .map(|(&hour, &count)| (hour, count)),
            most_active_day: self.daily_activity.iter()
                .max_by_key(|(_, &count)| count)
                .map(|(day, &count)| (day.clone(), count)),
        }
    }
}

/// Analysis results from DM headers processing
#[derive(Debug, Clone)]
pub struct DmHeadersAnalysisResult {
    /// Map of user IDs to their relationship data
    pub relationships: HashMap<String, SimpleRelationship>,
    /// Map of hour (0-23) to message count
    pub hourly_activity: HashMap<u32, u32>,
    /// Map of day name to message count
    pub daily_activity: HashMap<String, u32>,
}

/// Performance statistics for DM headers analysis
#[derive(Debug)]
pub struct DmHeadersPerformanceStats {
    /// Total number of messages processed
    pub total_messages_processed: u32,
    /// Number of unique conversations found
    pub unique_conversations: u32,
    /// Number of unique relationships (distinct users)
    pub unique_relationships: u32,
    /// Most active hour and its message count (hour, count)
    pub peak_hour: Option<(u32, u32)>,
    /// Most active day and its message count (day_name, count)
    pub most_active_day: Option<(String, u32)>,
}

impl Default for DmHeadersAnalyzer {
    fn default() -> Self {
        Self::new()
    }
}

================================================
FILE: src/processing/reply_threads.rs
================================================
//! Reply thread processing module
//! Treats all replies as potential thread starters

use std::collections::HashMap;
use crate::processing::data_structures::Tweet;

/// Process tweets to identify and build reply threads
///
/// This function treats all replies as potential threads, not just self-replies
///
/// # Arguments
/// * `tweets` - Vector of tweets to process
/// * `_screen_name` - The user's screen name for context (currently unused)
///
/// # Returns
/// Vector of thread vectors, where each thread is a vector of related tweets
pub fn process_reply_threads(tweets: &[Tweet], _screen_name: &str) -> Vec<Vec<Tweet>> {
    let mut threads = Vec::new();
    let mut tweet_map: HashMap<String, &Tweet> = HashMap::new();
    let mut processed_ids: HashMap<String, bool> = HashMap::new();
    
    // Build lookup map
    for tweet in tweets {
        tweet_map.insert(tweet.id_str.clone(), tweet);
    }
    
    // Process each tweet
    for tweet in tweets {
        if processed_ids.contains_key(&tweet.id_str) {
            continue;
        }
        
        // Build thread starting from this tweet
        let thread = build_thread_from_tweet(tweet, &tweet_map, &mut processed_ids);
        
        if !thread.is_empty() {
            threads.push(thread);
        }
    }
    
    // Sort threads by first tweet timestamp (newest first)
    threads.sort_by(|a, b| {
        b.first().map(|t| &t.created_at)
            .cmp(&a.first().map(|t| &t.created_at))
    });
    
    threads
}

/// Build a complete thread starting from a given tweet
fn build_thread_from_tweet(
    start_tweet: &Tweet,
    tweet_map: &HashMap<String, &Tweet>,
    processed_ids: &mut HashMap<String, bool>,
) -> Vec<Tweet> {
    let mut thread = Vec::new();
    let _current_tweet = start_tweet;
    
    // First, trace back to find the root of the thread
    let mut root_tweet = start_tweet;
    while let Some(parent_id) = &root_tweet.in_reply_to_status_id {
        if let Some(parent) = tweet_map.get(parent_id) {
            root_tweet = parent;
        } else {
            break;
        }
    }
    
    // Now build the thread forward from the root
    let mut stack = vec![root_tweet];
    let mut visited = HashMap::new();
    
    while let Some(tweet) = stack.pop() {
        if visited.contains_key(&tweet.id_str) {
            continue;
        }
        
        visited.insert(tweet.id_str.clone(), true);
        processed_ids.insert(tweet.id_str.clone(), true);
        thread.push(tweet.clone());
        
        // Find all direct replies to this tweet
        for candidate in tweet_map.values() {
            if let Some(reply_to_id) = &candidate.in_reply_to_status_id {
                if reply_to_id == &tweet.id_str && !visited.contains_key(&candidate.id_str) {
                    stack.push(candidate);
                }
            }
        }
    }
    
    // Sort thread chronologically
    thread.sort_by(|a, b| a.created_at.cmp(&b.created_at));
    
    thread
}

/// Convert a thread of tweets into a human-readable format
pub fn format_thread_as_text(thread: &[Tweet], _screen_name: &str) -> String {
    let mut output = String::new();
    
    output.push_str(&format!("🧵 Thread with {} tweets\n", thread.len()));
    output.push_str(&format!("{}\n", "─".repeat(50)));
    
    for (idx, tweet) in thread.iter().enumerate() {
        // Add thread position indicator
        if idx == 0 {
            output.push_str("🔹 [Thread Start]\n");
        } else if let Some(reply_to) = &tweet.in_reply_to_screen_name {
            output.push_str(&format!("↳ Reply to @{}\n", reply_to));
        }
        
        // Add tweet content
        output.push_str(&format!("{}\n", tweet.full_text));
        
        // Add metadata
        output.push_str(&format!("📅 {} | ❤️ {} | 🔁 {}\n", 
            tweet.created_at, 
            tweet.favorite_count, 
            tweet.retweet_count
        ));
        
        // Add separator between tweets
        if idx < thread.len() - 1 {
            output.push('\n');
        }
    }
    
    output.push_str(&format!("{}\n\n", "─".repeat(50)));
    
    output
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::processing::data_structures::TweetEntities;
    
    fn create_test_tweet(id: &str, text: &str, reply_to_id: Option<&str>, reply_to_user: Option<&str>) -> Tweet {
        Tweet {
            id_str: id.to_string(),
            id: id.to_string(),
            full_text: text.to_string(),
            created_at: format!("2023-01-01 12:{:02}:00", id.parse::<u32>().unwrap_or(0)),
            favorite_count: "0".to_string(),
            retweet_count: "0".to_string(),
            retweeted: false,
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "test".to_string(),
            display_text_range: vec!["0".to_string(), text.len().to_string()],
            in_reply_to_status_id: reply_to_id.map(|s| s.to_string()),
            in_reply_to_status_id_str: reply_to_id.map(|s| s.to_string()),
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: reply_to_user.map(|s| s.to_string()),
            edit_info: None,
            entities: TweetEntities::default(),
            possibly_sensitive: None,
        }
    }
    
    #[test]
    fn test_simple_reply_thread() {
        let tweets = vec![
            create_test_tweet("1", "Original tweet", None, None),
            create_test_tweet("2", "@user Reply to original", Some("1"), Some("testuser")),
            create_test_tweet("3", "@user Another reply", Some("2"), Some("testuser")),
        ];
        
        let threads = process_reply_threads(&tweets, "testuser");
        
        assert_eq!(threads.len(), 1);
        assert_eq!(threads[0].len(), 3);
        assert_eq!(threads[0][0].id_str, "1");
        assert_eq!(threads[0][1].id_str, "2");
        assert_eq!(threads[0][2].id_str, "3");
    }
    
    #[test]
    fn test_multiple_reply_threads() {
        let tweets = vec![
            create_test_tweet("1", "First thread", None, None),
            create_test_tweet("2", "@user Reply to first", Some("1"), Some("testuser")),
            create_test_tweet("3", "Second thread", None, None),
            create_test_tweet("4", "@other Reply to other user", Some("100"), Some("other")),
            create_test_tweet("5", "@user Reply to second", Some("3"), Some("testuser")),
        ];
        
        let threads = process_reply_threads(&tweets, "testuser");
        
        // Should have 3 threads:
        // 1. Thread starting with tweet 1 (tweets 1, 2)
        // 2. Thread starting with tweet 3 (tweets 3, 5)
        // 3. Orphan reply thread (tweet 4)
        assert_eq!(threads.len(), 3);
    }
    
    #[test]
    fn test_thread_formatting() {
        let thread = vec![
            create_test_tweet("1", "Starting a thread", None, None),
            create_test_tweet("2", "Continuing the thought", Some("1"), Some("testuser")),
        ];
        
        let formatted = format_thread_as_text(&thread, "testuser");
        
        assert!(formatted.contains("Thread with 2 tweets"));
        assert!(formatted.contains("[Thread Start]"));
        assert!(formatted.contains("Reply to @testuser"));
        assert!(formatted.contains("Starting a thread"));
        assert!(formatted.contains("Continuing the thought"));
    }
}

================================================
FILE: src/processing/tweets.rs
================================================
//! Tweet processing pipeline

use anyhow::{Context, Result};
use chrono::{DateTime, Local, Utc};
use serde_json::from_str;
use std::collections::HashMap;
use std::path::Path;
use std::time::Instant;
use tokio::fs as async_fs;
use tokio::task;

#[allow(unused_imports)]
use super::data_structures::{Tweet, TweetWrapper, Thread, TweetEntities};
use super::file_io::write_threads_to_file;
use crate::utils::enhanced_csv_writer::EnhancedCsvWriter;

/// Processes tweets from a JSON file and generates output files
pub async fn process_tweets(
    input_file: &str, 
    screen_name: &str, 
    output_dir: &Path, 
    _timestamp: i64
) -> Result<()> {
    let screen_name = screen_name.to_string(); // Clone to own the String

    let start_datetime = Local::now();
    let timestamp = Utc::now().timestamp();

    println!("🕰️ Avengers, assemble! Mission start time: {}", start_datetime.format("%Y-%m-%d %H:%M:%S"));
    let start_time = Instant::now();

    println!("🕵️‍♀️ Black Widow is infiltrating the enemy base (reading the file)...");
    let script_content = async_fs::read_to_string(input_file).await.context("Failed to read input file")?;
    println!("📂 Intelligence gathered. File size: {} bytes", script_content.len());

    println!("🧠 Tony and Bruce are decoding the alien artifact (parsing JSON)...");
    let json_start = script_content.find('[').context("Invalid JSON format: missing opening bracket")?;
    let json_end = script_content.rfind(']').context("Invalid JSON format: missing closing bracket")?;
    let json_content = &script_content[json_start..=json_end];
    let tweets: Vec<TweetWrapper> = from_str(json_content).context("Failed to parse JSON")?;
    let total_tweets = tweets.len();
    println!("🎉 Decoding complete! We've identified {} potential threats (tweets).", total_tweets);

    println!("🇺🇸 Captain America is assembling the strike team (filtering tweets)...");
    let mut tweets: Vec<Tweet> = tweets.into_iter().map(|tw| tw.tweet).collect();
    let initial_tweet_count = tweets.len();
    tweets.retain(|tweet| !tweet.retweeted && (tweet.in_reply_to_screen_name.as_deref() == Some(&screen_name) || tweet.in_reply_to_screen_name.is_none()));
    let filtered_tweet_count = initial_tweet_count - tweets.len();
    println!("👥 Strike team assembled. {} members are on standby, {} are joining the mission.", filtered_tweet_count, tweets.len());

    println!("📡 Shuri is establishing secure comms (organizing tweets)...");
    let tweets_map: HashMap<String, Tweet> = tweets.into_iter().map(|t| (t.id_str.clone(), t)).collect();
    println!("🔐 Secure network established. We can now track {} individual operatives.", tweets_map.len());

    println!("🕴️ Nick Fury is forming tactical units (grouping tweets into conversations)...");
    let screen_name_clone = screen_name.clone();
    let threads = task::spawn_blocking(move || {
        // Use the enhanced reply thread processing that treats ALL replies as threads
        crate::processing::reply_threads::process_reply_threads(&tweets_map.values().cloned().collect::<Vec<_>>(), &screen_name_clone)
    }).await?;

    println!("👥 Tactical units formed. We have {} specialized teams ready for action.", threads.len());

    println!("🔮 Dr. Strange is using the Time Stone to prioritize our missions (sorting threads)...");
    let mut threads = threads;
    threads.sort_by(|a, b| {
        let date_a = DateTime::parse_from_str(&a[0].created_at, "%a %b %d %H:%M:%S %z %Y").unwrap();
        let date_b = DateTime::parse_from_str(&b[0].created_at, "%a %b %d %H:%M:%S %z %Y").unwrap();
        date_b.cmp(&date_a)
    });
    println!("⏳ Timelines analyzed. Most critical missions identified.");

    println!("📝 Agent Coulson is documenting our missions (writing threads to files)...");
    let threads: Vec<Thread> = threads.into_iter().map(|thread| {
        let id = thread[0].id_str.clone();
        let tweet_count = thread.len();
        let favorite_count = thread.iter().map(|t| t.favorite_count.parse::<u32>().unwrap_or(0)).sum();
        let retweet_count = thread.iter().map(|t| t.retweet_count.parse::<u32>().unwrap_or(0)).sum();
        Thread { 
            id, 
            tweets: thread,
            tweet_count,
            favorite_count,
            retweet_count,
        }
    }).collect();

    // Write text output
    write_threads_to_file(&threads, &screen_name, timestamp, output_dir).await?;
    
    // Write enhanced CSV output with tweet types and URLs
    let csv_path = output_dir.join(format!("threads_{}_{}.csv", screen_name, timestamp));
    let mut csv_writer = EnhancedCsvWriter::new(csv_path.to_str().unwrap()).await?;
    for thread in &threads {
        csv_writer.write_thread(thread, &screen_name).await?;
    }
    csv_writer.finalize().await?;

    let end_datetime = Local::now();
    let end_time = Instant::now();
    let duration = end_time.duration_since(start_time);

    println!("🌍 Director Fury is compiling the final mission report...");
    let results_content = format!(
        "Avengers Operation Summary\n\
         ===========================\n\
         Mission Start: {}\n\
         Total Threats Identified: {}\n\
         Threats Neutralized (Filtered): {}\n\
         Successful Interventions (Final Thread Count): {}\n\
         Mission End: {}\n\
         Operation Duration: {:.2} seconds\n\
         ===========================\n\
         Status: Mission Accomplished",
        start_datetime.format("%Y-%m-%d %H:%M:%S"),
        total_tweets,
        filtered_tweet_count,
        threads.len(),
        end_datetime.format("%Y-%m-%d %H:%M:%S"),
        duration.as_secs_f64()
    );

    let results_file_path = output_dir.join(format!("results_{}_{}.txt", screen_name, timestamp));
    async_fs::write(&results_file_path, results_content).await.context("Failed to write results file")?;
    println!("📊 Final mission report filed. Operation summary complete!");

    Ok(())
}

/// Simple tweet processing function for testing
pub async fn process_tweets_simple(tweets: &[TweetWrapper], _screen_name: &str) -> Result<Vec<Thread>> {
    let mut threads = Vec::new();
    
    for tweet_wrapper in tweets {
        let tweet = &tweet_wrapper.tweet;
        
        // Skip retweets
        if tweet.retweeted || tweet.full_text.starts_with("RT @") {
            continue;
        }
        
        // Create a simple thread for each tweet
        let thread = Thread {
            id: tweet.id_str.clone(),
            tweets: vec![tweet.clone()],
            tweet_count: 1,
            favorite_count: tweet.favorite_count.parse().unwrap_or(0),
            retweet_count: tweet.retweet_count.parse().unwrap_or(0),
        };
        
        threads.push(thread);
    }
    
    Ok(threads)
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;


    #[tokio::test]
    async fn test_tweet_processing_structure() {
        // Test that the function signature is correct
        let temp_dir = tempdir().unwrap();
        let output_dir = temp_dir.path().to_path_buf();
        
        // This would fail with actual processing due to missing file,
        // but tests the function signature and basic structure
        let result = process_tweets(
            "nonexistent_file.js",
            "testuser",
            &output_dir,
            1234567890
        ).await;
        
        // Should fail due to missing file, but not due to compilation issues
        assert!(result.is_err());
    }

    #[test]
    fn test_thread_creation_logic() {
        // Test the core logic for creating threads from tweets
        let tweet1 = Tweet {
            id_str: "1".to_string(),
            id: "1".to_string(),
            full_text: "First tweet".to_string(),
            created_at: "Mon Jan 01 12:00:00 +0000 2023".to_string(),
            favorite_count: "5".to_string(),
            retweet_count: "2".to_string(),
            retweeted: false,
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
            display_text_range: vec!["0".to_string(), "11".to_string()],
            in_reply_to_status_id: None,
            in_reply_to_status_id_str: None,
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: None,
            edit_info: None,
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: vec![],
                urls: vec![],
            },
            possibly_sensitive: None,
        };

        let tweet2 = Tweet {
            id_str: "2".to_string(),
            id: "2".to_string(),
            full_text: "Reply tweet".to_string(),
            created_at: "Mon Jan 01 12:05:00 +0000 2023".to_string(),
            favorite_count: "3".to_string(),
            retweet_count: "1".to_string(),
            retweeted: false,
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
            display_text_range: vec!["0".to_string(), "12".to_string()],
            in_reply_to_status_id: Some("1".to_string()),
            in_reply_to_status_id_str: Some("1".to_string()),
            in_reply_to_user_id: Some("12345".to_string()),
            in_reply_to_user_id_str: Some("12345".to_string()),
            in_reply_to_screen_name: Some("testuser".to_string()),
            edit_info: None,
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: vec![],
                urls: vec![],
            },
            possibly_sensitive: None,
        };

        // Test that tweets can be organized into threads
        let tweets = vec![tweet1, tweet2];
        assert_eq!(tweets.len(), 2);
        
        // Verify the reply relationship
        assert_eq!(tweets[1].in_reply_to_status_id, Some("1".to_string()));
    }

    #[test]
    fn test_tweet_filtering_logic() {
        let retweet = Tweet {
            id_str: "1".to_string(),
            id: "1".to_string(),
            full_text: "RT @someone: Original tweet".to_string(),
            created_at: "Mon Jan 01 12:00:00 +0000 2023".to_string(),
            favorite_count: "5".to_string(),
            retweet_count: "2".to_string(),
            retweeted: true, // This should be filtered out
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
            display_text_range: vec!["0".to_string(), "30".to_string()],
            in_reply_to_status_id: None,
            in_reply_to_status_id_str: None,
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: None,
            edit_info: None,
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: vec![],
                urls: vec![],
            },
            possibly_sensitive: None,
        };

        let original_tweet = Tweet {
            id_str: "2".to_string(),
            id: "2".to_string(),
            full_text: "Original tweet".to_string(),
            created_at: "Mon Jan 01 12:05:00 +0000 2023".to_string(),
            favorite_count: "3".to_string(),
            retweet_count: "1".to_string(),
            retweeted: false, // This should be kept
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
            display_text_range: vec!["0".to_string(), "15".to_string()],
            in_reply_to_status_id: None,
            in_reply_to_status_id_str: None,
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: None,
            edit_info: None,
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: vec![],
                urls: vec![],
            },
            possibly_sensitive: None,
        };

        let mut tweets = vec![retweet, original_tweet];
        let screen_name = "testuser";
        
        // Apply the same filtering logic as in process_tweets
        tweets.retain(|tweet| !tweet.retweeted && (tweet.in_reply_to_screen_name.as_deref() == Some(screen_name) || tweet.in_reply_to_screen_name.is_none()));
        
        // Should only have the original tweet
        assert_eq!(tweets.len(), 1);
        assert_eq!(tweets[0].id_str, "2");
    }
}

================================================
FILE: src/processing/mod.rs
================================================
//! Core processing modules for Tweet-Scrolls
//! 
//! This module contains the main processing logic split into focused components:
//! - Tweet processing pipeline
//! - DM processing pipeline  
//! - File I/O operations
//! - Data structures
//! - Reply thread processing
//! - DM thread conversion

pub mod tweets;
pub mod direct_messages;
/// Fast DM analysis using only headers data
pub mod dm_headers_analyzer;
pub mod file_io;
pub mod data_structures;
pub mod mvp_analyzer;
pub mod reply_threads;
pub mod dm_threads;

// Re-export commonly used types
pub use data_structures::{Tweet, TweetWrapper, Thread, ProcessedConversation, CsvWriter};
pub use tweets::{process_tweets, process_tweets_simple};
pub use direct_messages::{process_dm_file, process_dm_conversations};
pub use file_io::{write_threads_to_file, write_csv, get_input_file, get_dm_file};
pub use mvp_analyzer::{MvpAnalyzer, SimpleRelationship, ActivityPattern};
pub use reply_threads::{process_reply_threads, format_thread_as_text};
pub use dm_threads::{convert_dms_to_threads, format_dm_thread_as_text, DmThread};

================================================
FILE: src/processing/direct_messages.rs
================================================
//! Direct message processing pipeline

use anyhow::{Context, Result};
use csv::Writer as CsvWriterLib;
use serde_json::from_str;
use std::fs::File;
use std::io::BufWriter;
use std::path::Path;
use std::time::Instant;
use tokio::fs as async_fs;

use crate::models::direct_message::DmWrapper;
use crate::relationship::RelationshipAnalyzer;
use super::data_structures::ProcessedConversation;
use super::dm_threads::{convert_dms_to_threads, format_dm_thread_as_text};

/// Processes direct messages from a JSON file and generates analysis
/// 
/// # Arguments
/// 
/// * `dm_file` - Path to the DM JSON file
/// * `screen_name` - Twitter handle for output file naming
/// * `output_dir` - Directory to write output files
/// * `timestamp` - Timestamp for file naming
/// 
/// # Returns
/// 
/// Result indicating success or failure of the processing
pub async fn process_dm_file(dm_file: &str, screen_name: &str, output_dir: &Path, timestamp: i64) -> Result<()> {
    let start_time = Instant::now();
    
    println!("📱 Reading DM file...");
    let dm_content = async_fs::read_to_string(dm_file).await
        .with_context(|| format!("Failed to read DM file: {}", dm_file))?;
    
    println!("🔍 Parsing DM data...");
    // Remove JavaScript assignment prefix if present (handle both formats)
    let json_content = if let Some(stripped) = dm_content.strip_prefix("window.YTD.direct_messages.part0 = ") {
        stripped
    } else if let Some(stripped) = dm_content.strip_prefix("window.YTD.direct_message_headers.part0 = ") {
        stripped
    } else {
        &dm_content
    };
    
    let dm_wrappers: Vec<DmWrapper> = from_str(json_content)
        .context("Failed to parse DM JSON")?;
        
    // Create relationship analyzer for timeline analysis
    let analyzer = RelationshipAnalyzer::new();
    
    // Build interaction timeline from DM data
    let timeline = analyzer.build_timeline(&dm_wrappers, &[]);
    
    // Perform timeline analysis
    let timeline_analysis = analyzer.analyze_timeline(&timeline);
    
    // Print timeline analysis summary
    println!("\n📊 Timeline Analysis Results:");
    println!("  • Total interactions: {}", timeline_analysis.total_interactions);
    println!("  • Unique participants: {}", timeline_analysis.unique_participants);
    println!("  • Analysis patterns: {} detected", timeline_analysis.patterns.len());
    println!("  • Average response time: {:.2} minutes", 
             timeline_analysis.response_times.average / 60.0);
    println!("  • Interactions per day: {:.2}", 
             timeline_analysis.density.avg_interactions_per_day);
    
    println!("💬 Processing {} conversations...", dm_wrappers.len());
    
    let mut conversations: Vec<ProcessedConversation> = dm_wrappers
        .iter()
        .map(|wrapper| {
            let conv = &wrapper.dm_conversation;
            let valid_messages: Vec<_> = conv.messages
                .iter()
                .filter(|msg| msg.message_create.is_some())
                .collect();
            
            let first_date = valid_messages.first()
                .and_then(|msg| msg.message_create.as_ref())
                .and_then(|mc| mc.created_at.clone());
            
            let last_date = valid_messages.last()
                .and_then(|msg| msg.message_create.as_ref())
                .and_then(|mc| mc.created_at.clone());
            
            ProcessedConversation {
                conversation_id: conv.conversation_id.clone(),
                message_count: valid_messages.len() as u32,
                participants: vec![], // Will be filled properly later
                first_message_date: first_date,
                last_message_date: last_date,
            }
        })
        .filter(|conv| conv.message_count > 0)
        .collect();
    
    // Sort by message count (descending)
    conversations.sort_by(|a, b| b.message_count.cmp(&a.message_count));
    
    println!("📊 Writing DM results...");
    
    // Write conversations CSV file
    write_dm_csv(&conversations, screen_name, timestamp, output_dir).await?;
    
    // Convert DMs to threads and write thread files
    write_dm_threads(&dm_wrappers, screen_name, timestamp, output_dir).await?;
    
    // Write timeline analysis to a separate CSV
    write_timeline_analysis_csv(&timeline_analysis, screen_name, timestamp, output_dir).await?;
    
    // Write timeline analysis to TXT file
    write_timeline_analysis_txt(&timeline_analysis, screen_name, timestamp, output_dir).await?;
    
    // Write summary file
    write_dm_summary(&conversations, &timeline_analysis, screen_name, timestamp, output_dir, start_time).await?;
    
    println!("✅ DM processing completed successfully!");
    Ok(())
}

/// Writes DM conversations to CSV file
async fn write_dm_csv(
    conversations: &[ProcessedConversation], 
    screen_name: &str, 
    timestamp: i64, 
    output_dir: &Path
) -> Result<()> {
    let csv_path = output_dir.join(format!("dm_conversations_{}_{}.csv", screen_name, timestamp));
    let csv_file = File::create(&csv_path)?;
    let mut csv_writer = CsvWriterLib::from_writer(BufWriter::new(csv_file));
    
    // Write conversations data
    csv_writer.write_record([
        "Conversation ID",
        "Message Count", 
        "First Message Date",
        "Last Message Date",
    ])?;
    
    for conv in conversations {
        csv_writer.write_record([
            &conv.conversation_id,
            &conv.message_count.to_string(),
            conv.first_message_date.as_deref().unwrap_or("N/A"),
            conv.last_message_date.as_deref().unwrap_or("N/A"),
        ])?;
    }
    csv_writer.flush()?;
    
    Ok(())
}

/// Writes DM threads to CSV and TXT files
async fn write_dm_threads(
    dm_wrappers: &[DmWrapper],
    screen_name: &str,
    timestamp: i64,
    output_dir: &Path
) -> Result<()> {
    // Convert DMs to threads
    let dm_threads = convert_dms_to_threads(dm_wrappers);
    
    if dm_threads.is_empty() {
        println!("⚠️  No DM threads to write");
        return Ok(());
    }
    
    // Write CSV file
    let csv_path = output_dir.join(format!("dm_threads_{}_{}.csv", screen_name, timestamp));
    let csv_file = File::create(&csv_path)?;
    let mut csv_writer = CsvWriterLib::from_writer(BufWriter::new(csv_file));
    
    // Write CSV headers
    csv_writer.write_record([
        "Thread ID",
        "Participant Count",
        "Message Count",
        "Duration (seconds)",
        "Avg Response Time (seconds)",
        "Start Time",
        "End Time",
        "Participants"
    ])?;
    
    // Write thread data
    for thread in &dm_threads {
        csv_writer.write_record([
            &thread.thread_id,
            &thread.participant_count.to_string(),
            &thread.metadata.message_count.to_string(),
            &thread.metadata.duration_seconds.map_or("N/A".to_string(), |d| d.to_string()),
            &thread.metadata.avg_response_time.map_or("N/A".to_string(), |t| format!("{:.2}", t)),
            &thread.metadata.start_time.map_or("N/A".to_string(), |t| t.format("%Y-%m-%d %H:%M:%S").to_string()),
            &thread.metadata.end_time.map_or("N/A".to_string(), |t| t.format("%Y-%m-%d %H:%M:%S").to_string()),
            &thread.participants.join(";")
        ])?;
    }
    csv_writer.flush()?;
    
    // Write TXT file
    let txt_path = output_dir.join(format!("dm_threads_{}_{}.txt", screen_name, timestamp));
    let mut txt_content = String::new();
    
    txt_content.push_str("📱 DIRECT MESSAGE THREADS\n");
    txt_content.push_str(&format!("{}\n\n", "=".repeat(50)));
    txt_content.push_str(&format!("Total threads: {}\n", dm_threads.len()));
    txt_content.push_str(&format!("Generated: {}\n", chrono::Utc::now().format("%Y-%m-%d %H:%M:%S")));
    txt_content.push_str(&format!("{}\n\n", "=".repeat(50)));
    
    for thread in &dm_threads {
        txt_content.push_str(&format_dm_thread_as_text(thread));
        txt_content.push('\n');
    }
    
    async_fs::write(&txt_path, txt_content).await
        .context("Failed to write DM threads TXT file")?;
    
    println!("📝 Generated {} DM thread files", dm_threads.len());
    Ok(())
}

/// Writes timeline analysis to CSV file
async fn write_timeline_analysis_csv(
    timeline_analysis: &crate::models::timeline::TimelineAnalysis,
    screen_name: &str, 
    timestamp: i64, 
    output_dir: &Path
) -> Result<()> {
    let timeline_csv_path = output_dir.join(format!("timeline_analysis_{}_{}.csv", screen_name, timestamp));
    let timeline_csv_file = File::create(&timeline_csv_path)?;
    let mut timeline_writer = CsvWriterLib::from_writer(BufWriter::new(timeline_csv_file));
    
    // Write timeline analysis header
    timeline_writer.write_record([
        "Analysis Type",
        "Total Interactions",
        "Unique Participants",
        "Patterns Detected",
        "Avg Response Time (min)",
        "Median Response Time (min)",
        "Interactions Per Day",
        "Peak Hour",
        "Peak Day"
    ])?;
    
    // Write timeline analysis data
    timeline_writer.write_record([
        "Summary",
        &timeline_analysis.total_interactions.to_string(),
        &timeline_analysis.unique_participants.to_string(),
        &timeline_analysis.patterns.len().to_string(),
        &format!("{:.2}", timeline_analysis.response_times.average / 60.0),
        &format!("{:.2}", timeline_analysis.response_times.median / 60.0),
        &format!("{:.2}", timeline_analysis.density.avg_interactions_per_day),
        &timeline_analysis.density.peak_hour.to_string(),
        &timeline_analysis.density.peak_day.to_string()
    ])?;
    
    timeline_writer.flush()?;
    Ok(())
}

/// Writes timeline analysis to TXT file
async fn write_timeline_analysis_txt(
    timeline_analysis: &crate::models::timeline::TimelineAnalysis,
    screen_name: &str, 
    timestamp: i64, 
    output_dir: &Path
) -> Result<()> {
    let timeline_txt_path = output_dir.join(format!("timeline_analysis_{}_{}.txt", screen_name, timestamp));
    let timeline_txt_file = File::create(&timeline_txt_path)?;
    let mut timeline_txt_writer = BufWriter::new(timeline_txt_file);
    
    use std::io::Write;
    
    // Format timeline analysis as a table
    writeln!(timeline_txt_writer, "{:=<80}", "")?;
    writeln!(timeline_txt_writer, "TIMELINE ANALYSIS SUMMARY")?;
    writeln!(timeline_txt_writer, "{:=<80}\n", "")?;
    
    // Basic Statistics
    writeln!(timeline_txt_writer, "{:-<40}", " Basic Statistics ")?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35} |", "Total Interactions", timeline_analysis.total_interactions)?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35} |", "Unique Participants", timeline_analysis.unique_participants)?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35} |", "Patterns Detected", timeline_analysis.patterns.len())?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35.2} min |", "Avg Response Time", timeline_analysis.response_times.average / 60.0)?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35.2} min |", "Median Response Time", timeline_analysis.response_times.median / 60.0)?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35.2} |", "Interactions Per Day", timeline_analysis.density.avg_interactions_per_day)?;
    
    // Peak Activity
    writeln!(timeline_txt_writer, "\n{:-<40}", " Peak Activity ")?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35} |", "Peak Hour", format!("{}:00", timeline_analysis.density.peak_hour))?;
    writeln!(timeline_txt_writer, "| {:<36} | {:>35} |", "Peak Day", timeline_analysis.density.peak_day)?;
    
    timeline_txt_writer.flush()?;
    Ok(())
}

/// Writes DM processing summary
async fn write_dm_summary(
    conversations: &[ProcessedConversation],
    timeline_analysis: &crate::models::timeline::TimelineAnalysis,
    screen_name: &str, 
    timestamp: i64, 
    output_dir: &Path,
    start_time: Instant
) -> Result<()> {
    let total_messages: u32 = conversations.iter().map(|c| c.message_count).sum();
    let duration = start_time.elapsed();
    
    let summary_content = format!(
        "DM Processing Summary\n\
         ====================\n\
         Screen Name: {}\n\
         Total Conversations: {}\n\
         Total Messages: {}\n\
         Total Interactions: {}\n\
         Unique Participants: {}\n\
         Processing Duration: {:.2} seconds\n\
         ====================\n\
         Timeline Analysis:\n\
         - Average Response Time: {:.2} minutes\n\
         - Interactions Per Day: {:.2}\n\
         - Peak Activity Hour: {}:00\n\
         - Patterns Detected: {}\n\
         ====================\n\
         Status: Processing Completed Successfully",
        screen_name,
        conversations.len(),
        total_messages,
        timeline_analysis.total_interactions,
        timeline_analysis.unique_participants,
        duration.as_secs_f64(),
        timeline_analysis.response_times.average / 60.0,
        timeline_analysis.density.avg_interactions_per_day,
        timeline_analysis.density.peak_hour,
        timeline_analysis.patterns.len()
    );

    let summary_path = output_dir.join(format!("dm_results_{}_{}.txt", screen_name, timestamp));
    async_fs::write(&summary_path, summary_content).await.context("Failed to write DM summary file")?;
    
    Ok(())
}

/// Simple DM processing function for testing
pub async fn process_dm_conversations(dm_data: &[DmWrapper], _screen_name: &str) -> Result<Vec<ProcessedConversation>> {
    let mut conversations = Vec::new();
    
    for dm_wrapper in dm_data {
        let conversation = &dm_wrapper.dm_conversation;
        
        // Skip empty conversations
        if conversation.messages.is_empty() {
            continue;
        }
        
        // Extract participants from conversation ID
        let participants: Vec<String> = conversation.conversation_id
            .split('-')
            .map(|s| s.to_string())
            .collect();
        
        let processed = ProcessedConversation {
            conversation_id: conversation.conversation_id.clone(),
            message_count: conversation.messages.len() as u32,
            participants,
            first_message_date: conversation.messages.first()
                .and_then(|m| m.message_create.as_ref())
                .and_then(|mc| mc.created_at.clone()),
            last_message_date: conversation.messages.last()
                .and_then(|m| m.message_create.as_ref())
                .and_then(|mc| mc.created_at.clone()),
        };
        
        conversations.push(processed);
    }
    
    // Sort by message count (descending)
    conversations.sort_by(|a, b| b.message_count.cmp(&a.message_count));
    
    Ok(conversations)
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;
    use std::fs;

    #[tokio::test]
    async fn test_dm_processing_structure() {
        // Test that the function signature is correct
        let temp_dir = tempdir().unwrap();
        let output_dir = temp_dir.path();
        
        // This would fail with actual processing due to missing file,
        // but tests the function signature and basic structure
        let result = process_dm_file(
            "nonexistent_file.js",
            "testuser",
            output_dir,
            1234567890
        ).await;
        
        // Should fail due to missing file, but not due to compilation issues
        assert!(result.is_err());
    }

    #[tokio::test]
    async fn test_javascript_prefix_removal() {
        let temp_dir = tempdir().unwrap();
        let output_dir = temp_dir.path();
        
        // Create test DM content with JavaScript prefix
        let test_dm_content = r#"window.YTD.direct_messages.part0 = [
  {
    "dmConversation": {
      "conversationId": "test-123",
      "messages": [
        {
          "messageCreate": {
            "id": "msg1",
            "text": "Test message",
            "createdAt": "2023-01-01T10:00:00.000Z",
            "senderId": "user1",
            "recipientId": "user2"
          }
        }
      ]
    }
  }
]"#;
        
        let dm_file_path = output_dir.join("test_dm.js");
        fs::write(&dm_file_path, test_dm_content).unwrap();
        
        let result = process_dm_file(
            dm_file_path.to_str().unwrap(),
            "testuser",
            output_dir,
            1234567890
        ).await;
        
        // Should succeed with proper JavaScript prefix handling
        assert!(result.is_ok());
        
        // Verify output files were created
        let csv_file = output_dir.join("dm_conversations_testuser_1234567890.csv");
        let summary_file = output_dir.join("dm_results_testuser_1234567890.txt");
        
        assert!(csv_file.exists());
        assert!(summary_file.exists());
    }

    #[test]
    fn test_processed_conversation_creation() {
        let conversation = ProcessedConversation {
            conversation_id: "test-conversation".to_string(),
            message_count: 5,
            participants: vec!["user1".to_string(), "user2".to_string()],
            first_message_date: Some("2023-01-01T10:00:00.000Z".to_string()),
            last_message_date: Some("2023-01-01T11:00:00.000Z".to_string()),
        };
        
        assert_eq!(conversation.conversation_id, "test-conversation");
        assert_eq!(conversation.message_count, 5);
        assert_eq!(conversation.participants.len(), 2);
        assert!(conversation.first_message_date.is_some());
        assert!(conversation.last_message_date.is_some());
    }

    #[tokio::test]
    async fn test_empty_dm_file() {
        let temp_dir = tempdir().unwrap();
        let output_dir = temp_dir.path();
        
        // Create empty DM content
        let test_dm_content = "[]";
        
        let dm_file_path = output_dir.join("empty_dm.js");
        fs::write(&dm_file_path, test_dm_content).unwrap();
        
        let result = process_dm_file(
            dm_file_path.to_str().unwrap(),
            "testuser",
            output_dir,
            1234567890
        ).await;
        
        // Should handle empty files gracefully
        assert!(result.is_ok());
    }
}

================================================
FILE: src/processing/mvp_analyzer.rs
================================================
//! MVP Relationship and Timeline Analyzer
//! 
//! Provides simple, immediately useful analysis of Twitter data:
//! - Who you interact with most
//! - When you're most active
//! - Clean, readable output

use anyhow::Result;
use chrono::{DateTime, Timelike};
use std::collections::HashMap;
use std::path::Path;
use tokio::fs as async_fs;

#[allow(unused_imports)]
use super::data_structures::{Thread, Tweet, TweetEntities, UserMention, EditInfo, EditInitial};
use crate::models::direct_message::DmWrapper;

/// Simple relationship statistics
#[derive(Debug, Clone)]
pub struct SimpleRelationship {
    /// The username of the user in this relationship
    pub username: String,
    /// Total number of interactions with this user
    pub interaction_count: u32,
    /// Timestamp of the last interaction
    pub last_interaction: String,
    /// Type of interactions: "tweets", "dms", or "both"
    pub interaction_type: String,
}

/// Simple activity pattern
#[derive(Debug, Clone)]
pub struct ActivityPattern {
    /// Hour of the day (0-23)
    pub hour: u32,
    /// Number of activities in this time period
    pub activity_count: u32,
    /// Day of the week as string
    pub day_of_week: String,
}

/// MVP Analyzer for immediate insights
pub struct MvpAnalyzer {
    /// Map of usernames to their relationship data
    pub relationships: HashMap<String, SimpleRelationship>,
    /// Activity counts by hour of day (0-23)
    pub hourly_activity: HashMap<u32, u32>,
    /// Activity counts by day of week
    pub daily_activity: HashMap<String, u32>,
}

impl Default for MvpAnalyzer {
    fn default() -> Self {
        Self::new()
    }
}

impl MvpAnalyzer {
    /// Create a new MVP analyzer
    pub fn new() -> Self {
        Self {
            relationships: HashMap::new(),
            hourly_activity: HashMap::new(),
            daily_activity: HashMap::new(),
        }
    }

    /// Analyze tweets for relationships and activity patterns
    pub fn analyze_tweets(&mut self, threads: &[Thread]) -> Result<()> {
        for thread in threads {
            for tweet in &thread.tweets {
                // Extract timestamp for activity analysis
                if let Ok(dt) = DateTime::parse_from_str(&tweet.created_at, "%a %b %d %H:%M:%S %z %Y") {
                    let hour = dt.hour();
                    let day = dt.format("%A").to_string();
                    
                    *self.hourly_activity.entry(hour).or_insert(0) += 1;
                    *self.daily_activity.entry(day).or_insert(0) += 1;
                }

                // Extract relationships from mentions
                for mention in &tweet.entities.user_mentions {
                    let username = mention.screen_name.clone();
                    let relationship = self.relationships.entry(username.clone()).or_insert(SimpleRelationship {
                        username: username.clone(),
                        interaction_count: 0,
                        last_interaction: tweet.created_at.clone(),
                        interaction_type: "tweets".to_string(),
                    });
                    
                    relationship.interaction_count += 1;
                    relationship.last_interaction = tweet.created_at.clone();
                }

                // Extract relationships from replies
                if let Some(reply_to_user) = &tweet.in_reply_to_screen_name {
                    let relationship = self.relationships.entry(reply_to_user.clone()).or_insert(SimpleRelationship {
                        username: reply_to_user.clone(),
                        interaction_count: 0,
                        last_interaction: tweet.created_at.clone(),
                        interaction_type: "tweets".to_string(),
                    });
                    
                    relationship.interaction_count += 1;
                    relationship.last_interaction = tweet.created_at.clone();
                }
            }
        }
        Ok(())
    }

    /// Analyze DMs for relationships
    pub fn analyze_dms(&mut self, dm_data: &[DmWrapper]) -> Result<()> {
        for dm_wrapper in dm_data {
            let conversation = &dm_wrapper.dm_conversation;
            
            // Extract participants from conversation ID
            let participants: Vec<&str> = conversation.conversation_id.split('-').collect();
            
            for message in &conversation.messages {
                if let Some(message_create) = &message.message_create {
                    // Extract timestamp for activity analysis
                    if let Ok(dt) = DateTime::parse_from_rfc3339(message_create.created_at.as_ref().unwrap_or(&"".to_string())) {
                        let hour = dt.hour();
                        let day = dt.format("%A").to_string();
                        
                        *self.hourly_activity.entry(hour).or_insert(0) += 1;
                        *self.daily_activity.entry(day).or_insert(0) += 1;
                    }

                    // Track DM relationships
                    if let (Some(sender_id), Some(recipient_id)) = (&message_create.sender_id, &message_create.recipient_id) {
                        // Use a simplified username (just the ID for now)
                        let other_user = if sender_id != recipient_id {
                            format!("user_{}", if participants.len() > 1 { 
                                if participants[0] == sender_id { participants[1] } else { participants[0] }
                            } else { 
                                recipient_id 
                            })
                        } else {
                            continue; // Skip self-messages
                        };

                        let relationship = self.relationships.entry(other_user.clone()).or_insert(SimpleRelationship {
                            username: other_user.clone(),
                            interaction_count: 0,
                            last_interaction: message_create.created_at.as_ref().unwrap_or(&"".to_string()).clone(),
                            interaction_type: "dms".to_string(),
                        });
                        
                        relationship.interaction_count += 1;
                        relationship.last_interaction = message_create.created_at.as_ref().unwrap_or(&"".to_string()).clone();
                        
                        // Update interaction type if we have both tweets and DMs
                        if relationship.interaction_type == "tweets" {
                            relationship.interaction_type = "both".to_string();
                        }
                    }
                }
            }
        }
        Ok(())
    }

    /// Get top relationships by interaction count
    pub fn get_top_relationships(&self, limit: usize) -> Vec<SimpleRelationship> {
        let mut relationships: Vec<SimpleRelationship> = self.relationships.values().cloned().collect();
        relationships.sort_by(|a, b| b.interaction_count.cmp(&a.interaction_count));
        relationships.into_iter().take(limit).collect()
    }

    /// Get peak activity hours
    pub fn get_peak_activity_hours(&self, limit: usize) -> Vec<(u32, u32)> {
        let mut hours: Vec<(u32, u32)> = self.hourly_activity.iter().map(|(&h, &c)| (h, c)).collect();
        hours.sort_by(|a, b| b.1.cmp(&a.1));
        hours.into_iter().take(limit).collect()
    }

    /// Get most active days
    pub fn get_most_active_days(&self) -> Vec<(String, u32)> {
        let mut days: Vec<(String, u32)> = self.daily_activity.iter().map(|(d, &c)| (d.clone(), c)).collect();
        days.sort_by(|a, b| b.1.cmp(&a.1));
        days
    }

    /// Generate a clean, readable report
    pub async fn generate_report(&self, output_dir: &Path, screen_name: &str, timestamp: i64) -> Result<()> {
        let mut report = String::new();
        
        report.push_str("🎯 TWITTER RELATIONSHIP & ACTIVITY INTELLIGENCE REPORT\n");
        report.push_str("=====================================================\n\n");

        // Top relationships section
        report.push_str("👥 TOP PEOPLE YOU INTERACT WITH\n");
        report.push_str("--------------------------------\n");
        let top_relationships = self.get_top_relationships(10);
        
        if top_relationships.is_empty() {
            report.push_str("No significant relationships found in the data.\n\n");
        } else {
            for (i, relationship) in top_relationships.iter().enumerate() {
                report.push_str(&format!(
                    "{}. @{} - {} interactions ({})\n",
                    i + 1,
                    relationship.username,
                    relationship.interaction_count,
                    relationship.interaction_type
                ));
            }
            report.push('\n');
        }

        // Activity patterns section
        report.push_str("⏰ WHEN YOU'RE MOST ACTIVE\n");
        report.push_str("---------------------------\n");
        
        let peak_hours = self.get_peak_activity_hours(5);
        if !peak_hours.is_empty() {
            report.push_str("Peak Activity Hours:\n");
            for (hour, count) in peak_hours {
                let time_str = if hour == 0 {
                    "12:00 AM".to_string()
                } else if hour < 12 {
                    format!("{}:00 AM", hour)
                } else if hour == 12 {
                    "12:00 PM".to_string()
                } else {
                    format!("{}:00 PM", hour - 12)
                };
                report.push_str(&format!("  {} - {} activities\n", time_str, count));
            }
            report.push('\n');
        }

        let active_days = self.get_most_active_days();
        if !active_days.is_empty() {
            report.push_str("Most Active Days:\n");
            for (day, count) in active_days {
                report.push_str(&format!("  {} - {} activities\n", day, count));
            }
            report.push('\n');
        }

        // Summary statistics
        report.push_str("📊 SUMMARY STATISTICS\n");
        report.push_str("---------------------\n");
        report.push_str(&format!("Total unique relationships: {}\n", self.relationships.len()));
        report.push_str(&format!("Total activities tracked: {}\n", 
            self.hourly_activity.values().sum::<u32>()));
        
        let most_active_hour = self.hourly_activity.iter()
            .max_by_key(|(_, &count)| count)
            .map(|(&hour, &count)| (hour, count));
        
        if let Some((hour, count)) = most_active_hour {
            let time_str = if hour == 0 {
                "12:00 AM".to_string()
            } else if hour < 12 {
                format!("{}:00 AM", hour)
            } else if hour == 12 {
                "12:00 PM".to_string()
            } else {
                format!("{}:00 PM", hour - 12)
            };
            report.push_str(&format!("Peak activity time: {} ({} activities)\n", time_str, count));
        }

        report.push('\n');
        report.push_str("💡 INSIGHTS & RECOMMENDATIONS\n");
        report.push_str("------------------------------\n");
        
        if !top_relationships.is_empty() {
            let top_person = &top_relationships[0];
            report.push_str(&format!("• Your strongest connection is @{} with {} interactions\n", 
                top_person.username, top_person.interaction_count));
        }
        
        if let Some((hour, _)) = most_active_hour {
            let time_str = if hour == 0 {
                "midnight".to_string()
            } else if hour < 12 {
                format!("{}:00 AM", hour)
            } else if hour == 12 {
                "noon".to_string()
            } else {
                format!("{}:00 PM", hour - 12)
            };
            report.push_str(&format!("• You're most active around {}\n", time_str));
        }

        if self.relationships.len() > 5 {
            report.push_str("• You have a diverse network of connections\n");
        } else if !self.relationships.is_empty() {
            report.push_str("• You tend to interact with a focused group of people\n");
        }

        report.push('\n');
        report.push_str("Generated by Tweet-Scrolls Relationship Intelligence System\n");
        report.push_str(&format!("Report generated at: {}\n", 
            chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")));

        // Write the report
        let report_path = output_dir.join(format!("relationship_intelligence_{}_{}.txt", screen_name, timestamp));
        async_fs::write(&report_path, report).await?;
        
        println!("📊 Relationship intelligence report saved to: {}", report_path.display());
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;


    fn create_test_tweet(id: &str, text: &str, mentions: Vec<&str>, created_at: &str) -> Tweet {
        Tweet {
            id_str: id.to_string(),
            id: id.to_string(),
            full_text: text.to_string(),
            created_at: created_at.to_string(),
            favorite_count: "0".to_string(),
            retweet_count: "0".to_string(),
            retweeted: false,
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "Twitter Web App".to_string(),
            display_text_range: vec!["0".to_string(), text.len().to_string()],
            in_reply_to_status_id: None,
            in_reply_to_status_id_str: None,
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: None,
            edit_info: Some(EditInfo {
                initial: Some(EditInitial {
                    edit_tweet_ids: vec![id.to_string()],
                    editable_until: "2025-01-01T00:00:00.000Z".to_string(),
                    edits_remaining: "5".to_string(),
                    is_edit_eligible: false,
                })
            }),
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: mentions.into_iter().map(|m| UserMention {
                    name: m.to_string(),
                    screen_name: m.to_string(),
                    indices: vec!["0".to_string(), "10".to_string()],
                    id_str: "123456789".to_string(),
                    id: "123456789".to_string(),
                }).collect(),
                urls: vec![],
            },
            possibly_sensitive: None,
        }
    }

    #[test]
    fn test_mvp_analyzer_creation() {
        let analyzer = MvpAnalyzer::new();
        assert_eq!(analyzer.relationships.len(), 0);
        assert_eq!(analyzer.hourly_activity.len(), 0);
        assert_eq!(analyzer.daily_activity.len(), 0);
    }

    #[test]
    fn test_tweet_analysis() {
        let mut analyzer = MvpAnalyzer::new();
        
        let tweet = create_test_tweet(
            "123",
            "Hello @testuser this is a test",
            vec!["testuser"],
            "Mon Jan 01 12:00:00 +0000 2024"
        );
        
        let thread = Thread {
            id: "123".to_string(),
            tweets: vec![tweet],
            tweet_count: 1,
            favorite_count: 0,
            retweet_count: 0,
        };
        
        let result = analyzer.analyze_tweets(&[thread]);
        assert!(result.is_ok());
        
        // Check that relationship was extracted
        assert_eq!(analyzer.relationships.len(), 1);
        assert!(analyzer.relationships.contains_key("testuser"));
        
        // Check that activity was tracked
        assert!(analyzer.hourly_activity.contains_key(&12)); // 12:00 PM
    }

    #[test]
    fn test_top_relationships() {
        let mut analyzer = MvpAnalyzer::new();
        
        // Add some test relationships
        analyzer.relationships.insert("user1".to_string(), SimpleRelationship {
            username: "user1".to_string(),
            interaction_count: 10,
            last_interaction: "2024-01-01".to_string(),
            interaction_type: "tweets".to_string(),
        });
        
        analyzer.relationships.insert("user2".to_string(), SimpleRelationship {
            username: "user2".to_string(),
            interaction_count: 5,
            last_interaction: "2024-01-01".to_string(),
            interaction_type: "dms".to_string(),
        });
        
        let top = analyzer.get_top_relationships(2);
        assert_eq!(top.len(), 2);
        assert_eq!(top[0].username, "user1");
        assert_eq!(top[0].interaction_count, 10);
        assert_eq!(top[1].username, "user2");
        assert_eq!(top[1].interaction_count, 5);
    }

    #[test]
    fn test_activity_patterns() {
        let mut analyzer = MvpAnalyzer::new();
        
        // Add some test activity
        analyzer.hourly_activity.insert(9, 10);  // 9 AM
        analyzer.hourly_activity.insert(14, 15); // 2 PM
        analyzer.hourly_activity.insert(20, 5);  // 8 PM
        
        let peak_hours = analyzer.get_peak_activity_hours(2);
        assert_eq!(peak_hours.len(), 2);
        assert_eq!(peak_hours[0], (14, 15)); // 2 PM should be first
        assert_eq!(peak_hours[1], (9, 10));  // 9 AM should be second
    }
}

================================================
FILE: src/processing/file_io.rs
================================================
//! File I/O operations for CSV writing and file management

use anyhow::{Context, Result};
use csv::Writer as CsvWriterLib;
use std::fs::File;
use std::io::{BufWriter, Write};
use std::path::Path;
use tokio::sync::mpsc as async_mpsc;

use super::data_structures::{CsvWriter, Thread};

impl CsvWriter {
    /// Runs the CSV writer, consuming records from the channel
    pub async fn run(mut self) -> Result<()> {
        let file = File::create(&self.output_path)
            .with_context(|| format!("Failed to create file: {}", self.output_path))?;
        let mut writer = CsvWriterLib::from_writer(BufWriter::new(file));

        // Write headers
        writer.write_record([
            "Thread ID",
            "Date time of first tweet",
            "Number of Tweets in Thread",
            "Likes in first tweet",
            "Retweets in first tweet",
            "Total likes for all tweets",
            "Total retweets for all tweets",
            "Thread Text",
        ])?;

        let mut buffer = Vec::with_capacity(self.buffer_size);

        while let Some(record) = self.receiver.recv().await {
            buffer.push(record);
            if buffer.len() >= self.buffer_size {
                self.flush_buffer(&mut writer, &mut buffer)?;
            }
        }

        if !buffer.is_empty() {
            self.flush_buffer(&mut writer, &mut buffer)?;
        }

        writer.flush()?;
        Ok(())
    }

    /// Flushes the buffer to the CSV writer
    fn flush_buffer(&self, writer: &mut CsvWriterLib<BufWriter<File>>, buffer: &mut Vec<Vec<String>>) -> Result<()> {
        for record in buffer.drain(..) {
            writer.write_record(&record)?;
        }
        Ok(())
    }
}

/// Writes threads to a text file
pub async fn write_threads_to_file(threads: &[Thread], screen_name: &str, timestamp: i64, output_dir: &Path) -> Result<()> {
    let file_path = output_dir.join(format!("threads_{}_{}.txt", screen_name, timestamp));
    let file = File::create(&file_path)?;
    let mut writer = BufWriter::new(file);

    for thread in threads {
        writeln!(writer, "--- Start of Thread ---")?;
        writeln!(writer, "Thread ID: {}", thread.id)?;
        writeln!(writer, "Timestamp: {}", thread.tweets[0].created_at)?;
        writeln!(writer, "Public Support: {} retweets, {} likes",
                 thread.tweets[0].retweet_count, thread.tweets[0].favorite_count)?;
        writeln!(writer, "Thread text:")?;

        for (i, tweet) in thread.tweets.iter().enumerate() {
            writeln!(writer, "- Tweet {}:", i + 1)?;
            writeln!(writer, "{}", tweet.full_text)?;
            writeln!(writer)?;
        }

        writeln!(writer, "--- End of Thread ---\n")?;
    }

    writer.flush()?;
    Ok(())
}

/// Writes CSV data for threads
pub async fn write_csv(
    threads: &[Thread],
    _screen_name: &str,
    _timestamp: i64,
    csv_tx: async_mpsc::Sender<Vec<String>>,
) -> Result<()> {
    for thread in threads {
        let first_tweet = &thread.tweets[0];
        let total_likes: u32 = thread.tweets.iter().filter_map(|t| t.favorite_count.parse::<u32>().ok()).sum();
        let total_retweets: u32 = thread.tweets.iter().filter_map(|t| t.retweet_count.parse::<u32>().ok()).sum();
        let thread_text: String = thread.tweets.iter().map(|t| t.full_text.replace('\n', " ")).collect::<Vec<_>>().join(" ");

        let record = vec![
            thread.id.clone(),
            first_tweet.created_at.clone(),
            thread.tweets.len().to_string(),
            first_tweet.favorite_count.clone(),
            first_tweet.retweet_count.clone(),
            total_likes.to_string(),
            total_retweets.to_string(),
            thread_text,
        ];

        csv_tx.send(record).await?;
    }

    Ok(())
}

/// Reads user input from any `BufRead` source.
///
/// This indirection allows us to inject a mock reader in tests so that
/// the function does **not** block waiting for interactive input in CI
/// or during automated `cargo test` runs.
fn prompt_input_from_reader<R: std::io::BufRead>(reader: &mut R, prompt: &str) -> Result<String> {
    use std::io::Write;

    // Print the prompt to stdout so that interactive usage remains unchanged.
    print!("{}", prompt);
    std::io::stdout().flush().context("Failed to flush stdout")?;

    let mut input = String::new();
    reader.read_line(&mut input).context("Failed to read input")?;
    Ok(input.trim().to_string())
}

/// Gets user input with a prompt using `stdin` as the source. This wrapper
/// keeps the original public API intact for production usage while delegating
/// to the injectable function above for easier testing.
pub fn prompt_input(prompt: &str) -> Result<String> {
    use std::io;

    let stdin = io::stdin();
    let mut handle = stdin.lock();
    prompt_input_from_reader(&mut handle, prompt)
}

/// Gets input file path from user
pub fn get_input_file() -> Result<String> {
    prompt_input("📁 Enter path to your tweets.js file: ")
}

/// Gets optional DM file path from user
pub fn get_dm_file() -> Result<Option<String>> {
    let input = prompt_input("💬 Enter path to direct-messages.js (or press Enter to skip): ")?;
    if input.is_empty() {
        Ok(None)
    } else {
        Ok(Some(input))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;
    use tokio::sync::mpsc as async_mpsc;

    #[tokio::test]
    async fn test_csv_writer_creation() {
        let temp_dir = tempdir().unwrap();
        let csv_path = temp_dir.path().join("test.csv");
        let (_, rx) = async_mpsc::channel::<Vec<String>>(10);
        
        let writer = CsvWriter::new(csv_path.to_string_lossy().to_string(), rx, 100);
        assert_eq!(writer.buffer_size, 100);
    }

    #[tokio::test]
    async fn test_write_threads_to_file() {
        use super::super::data_structures::{Tweet, Thread, TweetEntities};
        
        let temp_dir = tempdir().unwrap();
        let output_dir = temp_dir.path();
        
        let tweet = Tweet {
            id_str: "123".to_string(),
            id: "123".to_string(),
            full_text: "Test tweet".to_string(),
            created_at: "Mon Jan 01 12:00:00 +0000 2023".to_string(),
            favorite_count: "5".to_string(),
            retweet_count: "2".to_string(),
            retweeted: false,
            favorited: false,
            truncated: false,
            lang: "en".to_string(),
            source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
            display_text_range: vec!["0".to_string(), "10".to_string()],
            in_reply_to_status_id: None,
            in_reply_to_status_id_str: None,
            in_reply_to_user_id: None,
            in_reply_to_user_id_str: None,
            in_reply_to_screen_name: None,
            edit_info: None,
            entities: TweetEntities {
                hashtags: vec![],
                symbols: vec![],
                user_mentions: vec![],
                urls: vec![],
            },
            possibly_sensitive: None,
        };

        let thread = Thread {
            id: "thread_123".to_string(),
            tweets: vec![tweet],
            favorite_count: 5,
            retweet_count: 2,
            tweet_count: 1,
        };

        let result = write_threads_to_file(&[thread], "testuser", 1234567890, output_dir).await;
        assert!(result.is_ok());

        let file_path = output_dir.join("threads_testuser_1234567890.txt");
        assert!(file_path.exists());
    }

    #[test]
    fn test_input_functions() {
        use std::io::Cursor;

        // Simulate providing a tweets.js path and ensure the function returns it.
        let mut tweets_reader = Cursor::new("path/to/tweets.js\n");
        let tweets = prompt_input_from_reader(&mut tweets_reader, "Enter path: ").unwrap();
        assert_eq!(tweets, "path/to/tweets.js");

        // Simulate pressing Enter (empty input) for the optional DM file.
        let mut dm_reader = Cursor::new("\n");
        let dm = prompt_input_from_reader(&mut dm_reader, "Enter DM path: ").unwrap();
        assert_eq!(dm, "");
    }
}

================================================
FILE: ReadMe.md
================================================
# Tweet-Scrolls 📜
*Transform Twitter archives into organized conversation intelligence*

**Tweet-Scrolls processes your Twitter archive files and generates structured conversation threads and timeline analysis.** Like the Marauder's Map, it reveals organized patterns in your tweet and DM conversations.

## Input → Output

```mermaid
flowchart TD
    subgraph input ["📥 What You Provide"]
        A[📂 Twitter Archive]
        A1[📄 tweets.js]
        A2[💬 direct-messages.js]
        A3[📋 headers.js]
    end
    
    input --> process
    
    subgraph process ["⚡ Tweet-Scrolls"]
        P[🔄 Process & Analyze]
    end
    
    process --> output
    
    subgraph output ["📤 What You Get"]
        B[📊 Structured Data]
        B1[📝 Human Readable] 
        B2[📈 Timeline Analysis]
    end
    
    output --> details
    
    subgraph details ["📋 File Details"]
        B3[threads_*.csv<br/>dm_threads_*.csv<br/>timeline_analysis_*.csv]
        B4[threads_*.txt<br/>dm_threads_*.txt<br/>timeline_analysis_*.txt]
        B5[results_*.txt<br/>dm_results_*.txt]
    end
    
    style input fill:#e8f4fd
    style process fill:#fff8e1
    style output fill:#f1f8e9
    style details fill:#fdf2f8
```

### Key Capabilities
- **Thread Reconstruction**: Connects all replies into complete conversations
- **DM Organization**: Converts message threads into readable conversation flows
- **Timeline Analysis**: Shows when you're most active and interaction patterns
- **Multi-Format Output**: Generates both CSV data files and human-readable text
- **Privacy Protection**: All processing happens locally, user IDs are anonymized

## Installation & Usage

### Requirements
- Rust 1.70+ ([install here](https://rustup.rs))
- Your Twitter archive (download from Twitter/X settings)

### Quick Start
```bash
git clone https://github.com/yourusername/tweet-scrolls.git
cd tweet-scrolls
cargo build --release

# Process your archive
./target/release/tweet-scrolls /path/to/your/twitter/archive
```

### Usage Options
```bash
# Basic usage (recommended)
./target/release/tweet-scrolls /path/to/archive

# Custom output location
./target/release/tweet-scrolls /path/to/archive /path/to/output

# Interactive mode
./target/release/tweet-scrolls
```

## User Journey

### 🏗️ How It Works: From Raw Data to Organized Intelligence

```mermaid
flowchart TD
    A1["🔍 Discovery<br/>📂 Auto-detect files<br/>📁 Setup directories"]
    A2["🧵 Thread Building<br/>💬 Connect replies<br/>🔗 Build conversations"]
    A3["💬 DM Organization<br/>⏰ Add timestamps<br/>👥 A/B participants"]
    A4["🔐 Anonymization<br/>🔒 Blake3 hashing<br/>🛡️ Protect identity"]
    A5["📊 Data Generation<br/>📈 CSV files<br/>📝 Human-readable"]
    A6["📊 Final Output<br/>📈 Timeline analysis<br/>✅ Processing complete"]
    
    A1 --> A2
    A2 --> A3
    A3 --> A4
    A4 --> A5
    A5 --> A6
    
    style A1 fill:#e8f5e8
    style A2 fill:#e8f5e8  
    style A3 fill:#fff3e0
    style A4 fill:#fff3e0
    style A5 fill:#f3e5f5
    style A6 fill:#f3e5f5
```

**The Magic**: Like a digital archaeologist, Tweet-Scrolls discovers your Twitter archive files, intelligently reconstructs conversation threads, and transforms them into organized, readable formats - all while keeping your data safe and local.

### Thread Compilation Example

Like transforming scattered pages into a coherent storybook, Tweet-Scrolls compiles individual JSON messages into cohesive conversation threads that are easy to read and analyze.

```mermaid
flowchart TD
    subgraph Input ["📄 Raw JSON Messages"]
        A1["msg1: 'Hello!'<br/>sender: A, id: 1"]
        A2["msg2: 'Hi there!'<br/>sender: B, id: 2"]
        A3["msg3: 'How are you?'<br/>sender: A, id: 3"]
    end
    
    Input --> Processing
    
    subgraph Processing ["🧠 Transformation Engine"]
        B1["🔍 Parse Content<br/>Extract text & metadata"]
        B2["⏰ Add Timestamps<br/>Calculate relative timing"]
        B3["🧵 Thread Assembly<br/>Order chronologically"]
        B4["🔐 Anonymization<br/>Hash user identifiers"]
    end
    
    Processing --> Output
    
    subgraph Output ["💬 Organized Thread"]
        C1["A: Hello!<br/>(5 minutes later)<br/>B: Hi there!<br/>(5 minutes later)<br/>A: How are you?"]
    end
    
    Output --> Metadata
    
    subgraph Metadata ["📊 Metadata"]
        C2["• 3 messages<br/>• 10 min duration<br/>• A ↔ B participants<br/>• Blake3 anonymized"]
    end
    
    style Input fill:#ffe0e0
    style Processing fill:#fff3e0
    style Output fill:#e8f5e8
    style Metadata fill:#f0f9ff
```

**The Transformation**: Individual JSON objects become natural conversation flow with timing context and participant anonymization - perfect for review and analysis.

## File Details

| File | Content | Purpose |
|------|---------|---------|
| `threads_*.csv` | Tweet conversations with metadata | Data analysis |
| `threads_*.txt` | Human-readable tweet threads | Review conversations |
| `dm_threads_*.csv` | DM conversations with timing | Data analysis |
| `dm_threads_*.txt` | Human-readable DM threads | Review private messages |
| `timeline_analysis_*.csv` | Activity patterns and statistics | Behavioral analysis |
| `timeline_analysis_*.txt` | Activity insights and summaries | Understanding patterns |
| `results_*.txt` | Processing summary and statistics | Overview |

## Privacy & Security

**All processing happens locally** - your data never leaves your machine. User IDs are anonymized using Blake3 hashing for privacy protection.

### Built-in Safety Features
- Local processing only (no network connections)
- Automatic git protection for private data
- Blake3 anonymization for user identifiers
- Comprehensive .gitignore protection

```bash
# Safety check before commits
./check_data_safety.sh
```

## Performance

- Processes 50,000+ tweets efficiently
- Handles large DM archives with streaming
- Parallel processing for optimal speed
- Memory-efficient design

## Development

```bash
# Run tests
cargo test

# Check code quality
cargo clippy
```

### Architecture
- `models/` - Data structures for tweets, DMs, and analysis
- `processing/` - JSON parsing and data transformation  
- `relationship/` - Intelligence extraction and report generation
- `services/` - Timeline analysis and pattern detection

## File Splitter Utility

Split large archive files into manageable chunks:

```bash
cargo build --release --bin file-splitter
./target/release/file-splitter large_archive.js

# Custom options
./target/release/file-splitter -i tweets.js -s 5M -o chunks/
```

## License

MIT License

---

*Like the Marauder's Map, Tweet-Scrolls reveals the hidden patterns in your digital world.*

## Architecture

```mermaid
graph TD
    subgraph CLI ["🖥️ CLI Layer"]
        A1["main.rs<br/>Entry point<br/>User interaction"]
        A2["cli.rs<br/>Command line interface<br/>Argument parsing<br/>Interactive mode"]
    end
    
    subgraph Processing ["⚙️ Processing Layer"]
        B1["data_structures.rs<br/>Core data structures"]
        B2["file_io.rs<br/>File input/output"]
        B3["tweets.rs<br/>Tweet parsing"]
        B4["direct_messages.rs<br/>DM parsing"]
        B5["reply_threads.rs<br/>Thread reconstruction"]
        B6["dm_threads.rs<br/>DM threading"]
    end
    
    subgraph Analysis ["🔍 Analysis Layer"]
        C1["analyzer.rs<br/>Core analysis engine"]
        C2["timeline_analyzer.rs<br/>Timeline patterns"]
        C3["relationship/analyzer.rs<br/>Relationship intelligence"]
        C4["anonymization.rs<br/>Privacy protection"]
    end
    
    subgraph Output ["📤 Output Layer"]
        D1["file_generation.rs<br/>File orchestration"]
        D2["text_generators.rs<br/>Human-readable text"]
        D3["prompts_generator.rs<br/>LLM analysis prompts"]
        D4["enhanced_csv_writer.rs<br/>CSV output"]
    end
    
    subgraph Models ["📦 Data Models"]
        E1["direct_message.rs<br/>DM structures"]
        E2["profile.rs<br/>User profiles"]
        E3["statistics.rs<br/>Statistical data"]
        E4["timeline.rs<br/>Timeline structures"]
    end
    
    CLI --> Processing
    Processing --> Analysis
    Analysis --> Output
    Models -.-> Processing
    Models -.-> Analysis
    Models -.-> Output
    
    style CLI fill:#e3f2fd
    style Processing fill:#fff3e0
    style Analysis fill:#f3e5f5
    style Output fill:#e8f5e8
    style Models fill:#fce4ec
```

## Output Analysis

*"Like organizing a messy bookshelf into a beautiful library..."*

```mermaid
flowchart TD
    subgraph Files ["📊 Generated Data Files"]
        A1["threads_*.csv<br/>Tweet conversations"]
        A2["dm_threads_*.csv<br/>DM conversations"]
        A3["timeline_analysis_*.csv<br/>Activity patterns"]
        A4["*.txt files<br/>Human-readable formats"]
    end
    
    Files --> Analysis
    
    subgraph Analysis ["📈 What You Can Discover"]
        B1["📊 Conversation patterns<br/>• Thread lengths<br/>• Response frequencies"]
        B2["⏰ Activity insights<br/>• Peak hours<br/>• Most active days"]
    end
    
    Analysis --> Privacy
    
    subgraph Privacy ["🔐 Privacy Protected"]
        C1["🔒 Blake3 anonymization<br/>🛡️ Local processing<br/>🚫 No network calls"]
    end
    
    style Files fill:#e3f2fd
    style Analysis fill:#fff3e0
    style Privacy fill:#fdf2f8
```

**The Result**: Your digital conversations become organized, structured data that preserves conversation flow and timing while protecting your privacy through local processing and anonymization.

---

*Like the Marauder's Map, Tweet-Scrolls reveals the hidden patterns in your digital world.*

================================================
FILE: tests/integration_tests.rs
================================================
//! Integration tests for Tweet-Scrolls
//! 
//! All tests consolidated here per steering document requirements.
//! Tests realistic Twitter export processing with actual data structures.

use std::collections::HashMap;
use tempfile::tempdir;

use tweet_scrolls::*;

// ============================================================================
// REALISTIC TEST DATA GENERATORS (Based on Actual Twitter Export Structure)
// ============================================================================

/// Creates realistic DM data matching actual Twitter export format
fn create_realistic_dm_data() -> Vec<models::direct_message::DmWrapper> {
    vec![
        models::direct_message::DmWrapper {
            dm_conversation: models::direct_message::DmConversation {
                conversation_id: "3382-1132151165410455552".to_string(),
                messages: vec![
                    models::direct_message::DmMessage {
                        message_create: Some(models::direct_message::DmMessageCreate {
                            recipient_id: Some("3382".to_string()),
                            reactions: vec![],
                            urls: vec![],
                            text: Some("Hey, are you planning on having a co-founder for your startup?".to_string()),
                            media_urls: vec![],
                            sender_id: Some("1132151165410455552".to_string()),
                            id: Some("1927384914816532581".to_string()),
                            created_at: Some("2025-05-27T15:22:27.518Z".to_string()),
                            edit_history: vec![],
                        })
                    },
                    models::direct_message::DmMessage {
                        message_create: Some(models::direct_message::DmMessageCreate {
                            recipient_id: Some("1132151165410455552".to_string()),
                            reactions: vec![],
                            urls: vec![],
                            text: Some("Not sure yet, still exploring options. What do you think?".to_string()),
                            media_urls: vec![],
                            sender_id: Some("3382".to_string()),
                            id: Some("1916872219248173473".to_string()),
                            created_at: Some("2025-04-28T15:08:45.535Z".to_string()),
                            edit_history: vec![],
                        })
                    }
                ]
            }
        },
        models::direct_message::DmWrapper {
            dm_conversation: models::direct_message::DmConversation {
                conversation_id: "3382-9876543210".to_string(),
                messages: vec![
                    models::direct_message::DmMessage {
                        message_create: Some(models::direct_message::DmMessageCreate {
                            recipient_id: Some("9876543210".to_string()),
                            reactions: vec![],
                            urls: vec![],
                            text: Some("Thanks for the introduction!".to_string()),
                            media_urls: vec![],
                            sender_id: Some("3382".to_string()),
                            id: Some("1925000000000000000".to_string()),
                            created_at: Some("2025-05-20T10:00:00.000Z".to_string()),
                            edit_history: vec![],
                        })
                    }
                ]
            }
        }
    ]
}

/// Creates realistic Tweet data matching actual Twitter export format
fn create_realistic_tweet_data() -> Vec<processing::data_structures::TweetWrapper> {
    use processing::data_structures::*;
    
    vec![
        TweetWrapper {
            tweet: Tweet {
                id_str: "1947489885754986818".to_string(),
                id: "1947489885754986818".to_string(),
                full_text: "Via @NotebookLM whom I fed thousands of my tweets in txt format for analysis".to_string(),
                created_at: "Tue Jul 22 02:52:26 +0000 2025".to_string(),
                favorite_count: "5".to_string(),
                retweet_count: "0".to_string(),
                retweeted: false,
                favorited: false,
                truncated: false,
                lang: "en".to_string(),
                source: "<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
                display_text_range: vec!["0".to_string(), "270".to_string()],
                in_reply_to_status_id: None,
                in_reply_to_status_id_str: None,
                in_reply_to_user_id: None,
                in_reply_to_user_id_str: None,
                in_reply_to_screen_name: Some("testuser".to_string()),
                edit_info: None,
                entities: TweetEntities {
                    hashtags: vec![],
                    symbols: vec![],
                    user_mentions: vec![
                        UserMention {
                            name: "NotebookLM".to_string(),
                            screen_name: "NotebookLM".to_string(),
                            indices: vec!["4".to_string(), "15".to_string()],
                            id_str: "1846671939437252609".to_string(),
                            id: "1846671939437252609".to_string(),
                        }
                    ],
                    urls: vec![],
                },
                possibly_sensitive: None,
            }
        },
        TweetWrapper {
            tweet: Tweet {
                id_str: "1947478130287120782".to_string(),
                id: "1947478130287120782".to_string(),
                full_text: "@TnvMadhav Been @dhh @jasonfried fan since I came to twitter in 2021".to_string(),
                created_at: "Tue Jul 22 02:05:43 +0000 2025".to_string(),
                favorite_count: "0".to_string(),
                retweet_count: "0".to_string(),
                retweeted: false,
                favorited: false,
                truncated: false,
                lang: "en".to_string(),
                source: "<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android</a>".to_string(),
                display_text_range: vec!["0".to_string(), "68".to_string()],
                in_reply_to_status_id: Some("1947467485424562448".to_string()),
                in_reply_to_status_id_str: Some("1947467485424562448".to_string()),
                in_reply_to_user_id: Some("848022794629730304".to_string()),
                in_reply_to_user_id_str: Some("848022794629730304".to_string()),
                in_reply_to_screen_name: Some("TnvMadhav".to_string()),
                edit_info: None,
                entities: TweetEntities {
                    hashtags: vec![],
                    symbols: vec![],
                    user_mentions: vec![
                        UserMention {
                            name: "TnvMadhav".to_string(),
                            screen_name: "TnvMadhav".to_string(),
                            indices: vec!["0".to_string(), "10".to_string()],
                            id_str: "848022794629730304".to_string(),
                            id: "848022794629730304".to_string(),
                        }
                    ],
                    urls: vec![],
                },
                possibly_sensitive: None,
            }
        }
    ]
}

// ============================================================================
// CORE FUNCTIONALITY TESTS (Missing from current implementation)
// ============================================================================

#[tokio::test]
async fn test_tweet_processing_end_to_end() {
    let _temp_dir = tempdir().unwrap();
    let tweets = create_realistic_tweet_data();
    
    // Test the core tweet processing pipeline
    let threads = tweet_scrolls::processing::tweets::process_tweets_simple(&tweets, "testuser").await.unwrap();
    
    // Verify threads were created
    assert!(!threads.is_empty(), "Should create threads from tweet data");
    
    // Verify thread structure
    for thread in &threads {
        assert!(!thread.tweets.is_empty(), "Thread should contain tweets");
        assert!(!thread.tweets[0].full_text.is_empty(), "Tweet should have content");
    }
    
    // Verify chronological ordering (newest first)
    if threads.len() > 1 {
        let first_thread_time = &threads[0].tweets[0].created_at;
        let second_thread_time = &threads[1].tweets[0].created_at;
        // Note: This would need proper date parsing for real comparison
        assert!(!first_thread_time.is_empty());
        assert!(!second_thread_time.is_empty());
    }
}

#[tokio::test]
async fn test_dm_processing_end_to_end() {
    let _temp_dir = tempdir().unwrap();
    let dm_data = create_realistic_dm_data();
    
    // Test the core DM processing pipeline
    let conversations = tweet_scrolls::processing::direct_messages::process_dm_conversations(&dm_data, "testuser").await.unwrap();
    
    // Verify conversations were created
    assert!(!conversations.is_empty(), "Should create conversations from DM data");
    
    // Verify conversation structure
    for conversation in &conversations {
        assert!(!conversation.conversation_id.is_empty(), "Conversation should have ID");
        assert!(conversation.message_count > 0, "Conversation should have messages");
        assert!(!conversation.participants.is_empty(), "Conversation should have participants");
    }
    
    // Verify sorting by message count (descending)
    if conversations.len() > 1 {
        assert!(conversations[0].message_count >= conversations[1].message_count,
                "Conversations should be sorted by message count descending");
    }
}

#[tokio::test]
async fn test_relationship_analysis_pipeline() {
    let dm_data = create_realistic_dm_data();
    let tweet_data = create_realistic_tweet_data();
    
    // Test relationship analyzer creation
    let analyzer = relationship::RelationshipAnalyzer::new();
    
    // Test user extraction from both data sources
    let dm_users = analyzer.extract_users_from_dms(&dm_data);
    let tweets: Vec<_> = tweet_data.iter().map(|tw| tw.tweet.clone()).collect();
    let tweet_users = analyzer.extract_users_from_tweets(&tweets);
    
    // Verify users were extracted
    assert!(!dm_users.is_empty(), "Should extract users from DM data");
    assert!(!tweet_users.is_empty(), "Should extract users from tweet data");
    
    // Test profile creation
    for user_hash in &dm_users {
        let profile = analyzer.create_user_profile(user_hash, &dm_data);
        assert_eq!(profile.user_hash, *user_hash, "Profile should match user hash");
        assert!(profile.total_interactions > 0, "Profile should have interactions");
    }
    
    // Test timeline building
    let timeline = analyzer.build_timeline(&dm_data, &tweets);
    assert!(!timeline.is_empty(), "Should build interaction timeline");
}

#[tokio::test]
async fn test_file_output_generation() {
    let _temp_dir = tempdir().unwrap();
    let output_dir = _temp_dir.path().to_str().unwrap();
    
    let tweets = create_realistic_tweet_data();
    let _dm_data = create_realistic_dm_data();
    
    // Test CSV output generation
    let threads = tweet_scrolls::processing::tweets::process_tweets_simple(&tweets, "testuser").await.unwrap();
    
    // Create output directory
    let _timestamp = 1234567890; // Fixed timestamp for testing
    let output_path = std::path::Path::new(output_dir).join("output_testuser_1234567890");
    std::fs::create_dir_all(&output_path).unwrap();
    
    // Write enhanced CSV output
    let csv_path = output_path.join("threads_testuser_1234567890.csv");
    let mut csv_writer = tweet_scrolls::utils::enhanced_csv_writer::EnhancedCsvWriter::new(
        csv_path.to_str().unwrap()
    ).await.unwrap();
    
    for thread in &threads {
        csv_writer.write_thread(thread, "testuser").await.unwrap();
    }
    csv_writer.finalize().await.unwrap();
    
    // Verify CSV file was created and has the expected headers
    assert!(csv_path.exists(), "CSV file was not created");
    
    // Read the CSV file and verify its contents
    let mut rdr = csv::Reader::from_path(&csv_path).unwrap();
    let headers = rdr.headers().unwrap().clone();
    
    // Verify expected headers are present
    let expected_headers = [
        "tweet_id", "tweet_text", "tweet_type", "created_at", 
        "favorite_count", "retweet_count", "thread_id", 
        "thread_position", "twitter_url", "reply_context"
    ];
    
    for header in &expected_headers {
        assert!(
            headers.iter().any(|h| h == *header),
            "Missing expected header: {}",
            header
        );
    }
    
    // Verify at least one record was written
    let records: Vec<_> = rdr.records().collect::<Result<_, _>>().unwrap();
    assert!(!records.is_empty(), "No records were written to the CSV");
    
    // Verify tweet type and URL are populated
    for record in records {
        let tweet_type = record.get(2).unwrap(); // tweet_type column
        let twitter_url = record.get(11).unwrap(); // twitter_url column
        
        // Verify tweet type is one of the expected values
        assert!(
            ["Original", "ReplyToUser", "ReplyToOthers"].contains(&tweet_type),
            "Unexpected tweet type: {}",
            tweet_type
        );
        
        // Verify URL format
        assert!(
            twitter_url.starts_with("https://twitter.com/") && twitter_url.ends_with(&format!("/status/{}", record.get(0).unwrap())),
            "Invalid Twitter URL format: {}",
            twitter_url
        );
    }
}

#[test]
fn test_javascript_prefix_removal() {
    let js_content = "window.YTD.direct_messages.part0 = [{\"dm_conversation\":{\"conversation_id\":\"test\"}}]";
    
    // Test JavaScript prefix removal logic
    let cleaned = if let Some(stripped) = js_content.strip_prefix("window.YTD.direct_messages.part0 = ") {
        stripped
    } else {
        js_content
    };
    
    assert!(cleaned.starts_with("[{"), "Should remove JavaScript prefix");
    assert!(!cleaned.contains("window.YTD"), "Should not contain JavaScript prefix");
}

#[test]
fn test_retweet_filtering() {
    let mut tweets = create_realistic_tweet_data();
    
    // Add a retweet to test data
    let mut retweet = tweets[0].clone();
    retweet.tweet.retweeted = true;
    retweet.tweet.full_text = "RT @someone: This is a retweet".to_string();
    tweets.push(retweet);
    
    // Test filtering logic
    let filtered: Vec<_> = tweets.iter()
        .filter(|tw| !tw.tweet.retweeted && !tw.tweet.full_text.starts_with("RT @"))
        .collect();
    
    assert_eq!(filtered.len(), 2, "Should filter out retweets");
    for tweet in filtered {
        assert!(!tweet.tweet.retweeted, "Filtered tweets should not be retweets");
        assert!(!tweet.tweet.full_text.starts_with("RT @"), "Should not start with RT @");
    }
}

#[test]
fn test_user_anonymization_consistency() {
    let user_id = "1132151165410455552";
    
    // Test that anonymization is consistent
    let hash1 = relationship::hash_user_id(user_id);
    let hash2 = relationship::hash_user_id(user_id);
    
    assert_eq!(hash1, hash2, "Hash should be consistent for same input");
    assert_ne!(hash1, user_id, "Hash should be different from original");
    assert_eq!(hash1.len(), 64, "Blake3 hash should be 64 characters");
    
    // Test different inputs produce different hashes
    let different_hash = relationship::hash_user_id("different_user");
    assert_ne!(hash1, different_hash, "Different inputs should produce different hashes");
}

#[test]
fn test_large_data_structures() {
    // Test with larger datasets to simulate real usage
    let mut large_dm_data = Vec::new();
    
    // Create 100 conversations with multiple messages each
    for i in 0..100 {
        let conversation = models::direct_message::DmWrapper {
            dm_conversation: models::direct_message::DmConversation {
                conversation_id: format!("user_{}-sender_{}", i % 10, (i + 1) % 20),
                messages: (0..5).map(|j| {
                    models::direct_message::DmMessage {
                        message_create: Some(models::direct_message::DmMessageCreate {
                            recipient_id: Some(format!("user_{}", i % 10)),
                            reactions: vec![],
                            urls: vec![],
                            text: Some(format!("Message {} in conversation {}", j, i)),
                            media_urls: vec![],
                            sender_id: Some(format!("sender_{}", (i + j) % 20)),
                            id: Some(format!("msg_{}_{}", i, j)),
                            created_at: Some("2025-01-01T00:00:00.000Z".to_string()),
                            edit_history: vec![],
                        })
                    }
                }).collect()
            }
        };
        large_dm_data.push(conversation);
    }
    
    // Test that we can handle larger datasets
    let analyzer = relationship::RelationshipAnalyzer::new();
    let users = analyzer.extract_users_from_dms(&large_dm_data);
    
    assert!(users.len() >= 10, "Should extract multiple unique users");
    assert!(users.len() <= 30, "Should have reasonable number of unique users");
    
    // Test profile creation with larger dataset
    let first_user = users.iter().next().unwrap();
    let profile = analyzer.create_user_profile(first_user, &large_dm_data);
    
    assert!(profile.total_interactions > 0, "Profile should have interactions from large dataset");
}

// ============================================================================
// CONSOLIDATED EXISTING TESTS (Moved from individual modules)
// ============================================================================

// User Profile Tests
#[test]
fn test_user_profile_creation() {
    let profile = models::profile::UserProfile::new("test_user_hash");
    assert_eq!(profile.user_hash, "test_user_hash");
    assert_eq!(profile.total_interactions, 0);
    assert!(profile.interaction_counts.is_empty());
}

#[test]
fn test_user_profile_add_interaction() {
    let mut profile = models::profile::UserProfile::new("test_user");
    use chrono::TimeZone;
    let timestamp = chrono::Utc.with_ymd_and_hms(2023, 1, 1, 12, 0, 0).unwrap();
    profile.add_interaction("dm_sent", timestamp);
    
    assert_eq!(profile.total_interactions, 1);
    assert_eq!(profile.interaction_counts.get("dm_sent"), Some(&1));
}

// Anonymization Tests
#[test]
fn test_hash_consistency() {
    let user_id = "test_user_123";
    let hash1 = relationship::hash_user_id(user_id);
    let hash2 = relationship::hash_user_id(user_id);
    assert_eq!(hash1, hash2);
}

#[test]
fn test_hash_uniqueness() {
    let hash1 = relationship::hash_user_id("user1");
    let hash2 = relationship::hash_user_id("user2");
    assert_ne!(hash1, hash2);
}

// Communication Tests
#[test]
fn test_calculate_response_times_empty() {
    let messages = vec![];
    let response_times = relationship::communication::calculate_response_times(&messages);
    assert!(response_times.is_empty());
}

#[test]
fn test_calculate_average_response_time_empty() {
    let response_times = vec![];
    let avg = relationship::communication::calculate_average_response_time(&response_times);
    assert_eq!(avg, std::time::Duration::ZERO);
}

// Timeline Integration Tests
#[test]
fn test_analyze_hourly_activity_empty() {
    let events = vec![];
    let activity = relationship::timeline_integration::analyze_hourly_activity(&events);
    assert_eq!(activity.len(), 24);
    assert!(activity.iter().all(|&count| count == 0));
}

#[test]
fn test_find_most_active_day_empty() {
    let events = vec![];
    let result = relationship::timeline_integration::find_most_active_day(&events);
    assert!(result.is_none());
}

// File Generation Tests

#[tokio::test]
async fn test_create_directory_structure() {
    let _temp_dir = tempdir().unwrap();
    let generator = relationship::file_generation::LLMFileGenerator::new(
        _temp_dir.path().to_str().unwrap(), 
        "testuser", 
        1234567890
    );
    
    let profiles_dir = generator.create_directory_structure().await.unwrap();
    assert!(tokio::fs::metadata(&profiles_dir).await.is_ok());
    assert!(profiles_dir.contains("relationship_profiles_testuser_1234567890"));
}

// Text Generation Tests
#[test]
fn test_generate_user_profile_text() {
    let mut profile = models::profile::UserProfile::new("test_user_hash_123456");
    profile.total_interactions = 42;
    profile.interaction_counts.insert("dm_messages".to_string(), 25);
    profile.interaction_counts.insert("dm_received".to_string(), 17);
    
    let timeline = vec![];
    let profile_text = relationship::text_generators::generate_user_profile_text(&profile, &timeline);
    
    assert!(profile_text.contains("USER RELATIONSHIP PROFILE"));
    assert!(profile_text.contains("test_user_hash_123456"));
    assert!(profile_text.contains("Total Interactions: 42"));
    assert!(profile_text.contains("dm_messages: 25"));
}

#[test]
fn test_generate_timeline_text() {
    use chrono::TimeZone;
    use models::interaction::{InteractionEvent, InteractionType};
    
    let timeline = vec![
        InteractionEvent::new(
            "event1",
            chrono::Utc.with_ymd_and_hms(2023, 6, 15, 14, 30, 0).unwrap(),
            InteractionType::DmSent,
            "test_user_hash_123456",
            "Test message content"
        ),
    ];
    
    let timeline_text = relationship::timeline_text::generate_timeline_text(&timeline);
    
    assert!(timeline_text.contains("CHRONOLOGICAL INTERACTION LOG"));
    assert!(timeline_text.contains("Total Events: 1"));
    assert!(timeline_text.contains("2023-06"));
}

#[test]
fn test_generate_llm_analysis_prompts() {
    let mut profiles = HashMap::new();
    let mut profile = models::profile::UserProfile::new("test_user");
    profile.total_interactions = 42;
    profiles.insert("user1".to_string(), profile);
    
    let prompts = relationship::prompts_generator::generate_llm_analysis_prompts(&profiles);
    
    assert!(prompts.contains("Which relationships need more attention"));
    assert!(prompts.contains("What communication patterns make conversations most engaging"));
    assert!(prompts.contains("Total relationships analyzed: 1"));
    assert!(prompts.contains("Blake3 hashing for privacy"));
}

// Data Structure Tests
#[test]
fn test_tweet_creation() {
    use processing::data_structures::{Tweet, TweetEntities};
    
    let tweet = Tweet {
        id_str: "123".to_string(),
        id: "123".to_string(),
        full_text: "test tweet".to_string(),
        created_at: "Mon Jan 01 12:00:00 +0000 2023".to_string(),
        favorite_count: "0".to_string(),
        retweet_count: "0".to_string(),
        retweeted: false,
        favorited: false,
        truncated: false,
        lang: "en".to_string(),
        source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
        display_text_range: vec!["0".to_string(), "10".to_string()],
        in_reply_to_status_id: None,
        in_reply_to_status_id_str: None,
        in_reply_to_user_id: None,
        in_reply_to_user_id_str: None,
        in_reply_to_screen_name: None,
        edit_info: None,
        entities: TweetEntities {
            hashtags: vec![],
            symbols: vec![],
            user_mentions: vec![],
            urls: vec![],
        },
        possibly_sensitive: None,
    };
    
    assert_eq!(tweet.full_text, "test tweet");
    assert_eq!(tweet.id, "123");
    assert!(!tweet.retweeted);
}

#[test]
fn test_thread_creation() {
    use processing::data_structures::{Tweet, TweetEntities};
    
    let tweet = Tweet {
        id_str: "123".to_string(),
        id: "123".to_string(),
        full_text: "test tweet".to_string(),
        created_at: "Mon Jan 01 12:00:00 +0000 2023".to_string(),
        favorite_count: "0".to_string(),
        retweet_count: "0".to_string(),
        retweeted: false,
        favorited: false,
        truncated: false,
        lang: "en".to_string(),
        source: "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web App</a>".to_string(),
        display_text_range: vec!["0".to_string(), "10".to_string()],
        in_reply_to_status_id: None,
        in_reply_to_status_id_str: None,
        in_reply_to_user_id: None,
        in_reply_to_user_id_str: None,
        in_reply_to_screen_name: None,
        edit_info: None,
        entities: TweetEntities {
            hashtags: vec![],
            symbols: vec![],
            user_mentions: vec![],
            urls: vec![],
        },
        possibly_sensitive: None,
    };
    
    let thread = processing::data_structures::Thread {
        id: "thread_123".to_string(),
        tweets: vec![tweet],
        tweet_count: 1,
        favorite_count: 0,
        retweet_count: 0,
    };
    
    assert_eq!(thread.tweets.len(), 1);
    assert_eq!(thread.tweet_count, 1);
}

// Utility Tests
#[test]
fn test_format_duration() {
    let duration = chrono::TimeDelta::hours(2) + chrono::TimeDelta::minutes(30);
    let formatted = utils::format_duration(duration);
    assert!(formatted.contains("2h") || formatted.contains("hour"));
}

#[test]
fn test_format_timestamp() {
    use chrono::TimeZone;
    let timestamp = chrono::Utc.with_ymd_and_hms(2023, 6, 15, 14, 30, 0).unwrap();
    let formatted = utils::format_timestamp(&timestamp);
    // format_timestamp returns relative time for recent dates, absolute format for old dates
    assert!(formatted.contains("ago") || formatted == "just now" || formatted.contains("2023") || formatted.contains("Jun"));
}

================================================
FILE: tests/timeline_tests.rs
================================================
//! Tests for timeline generation and analysis

use tweet_scrolls::models::interaction::*;
use tweet_scrolls::services::timeline::*;
use chrono::{TimeZone, Utc};

/// Helper function to create test interaction events
fn create_test_events() -> Vec<InteractionEvent> {
    let user1 = "user1".to_string();
    let user2 = "user2".to_string();
    
    vec![
        InteractionEvent::new(
            "1",
            Utc.with_ymd_and_hms(2024, 1, 1, 12, 0, 0).unwrap(),
            InteractionType::DmSent,
            &user1,
            "Hello"
        ),
        InteractionEvent::new(
            "2",
            Utc.with_ymd_and_hms(2024, 1, 1, 12, 5, 0).unwrap(),
            InteractionType::DmReceived,
            &user2,
            "Hi there!"
        ),
        InteractionEvent::new(
            "3",
            Utc.with_ymd_and_hms(2024, 1, 1, 12, 10, 0).unwrap(),
            InteractionType::DmSent,
            &user1,
            "How are you?"
        ),
    ]
}

#[test]
fn test_build_timeline() {
    let mut events = create_test_events();
    let timeline = build_timeline(&mut events);
    
    // Verify events are in reverse chronological order (newest first)
    assert!(timeline.windows(2).all(|w| w[0].timestamp >= w[1].timestamp));
}

#[test]
fn test_group_into_conversations() {
    let events = create_test_events();
    let conversations = group_into_conversations(events, 3600); // 1-hour window
    
    // Should group all events into one conversation
    assert_eq!(conversations.len(), 1);
    assert_eq!(conversations[0].events.len(), 3);
}

#[test]
fn test_calculate_response_times() {
    let mut conversation = ConversationThread::new("test");
    for event in create_test_events() {
        conversation.add_event(event);
    }
    
    let response_times = calculate_response_times(&conversation);
    
    // Should have one less response time than number of events
    assert_eq!(response_times.len(), conversation.events.len() - 1);
    // First response time should be 5 minutes (300 seconds)
    assert_eq!(response_times[0].num_seconds(), 300);
}


================================================
FILE: tests/file_generation_tests.rs
================================================
use tweet_scrolls::relationship::file_generation::{LLMFileGenerator, generate_profile_text, generate_timeline_text, generate_llm_analysis_prompts};
use tweet_scrolls::models::profile::UserProfile;
use tweet_scrolls::models::interaction::InteractionEvent;
use tweet_scrolls::relationship::anonymization::hash_user_id;
use chrono::{DateTime, Utc};
use std::collections::HashMap;
use tempfile::tempdir;

#[cfg(test)]
mod file_generation_tests {
    use super::*;

    fn create_sample_user_profile() -> UserProfile {
        let user_hash = hash_user_id("1132151165410455552");
        let mut profile = UserProfile::new(user_hash);
        profile.total_interactions = 25;
        profile.first_interaction = Some("2023-01-01T10:00:00Z".parse::<DateTime<Utc>>().unwrap());
        profile.last_interaction = Some("2023-12-31T15:30:00Z".parse::<DateTime<Utc>>().unwrap());
        profile.interaction_counts = HashMap::from([
            ("dm_sent".to_string(), 12),
            ("dm_received".to_string(), 8),
            ("tweet_reply".to_string(), 5),
        ]);
        profile.metadata = HashMap::from([
            ("analysis_version".to_string(), "1.0".to_string()),
            ("data_source".to_string(), "twitter_export".to_string()),
        ]);
        profile
    }

    fn create_sample_interactions() -> Vec<InteractionEvent> {
        vec![
            InteractionEvent::new(
                "msg_001",
                "2023-06-15T10:30:00Z".parse::<DateTime<Utc>>().unwrap(),
                tweet_scrolls::models::interaction::InteractionType::DmSent,
                hash_user_id("user1"),
                "Hey, how are you doing?"
            ).with_metadata("conversation_id", "user1-user2"),
            InteractionEvent::new(
                "msg_002", 
                "2023-06-15T14:45:00Z".parse::<DateTime<Utc>>().unwrap(),
                tweet_scrolls::models::interaction::InteractionType::DmReceived,
                hash_user_id("user2"),
                "I'm doing great! Thanks for asking."
            ).with_metadata("conversation_id", "user1-user2"),
        ]
    }

    #[test]
    fn test_generate_user_profile_text() {
        let profile = create_sample_user_profile();
        let profile_text = generate_profile_text(&profile);
        
        assert!(profile_text.contains("USER RELATIONSHIP PROFILE"));
        assert!(profile_text.contains("COMMUNICATION STATISTICS"));
        assert!(profile_text.contains("TEMPORAL PATTERNS"));
        assert!(profile_text.contains("Total Interactions: 25"));
        assert!(profile_text.contains("dm_sent: 12 interactions"));
        assert!(profile_text.contains("dm_received: 8 interactions"));
        assert!(profile_text.contains("tweet_reply: 5 interactions"));
        assert!(profile_text.contains("2023-01-01"));
        assert!(profile_text.contains("2023-12-31"));
    }

    #[test]
    fn test_generate_timeline_text() {
        let interactions = create_sample_interactions();
        let timeline_text = generate_timeline_text(&interactions);
        
        assert!(timeline_text.contains("INTERACTION TIMELINE"));
        assert!(timeline_text.contains("2023-06-15"));
        assert!(timeline_text.contains("DmSent"));
        assert!(timeline_text.contains("DmReceived"));
        assert!(timeline_text.contains("Hey, how are you doing?"));
        assert!(timeline_text.contains("I'm doing great! Thanks for asking."));
        assert!(timeline_text.contains("msg_001"));
        assert!(timeline_text.contains("msg_002"));
    }

    #[test]
    fn test_llm_file_generator_creation() {
        let temp_dir = tempdir().unwrap();
        let output_path = temp_dir.path().to_str().unwrap();
        
        let generator = LLMFileGenerator::new(output_path, "testuser", 1234567890);
        
        assert_eq!(generator.screen_name, "testuser");
        assert_eq!(generator.timestamp, 1234567890);
        assert!(generator.output_dir.contains("testuser"));
    }

    #[test]
    fn test_generate_individual_profile_file() {
        let temp_dir = tempdir().unwrap();
        let output_path = temp_dir.path().to_str().unwrap();
        let generator = LLMFileGenerator::new(output_path, "testuser", 1234567890);
        
        let profile = create_sample_user_profile();
        let result = generator.generate_individual_profile_file(&profile);
        
        assert!(result.is_ok());
        
        // Verify file was created
        let expected_filename = format!("user_{}_profile.txt", &profile.user_hash[..8]);
        let file_path = std::path::Path::new(output_path)
            .join("relationship_profiles_testuser_1234567890")
            .join(&expected_filename);
        assert!(file_path.exists());
    }

    #[test]
    fn test_generate_llm_analysis_prompts() {
        let profiles = vec![create_sample_user_profile()];
        let prompts = generate_llm_analysis_prompts(&profiles);
        
        // Check for key sections that should be in the prompts
        assert!(prompts.contains("LLM ANALYSIS PROMPTS"));
        assert!(prompts.contains("RELATIONSHIP HEALTH ANALYSIS"));
        assert!(prompts.contains("Which relationships need more attention"));
        assert!(prompts.contains("communication patterns"));
        assert!(prompts.contains("TOTAL RELATIONSHIPS ANALYZED: 1"));
        assert!(prompts.len() > 500); // Should be a substantial prompt file
    }

    #[test]
    fn test_file_output_structure() {
        let temp_dir = tempdir().unwrap();
        let output_path = temp_dir.path().to_str().unwrap();
        let generator = LLMFileGenerator::new(output_path, "testuser", 1234567890);
        
        let profiles = vec![create_sample_user_profile()];
        let interactions = create_sample_interactions();
        
        let result = generator.generate_all_files(&profiles, &interactions);
        assert!(result.is_ok());
        
        // Verify directory structure
        let base_dir = std::path::Path::new(output_path).join("relationship_profiles_testuser_1234567890");
        assert!(base_dir.exists());
        
        // Verify key files exist
        assert!(base_dir.join("interaction_timeline.txt").exists());
        assert!(base_dir.join("communication_patterns.txt").exists());
        assert!(base_dir.join("relationship_network.txt").exists());
        assert!(base_dir.join("llm_analysis_prompts.txt").exists());
    }
}

================================================
FILE: .kiro/steering/file_management.md
================================================
---
inclusion: always
---

# File Management and Code Organization Guidelines

## Critical File Size Requirements

### Maximum File Size Limits
- **Absolute Maximum**: 600 lines per file
- **Optimal Target**: 400-500 lines per file
- **Reasoning**: LLM context window limitations and maintainability

### Enforcement Strategy
- Use Minto Pyramid Principle for systematic decomposition
- Single responsibility per module
- Extract functions/structs when approaching limits
- Prefer multiple focused files over monolithic implementations

### File Size Monitoring
```bash
# Check file sizes regularly
find src -name "*.rs" -exec wc -l {} + | sort -nr

# Alert if any file exceeds 600 lines
find src -name "*.rs" -exec wc -l {} + | awk '$1 > 600 {print "WARNING: " $2 " has " $1 " lines (exceeds 600 limit)"}'
```

## Private Data Handling - CRITICAL SECURITY

### Private Data Location
- **Path**: `/home/amuldotexe/Desktop/GitHub202410/tweet-scrolls/private_data/REALDATA/`
- **Content**: Actual private Twitter archive data
- **Status**: ⚠️ **NEVER COMMIT TO VERSION CONTROL**

### Usage Guidelines
1. **For Test Data Modeling**: 
   - Examine first 200 and last 200 lines only
   - Create anonymized sample data based on structure
   - Never copy actual content or personal identifiers

2. **For Final Testing**:
   - Use for end-to-end validation of processing pipeline
   - Verify anonymization works correctly
   - Test performance with real data volumes

3. **Security Requirements**:
   - Always use relative paths in code
   - Never hardcode absolute paths to private data
   - Ensure .gitignore excludes private_data/ directory
   - Use anonymized hashes in any logs or outputs

### .gitignore Requirements
```
# Private data - NEVER COMMIT
private_data/
REALDATA/
*.twitter-archive
*.json.personal
*_private_*
```

## Code Organization Principles

### Module Structure
- Each module should have single responsibility
- Clear boundaries between processing, models, services
- Re-export commonly used types at module level
- Comprehensive documentation for public APIs

### Testing Strategy
- Test files can exceed 600 lines (testing is different)
- Use helper functions to reduce test code duplication
- Separate integration tests from unit tests
- Mock private data for CI/CD pipelines

### Performance Considerations
- Modular design should not impact runtime performance
- Use appropriate visibility (pub vs private)
- Minimize cross-module dependencies
- Profile memory usage with large datasets

================================================
FILE: .kiro/steering/structure.md
================================================
# Project Structure

## Root Directory Layout
```
tweet-scrolls/
├── src/
│   ├── main.rs              # Core application logic (MAX 800 lines)
│   └── integration_tests.rs # All test code moved here
├── zzBackup/                # Archive folder for old code/references
├── .kiro/                   # Kiro AI assistant configuration
├── Cargo.toml               # Rust package manifest
├── Cargo.lock               # Dependency lock file
├── ReadMe.md                # Main documentation (Harry Potter themed)
├── AGENT.md                 # AI assistant task list
├── ref01-prd.txt            # Product requirements document
├── ref02-architecture.txt   # Architecture and data flow diagrams
└── visualASCII202410.txt    # ASCII art or visual documentation
```

## Code Organization Principles

### File Size Limits (CRITICAL)
- **main.rs**: Maximum 800 lines - LLMs cannot handle larger files effectively
- **integration_tests.rs**: All test code goes here, no size limit
- **Any file**: If approaching 800 lines, refactor into smaller functions or modules

### TDD-Driven Modular Design

#### Test-Driven Development Cycle
1. **Red**: Write a failing test first
2. **Green**: Write minimal code to make test pass
3. **Refactor**: Clean up code while keeping tests passing
4. **Repeat**: Continue with next small feature

#### Function Design Principles
- **Small, Focused Functions**: Each function should do one thing well (10-50 lines max)
- **Pure Functions**: Prefer functions without side effects when possible
- **Clear Function Names**: Function names should describe exactly what they do
- **Single Responsibility**: One function = one responsibility
- **Testable Units**: Every function should be easily testable in isolation

#### Code Quality Standards
- **No Function Over 50 Lines**: Break down complex functions into smaller ones
- **Descriptive Variable Names**: `user_hash` not `uh`, `response_times` not `rt`
- **Error Handling**: Use `Result<T>` and `anyhow::Context` consistently
- **Documentation**: Public functions must have doc comments with examples

#### Modular Organization Within Single File
```rust
// 1. Imports and global allocator
// 2. Data structures (structs, enums)
// 3. Core business logic functions
// 4. I/O and file processing functions
// 5. Helper and utility functions
// 6. Main function (orchestration only)
```

#### Test Organization (in integration_tests.rs)
```rust
// 1. Helper functions for creating test data
// 2. Unit tests grouped by functionality
// 3. Integration tests for end-to-end workflows
// 4. Property-based tests for complex logic
```

## Key Data Structures
```rust
Tweet           # Individual tweet data from JSON
TweetWrapper    # JSON wrapper containing tweet
Thread          # Collection of related tweets
CsvWriter       # Async CSV writing handler
```

## Function Organization (in main.rs)
- `main()` - Entry point and orchestration
- `get_input_file()` / `get_screen_name()` - User input handling
- `process_tweets()` - Core processing pipeline
- `write_threads_to_file()` - Text output generation
- `write_csv()` - CSV output generation
- `CsvWriter` impl - Async CSV writing logic

## Output Structure
Generated in input file's parent directory:
```
output_<handle>_<timestamp>/
├── threads_<handle>_<timestamp>.csv    # Structured data
├── threads_<handle>_<timestamp>.txt    # Human-readable threads
└── results_<handle>_<timestamp>.txt    # Operation summary
```

## Documentation Files
- `ref01-prd.txt` - Product requirements and specifications
- `ref02-architecture.txt` - Data flow and architecture diagrams
- `ReadMe.md` - User-facing documentation with whimsical theming

================================================
FILE: .kiro/steering/product.md
================================================
# Product Overview

Tweet-Scrolls is a Rust CLI tool that processes Twitter JSON archive files to extract and organize tweet threads into readable formats with timeline analysis.

## Core Purpose
- Transforms chaotic Twitter JSON archives into organized conversation threads
- Filters out retweets and noise, keeping only meaningful discourse
- Provides both CSV data files and human-readable text outputs
- Focuses on thread reconstruction and conversation flow analysis
- Generates timeline analysis and activity pattern insights

## Key Features

### **Enhanced Thread Processing**
- **Thread Weaving**: Reconstructs ALL reply chains into complete conversations (not just self-replies)
- **DM Thread Conversion**: Transforms private message threads into readable conversation flows
- **Timeline Analysis**: Maps activity patterns and interaction timing
- **File Splitter Utility**: Splits large archives into manageable 1MB chunks

### **Advanced DM Thread Format (v2.0)**
- **Relative Timestamps**: Shows "2 hours later", "3 days later" instead of absolute times
- **Conversation-Focused Layout**: A/B participant labels instead of hash fragments
- **Reduced Metadata Density**: 62% size reduction while maintaining all information
- **Natural Flow**: Conversations read like chat logs with meaningful timing context
- **Smart Timing**: Only shows gaps >5 minutes to reduce noise

### **Temporal Analysis**
- Active hours detection (identifies peak interaction times)
- Weekly patterns (most active days of the week)
- Bursty activity detection (periods of high activity)
- Response time patterns and conversation rhythm analysis

### **Conversation Metrics**
- Response time statistics (average, median, percentiles)
- Interaction density analysis
- Activity pattern detection
- Timeline insights and summaries

### **Multi-Format Output**
- **CSV**: Structured data for analysis and processing
- **TXT**: Human-readable reports optimized for conversation flow
- **Analysis-Ready**: Formatted for review and pattern analysis
- **Chunked Files**: Large outputs automatically split into 1MB parts

### **Performance & Privacy**
- **Async Processing**: Buffered I/O with streaming for large files
- **Memory Efficient**: Handles 50K+ tweets and 3K+ DM conversations
- **Local Processing**: 100% local, no data leaves your machine
- **Blake3 Anonymization**: User IDs hashed for privacy protection

## Target Users
- Twitter power users wanting to organize their archives
- Researchers analyzing Twitter conversation patterns
- Content creators reviewing their thread performance
- Anyone needing structured data from Twitter JSON exports

## Unique Characteristics
- Harry Potter themed UI/UX in documentation
- Marvel Avengers themed progress messages during processing
- Whimsical but professional tone throughout
- Focus on conversation threads rather than individual tweets

================================================
FILE: .kiro/steering/current_status.md
================================================
# Current Project Status - Tweet-Scrolls
## As of August 8, 2025 - PRODUCTION COMPLETE

### ✅ ALL FUNCTIONALITY COMPLETE & TESTED

#### Core Features - ALL IMPLEMENTED
1. **Enhanced Tweet Processing**: Complete with ALL replies as threads
   - Handles 55K+ tweets efficiently
   - Enhanced thread reconstruction (ALL replies treated as threads, not just self-replies)
   - 100% accurate reply chain linking
   - Real data tested and verified

2. **DM Thread Conversion v2.0**: Complete with enhanced format and timing analysis
   - DM conversations converted to natural chat-like thread structures
   - **Relative Timestamps**: Shows "2 hours later", "3 days later" instead of absolute times
   - **Conversation-Focused Layout**: A/B participant labels instead of hash fragments
   - **62% Size Reduction**: From 28MB to 11MB while maintaining all information
   - **Smart Timing**: Only shows gaps >5 minutes to reduce noise
   - Timeline reconstruction with duration and response time analysis
   - Privacy protection with Blake3 anonymization
   - Real data tested: 3,599 conversations processed

3. **Timeline Analysis**: Complete with activity pattern detection
   - Activity timeline with temporal patterns
   - Timeline analysis with behavioral insights  
   - Communication timing and frequency analysis
   - CSV and TXT output generation for review

4. **File Splitter Utility**: Complete with comprehensive testing
   - Split large files into manageable chunks (default 1MB)
   - Extension preservation (including complex extensions like .tar.gz)
   - Custom output directories and filename prefixes
   - 16 comprehensive tests covering all functionality

5. **Simple CLI Interface**: Complete
   - Single command processes entire archive: `tweet-scrolls /path/to/archive`
   - Automatic file detection (tweets.js, direct-messages.js, etc.)
   - Non-interactive processing perfect for automation
   - Timestamped output directories

6. **Privacy & Security**: Complete with multiple layers
   - Blake3 anonymization for all user IDs
   - Local processing only - no data leaves machine
   - Git hooks prevent accidental commits of private data
   - Comprehensive .gitignore protection

### �� COMPREHENSIVE TEST COVERAGE

1. **Test Suite Status**: 118+ Total Tests ✅
   - 85+ Library Tests ✅ (including new file splitter tests)
   - 5+ Binary Tests ✅ (CLI argument parsing)
   - 24+ Integration Tests ✅ (end-to-end workflows)
   - 6+ Documentation Tests ✅ (API examples)

2. **Coverage Areas**:
   - Unit Tests: All core functionality tested
   - Integration Tests: Complete end-to-end workflows
   - Real Data Tests: Verified with 55K+ tweets and 3.6K DMs
   - CLI Tests: Argument parsing and error handling
   - File Splitter Tests: 16 comprehensive tests

### 🎯 PROJECT COMPLETE - READY FOR PRODUCTION

✅ **All Features Implemented and Tested**:
- Enhanced thread reconstruction with ALL replies as threads
- DM thread conversion with timing analysis
- Timeline analysis with activity pattern insights
- File splitter utility for archive management
- Simple CLI interface with automatic detection
- Comprehensive privacy protection

✅ **Quality Assurance Complete**:
- All tests passing (118+ tests)
- Real data validation completed
- Performance optimization implemented
- Security measures in place

### 📈 PERFORMANCE METRICS - PRODUCTION READY

1. **File Size Compliance**: ✅
   - All files under 600-line limit maintained
   - Modular design with focused responsibilities
   - Clean code architecture throughout

2. **Processing Capability**: ✅
   - Handles 55K+ tweets efficiently
   - Processes 3.6K+ DM conversations with timing analysis
   - Memory usage optimized with async I/O
   - File splitter handles large archives (tested with 100MB+ files)

3. **Real Data Performance**: ✅
   - Complete Twitter archive processing: 55,598 tweets → 22,004 meaningful conversations
   - DM processing: 3,599 conversations → structured thread analysis
   - Timeline analysis: 2,469 unique interactions processed
   - Total interactions analyzed: 210,974

### 🔒 SECURITY STATUS - FULLY PROTECTED

✅ **Privacy Features Complete**:
- Blake3 hashing for all user ID anonymization
- 100% local processing - no data leaves machine
- Git hooks prevent accidental commits of private data
- Comprehensive .gitignore protection for REALDATA folder

✅ **Data Protection Verified**:
- Secure file handling with proper error contexts
- No external API calls or network requests
- Privacy-first architecture throughout

### 🔄 LATEST IMPROVEMENTS - DM Thread Format v2.0

**August 8, 2025 - Enhanced DM Thread Format**:

#### Before vs After Comparison
**Old Format (Dense & Metadata-Heavy)**:
```
💬 DM Thread: dm_3382-1132151165410455552
👥 Participants: 2 people
🕐 Started: 2024-06-22 02:01:54
⏱️ Duration: 8149h 20m
⚡ Avg response time: -5257.6 minutes
──────────────────────────────────────────────────

[1] From: fbf28725 To: 76357999 
📅 2025-05-27 15:22:27
I have been thinking about this...
```

**New Format (Clean & Conversation-Focused)**:
```
💬 Conversation (94 messages, 339 days)
────────────────────────────────────────
A: I have been thinking about this...
   Just pure text predictions where your thoughts flow fast...
B: (2 hours later) are you planning on having a co-founder?
A: how the dynamics and things work
```

#### Key Improvements Delivered
- ✅ **Relative Timestamps**: "2 hours later", "3 days later" instead of absolute times
- ✅ **Reduced Metadata**: A/B labels instead of hash fragments (fbf28725 → A)
- ✅ **Smart Timing**: Only shows gaps >5 minutes to reduce noise
- ✅ **62% Size Reduction**: 28MB → 11MB for same conversation data
- ✅ **Natural Flow**: Conversations read like chat logs with meaningful context
- ✅ **Analysis-Ready**: Clean format perfect for review and analysis

### 📝 DOCUMENTATION STATUS - COMPLETE

✅ **Comprehensive Documentation**:
- README.md with Harry Potter theme and Minto Pyramid structure
- Complete API documentation with examples
- Steering documents updated to reflect current state (including DM v2.0 improvements)
- File splitter utility documentation

---

## 🎉 FINAL STATUS: PRODUCTION COMPLETE

**Tweet-Scrolls is now a complete, production-ready application with all requested features implemented, tested, and documented. The project successfully transforms Twitter archives into actionable intelligence while maintaining the highest standards of privacy, performance, and code quality.**

================================================
FILE: .kiro/steering/directives.md
================================================
# Tweet-Scrolls Project Directives
## Condensed Guidelines for Development

### 🎯 Project Status
- ✅ **PRODUCTION-READY** - All core functionality implemented and tested
- ✅ **118+ Tests Passing** - Complete test coverage including new file splitter utility
- ✅ **File Size Compliance** - All files under 600-line limit
- ✅ **Enhanced Features Complete** - Reply threads, DM threads, file splitter all integrated

### 📊 Core Requirements

#### File Size Limits (CRITICAL)
- **Hard Limit**: 600 lines per file
- **Optimal Target**: 300-500 lines per file
- **Enforcement**: Regular monitoring with `find src -name "*.rs" -exec wc -l {} + | sort -nr`

#### Code Organization Principles
- Each module should have single responsibility
- Clear boundaries between processing, models, services
- Re-export commonly used types at module level
- Comprehensive documentation for public APIs

#### Testing Strategy
- Test files can exceed 600 lines (testing is different)
- Use helper functions to reduce test code duplication
- Separate integration tests from unit tests
- Mock private data for CI/CD pipelines

### 🔧 Technology Stack
- **Rust 2021 edition** with Tokio async runtime
- **Core Dependencies**:
  - anyhow 1.0 (Error handling)
  - chrono 0.4 (Date/time parsing)
  - serde 1.0 (JSON serialization)
  - tokio 1.0 (Async runtime)
  - csv 1.1 (CSV generation)
  - mimalloc 0.1 (Memory optimization)
  - blake3 1.5 (User ID anonymization)
  - regex 1.10 (Pattern matching)
  - indicatif 0.17 (Progress indicators)

### 🔒 Private Data Handling (CRITICAL)
- **Path**: `/home/amuldotexe/Desktop/GitHub202410/tweet-scrolls/private_data/REALDATA/`
- **Status**: ⚠️ **NEVER COMMIT TO VERSION CONTROL**
- **Usage**: Examine structure only, create anonymized samples
- **Security**: Always use relative paths, never hardcode absolute paths

### 🏗️ Architecture Patterns
- **Async/await** throughout for I/O operations
- **Error propagation** using `Result<T>` and `anyhow::Context`
- **Memory optimization** with custom allocator (mimalloc)
- **Module structure** following Rust idioms

### 🧪 TDD Methodology
- **Red Phase**: Write failing tests first
- **Green Phase**: Minimal implementation to pass tests
- **Refactor Phase**: Improve design while keeping tests green
- **Complete Cycles**: 4 full TDD cycles completed

### 📈 Performance Considerations
- **Memory Management**: mimalloc high-performance allocator
- **Async I/O**: Non-blocking file operations
- **Streaming Processing**: Handles large files efficiently
- **Buffered Writing**: Optimized CSV and text generation

### 🔍 JSON Schema Handling
- **JavaScript Prefix**: Remove `window.YTD.*.part0 = [` prefix
- **Field Naming**: Use `#[serde(rename = "camelCaseName")]` for Twitter fields
- **Optional Fields**: Handle with `Option<T>` types
- **Streaming**: Use `serde_json::Deserializer` for large files

### 🔐 Privacy Features
- **Blake3 Anonymization**: Consistent, secure user ID hashing
- **Local Processing**: No data leaves user's machine
- **Hash-Based Filenames**: No personal identifiers in file system
- **Content Masking**: Optional sensitive content protection

### 🚀 Output Generation
```
output_[user]_[timestamp]/
├── threads_[user]_[timestamp].csv          # Structured tweet data
├── threads_[user]_[timestamp].txt          # Human-readable threads
├── dm_conversations_[user]_[timestamp].csv  # DM conversation metadata
├── dm_threads_[user]_[timestamp].csv       # DM conversation threads
├── dm_threads_[user]_[timestamp].txt       # Human-readable DM threads
├── timeline_analysis_[user]_[timestamp].csv  # Activity pattern data
├── timeline_analysis_[user]_[timestamp].txt  # Activity pattern summary
├── results_[user]_[timestamp].txt           # Processing summary
└── dm_results_[user]_[timestamp].txt        # DM processing summary
```

### 🎯 Current Status - COMPLETE
✅ **All Core Features Implemented**:
- Enhanced thread reconstruction (ALL replies treated as threads)
- DM thread conversion with timing analysis
- Timeline analysis with activity pattern insights
- File splitter utility for large archive management
- Simple CLI interface with automatic file detection

✅ **Quality Assurance Complete**:
- 118+ tests passing across all modules
- Real data testing with 55K+ tweets and 3.6K DM conversations
- Privacy protection with Blake3 anonymization
- Performance optimization with async I/O and memory management

✅ **Production Ready**:
- Comprehensive documentation in README
- Privacy protection with git hooks and safety checks
- File size compliance (all files under 600 lines)
- Idiomatic Rust patterns throughout codebase

### 🚀 Ready for Use
The project is complete and ready for production use. All requested features have been implemented, tested, and integrated.

================================================
FILE: .kiro/steering/rust_minimalism.md
================================================
# Rust Minimalism Manifesto

## Core Philosophy
Every line of code is a liability. Every function is a commitment. Every module is a responsibility.

## File Size Enforcement
- **Hard Limit**: 600 lines per file
- **Optimal Target**: 300-500 lines
- **Enforcement**: `find src -name "*.rs" -exec wc -l {} + | awk '$1 > 600 && $2 != "total" {print "❌ VIOLATION: " $2 " (" $1 " lines)"}'`

## Function Design Principles
```rust
// ✅ GOOD: Single responsibility, clear intent
fn calculate_interaction_strength(interactions: u32) -> RelationshipStrength {
    match interactions {
        0..=5 => RelationshipStrength::Minimal,
        6..=20 => RelationshipStrength::Low,
        21..=50 => RelationshipStrength::Medium,
        _ => RelationshipStrength::High,
    }
}

// ❌ BAD: Multiple responsibilities, unclear intent
fn process_user_data_and_generate_reports_with_validation(data: &[User]) -> Result<Vec<Report>> {
    // 50+ lines of mixed concerns
}
```

## Minimalist Code Patterns

### 1. Prefer Composition Over Inheritance
```rust
// ✅ GOOD: Composition
struct UserProfile {
    stats: InteractionStats,
    timeline: Timeline,
}

// ❌ BAD: Complex trait hierarchies
trait BaseUser: Clone + Debug + Send + Sync + ... {}
```

### 2. Essential Error Handling Only
```rust
// ✅ GOOD: Context where it matters
.context("Failed to parse critical user data")?

// ❌ BAD: Verbose error chains
.with_context(|| format!("Error in function {} at line {}", function_name, line_number))?
```

### 3. Minimal Dependencies
- Only add dependencies that solve core problems
- Prefer `std` library solutions when performance difference is negligible
- Question every `use` statement

## Code Review Checklist
Before any commit:
- [ ] Can this function be split into smaller functions?
- [ ] Can this logic be simplified without losing clarity?
- [ ] Are all imports actually used?
- [ ] Does this solve exactly one problem?
- [ ] Would a junior developer understand this in 30 seconds?

================================================
FILE: .kiro/steering/i00-pattern-list.txt
================================================
========================================
IDIOMATIC RUST PATTERNS
========================================

0A. WORKSPACE AND DEPENDENCY MANAGEMENT
--------------------------------
0A.1. Workspace-level dependency declaration for version consistency
0A.2. Module-level re-exports via lib.rs/mod.rs for clean public APIs
0A.3. Feature flags for optional dependencies
0A.4. Shared dependency versioning through workspace inheritance
0A.5. Path-based local dependencies for monorepo development
0A.6. Public API organization through prelude modules
0A.7. Conditional compilation with cfg attributes
0A.8. Dependency groups by feature sets
0A.9. Version compatibility through semver
0A.10. Cross-crate type sharing via workspace-common modules
0A.11. Clean Build Pattern
      - Regular execution of 'cargo clean' and './mach clean'
      - Clean before switching branches or major dependency changes
      - Clean when encountering mysterious build or dependency errors
      - Clean when updating workspace-level dependency configurations
      - Verify clean build state before running critical tests

1. OWNERSHIP AND BORROWING PATTERNS
----------------------------------
1.1. Clone-on-Write (Cow) for optional data ownership
1.2. Passing references instead of moving values
1.3. Using Arc for shared ownership in concurrent contexts
1.4. Implementing Clone selectively
1.5. Taking owned values in constructors
1.6. Borrowing in method arguments
1.7. Using Box<dyn Trait> for trait objects
1.8. Smart pointer patterns (Rc, Arc, Box)
1.9. Temporary ownership with mem::replace
1.10. Moving out of collections safely

2. ERROR HANDLING PATTERNS
-------------------------
2.1. Custom error types with thiserror
2.2. Using anyhow for application errors
2.3. Question mark operator chaining
2.4. Context addition with .context() or .with_context()
2.5. Custom Error type with From implementations
2.6. Result wrapping for fallible operations
2.7. Nested error handling with map_err
2.8. Error source chaining
2.9. Using Option for nullable values
2.10. Fallback patterns with unwrap_or_else

3. BUILDER PATTERNS
------------------
3.1. Builder pattern for complex object construction
3.2. Fluent interfaces
3.3. Default trait implementation
3.4. Type-state builders
3.5. Validate-before-build pattern
3.6. Optional field builders
3.7. Consuming builders
3.8. Generic builders
3.9. Builder with phantom types
3.10. Nested builders

4. RESOURCE MANAGEMENT
---------------------
4.1. RAII pattern
4.2. Drop trait implementation
4.3. Guard patterns
4.4. Cleanup in reverse order
4.5. Temporary resource allocation
4.6. Resource pools
4.7. Connection management
4.8. File handle management
4.9. Memory management patterns
4.10. Resource limitation patterns

5. CONCURRENCY PATTERNS
----------------------
5.1. Actor pattern
5.2. Message passing
5.3. Mutex guard pattern
5.4. RwLock patterns
5.5. Channel patterns (mpsc)
5.6. Thread pool implementations
5.7. Async/await patterns
5.8. Future combinators
5.9. Tokio runtime patterns
5.10. Parking_lot synchronization

6. TRAIT PATTERNS
----------------
6.1. Extension traits
6.2. Marker traits
6.3. Associated type patterns
6.4. Trait bounds composition
6.5. Conditional trait implementation
6.6. Sealed traits
6.7. Auto traits
6.8. Trait objects
6.9. Generic traits
6.10. Default trait implementations

7. TYPE SYSTEM PATTERNS
----------------------
7.1. Newtype pattern
7.2. Phantom data
7.3. Type-state programming
7.4. Zero-sized types
7.5. Marker types
7.6. Type-level programming
7.7. Generic type parameters
7.8. Associated types
7.9. Type aliases
7.10. Const generics

8. MEMORY OPTIMIZATION
---------------------
8.1. Small string optimization
8.2. Stack allocation preferences
8.3. Arena allocation
8.4. Memory pooling
8.5. Zero-copy parsing
8.6. Packed structures
8.7. Cache-friendly data layouts
8.8. Memory mapping
8.9. Custom allocators
8.10. Slice optimization

9. API DESIGN PATTERNS
---------------------
9.1. Into/From conversions
9.2. TryFrom/TryInto for fallible conversions
9.3. AsRef/AsMut traits
9.4. IntoIterator implementation
9.5. Display and Debug implementations
9.6. Visitor pattern
9.7. Command pattern
9.8. Factory pattern
9.9. Strategy pattern
9.10. Adapter pattern

10. MACRO PATTERNS
-----------------
10.1. Declarative macros
10.2. Procedural macros
10.3. Derive macros
10.4. Attribute macros
10.5. Function-like macros
10.6. Internal rule patterns
10.7. Recursive macros
10.8. Token manipulation
10.9. Custom syntax extensions
10.10. Hygiene patterns

11. TESTING PATTERNS
-------------------
11.1. Unit test organization
11.2. Integration test patterns
11.3. Property-based testing
11.4. Test fixtures
11.5. Mock objects
11.6. Parameterized tests
11.7. Benchmark patterns
11.8. Test utilities
11.9. Assert macro patterns
11.10. Test harnesses

12. SAFETY PATTERNS
------------------
12.1. Safe wrapper types
12.2. Bounds checking
12.3. Panic guards
12.4. Memory safety patterns
12.5. Thread safety patterns
12.6. Safe abstractions over unsafe code
12.7. Invariant maintenance
12.8. Permission systems
12.9. Capability patterns
12.10. Validation chains

13. PERFORMANCE PATTERNS
-----------------------
13.1. Zero-cost abstractions
13.2. Static dispatch
13.3. Dynamic dispatch optimization
13.4. Lazy initialization
13.5. Caching patterns
13.6. Batch processing
13.7. SIMD optimization
13.8. Memory prefetching
13.9. Lock-free algorithms
13.10. Compile-time computation

14. ASYNC PATTERNS
-----------------
14.1. Stream processing
14.2. Async trait patterns
14.3. Futures composition
14.4. Async resource management
14.5. Backpressure handling
14.6. Timeout patterns
14.7. Rate limiting
14.8. Circuit breaker pattern
14.9. Async initialization
14.10. Error propagation in async

15. COLLECTIONS PATTERNS
-----------------------
15.1. Custom iterators
15.2. Collection transformations
15.3. Efficient searching
15.4. Sorting strategies
15.5. Custom collection types
15.6. Thread-safe collections
15.7. Specialized containers
15.8. Index access patterns
15.9. Collection views
15.10. Cursor patterns

16. MODULE ORGANIZATION
----------------------
16.1. Public API design
16.2. Internal module structure
16.3. Feature flagging
16.4. Conditional compilation
16.5. Platform-specific code
16.6. Library organization
16.7. Dependency management
16.8. Version compatibility
16.9. Documentation organization
16.10. Example code structure

17. SERIALIZATION PATTERNS
-------------------------
17.1. Serde implementations
17.2. Custom serialization
17.3. Versioned serialization
17.4. Binary formats
17.5. Text formats
17.6. Schema evolution
17.7. Validation during deserialization
17.8. Efficient serialization
17.9. Format conversion
17.10. Type-driven serialization

18. NETWORKING PATTERNS
----------------------
18.1. Connection pooling
18.2. Protocol implementations
18.3. Async networking
18.4. Request/response patterns
18.5. Streaming protocols
18.6. Connection management
18.7. Retry mechanisms
18.8. Load balancing
18.9. Service discovery
18.10. Protocol buffers

19. FFI PATTERNS
---------------
19.1. C API wrappers
19.2. Memory management
19.3. Error handling
19.4. Callback patterns
19.5. Type conversion
19.6. String handling
19.7. Array handling
19.8. Function exports
19.9. Platform specifics
19.10. Safety boundaries

20. OPTIMIZATION PATTERNS
------------------------
20.1. Compile-time optimization
20.2. Runtime optimization
20.3. Memory optimization
20.4. CPU cache optimization
20.5. Algorithm selection
20.6. Data structure choice
20.7. Parallel processing
20.8. Resource pooling
20.9. Load distribution
20.10. Bottleneck elimination

21. ASYNC RUNTIME INTERNALS
--------------------------
21.1. Task scheduler implementation
21.2. Waker implementation patterns
21.3. Reactor patterns
21.4. Poll function optimization
21.5. Future state machines
21.6. Task queue management
21.7. Work-stealing schedulers
21.8. Timer wheel implementation
21.9. IO event notification systems
21.10. Task cancellation mechanisms

22. ZERO-COST ABSTRACTION PATTERNS
--------------------------------
22.1. Compile-time dispatch tables
22.2. Static virtual dispatch
22.3. Const generics optimization
22.4. Enum optimization patterns
22.5. Monomorphization strategies
22.6. Inline assembly integration
22.7. SIMD abstraction layers
22.8. Branch prediction hints
22.9. Memory alignment optimization
22.10. Dead code elimination patterns

23. ASYNC MIDDLEWARE PATTERNS
---------------------------
23.1. Tower layer implementation
23.2. Service trait patterns
23.3. Middleware chaining
23.4. Request/response transformation
23.5. Async interceptors
23.6. Filter chains
23.7. Middleware state management
23.8. Cross-cutting concerns
23.9. Conditional middleware
23.10. Middleware composition

24. RUNTIME REFLECTION PATTERNS
-----------------------------
24.1. Type ID manipulation
24.2. Dynamic type registration
24.3. Type metadata handling
24.4. Runtime type checking
24.5. Dynamic dispatch tables
24.6. Type erasure techniques
24.7. Trait object manipulation
24.8. Virtual method tables
24.9. Dynamic loading patterns
24.10. Type reconstruction

25. ADVANCED MACRO PATTERNS
-------------------------
25.1. Token tree manipulation
25.2. Macro hygiene management
25.3. Recursive macro expansion
25.4. Custom syntax parsing
25.5. Macro debugging patterns
25.6. Cross-platform macros
25.7. Conditional compilation
25.8. Code generation patterns
25.9. Macro export patterns
25.10. Macro documentation

26. ASYNC IO PATTERNS
-------------------
26.1. Zero-copy IO operations
26.2. Buffered IO abstractions
26.3. Async file operations
26.4. Network buffer management
26.5. IO completion ports
26.6. Scatter-gather IO
26.7. Direct memory access
26.8. IO uring integration
26.9. Async IO queues
26.10. IO prioritization

27. LOCK-FREE PATTERNS
--------------------
27.1. CAS operations
27.2. Memory ordering
27.3. Atomic reference counting
27.4. Lock-free queues
27.5. Wait-free algorithms
27.6. Memory barriers
27.7. ABA problem solutions
27.8. Lock-free data structures
27.9. Hazard pointers
27.10. Epoch-based reclamation

28. ASYNC STREAM PATTERNS
-----------------------
28.1. Back-pressure implementation
28.2. Stream buffering
28.3. Stream transformation
28.4. Stream composition
28.5. Stream splitting
28.6. Stream multiplexing
28.7. Stream rate limiting
28.8. Stream windowing
28.9. Stream error handling
28.10. Stream cancellation

29. PLATFORM ABSTRACTION
----------------------
29.1. OS API abstraction
29.2. System call wrapping
29.3. Platform-specific features
29.4. Conditional compilation
29.5. Feature detection
29.6. ABI compatibility
29.7. Cross-platform IO
29.8. Platform-specific optimization
29.9. Syscall abstraction
29.10. Platform capability detection

30. ADVANCED TYPE SYSTEM
----------------------
30.1. Higher-kinded types simulation
30.2. GATs implementation
30.3. Type-level computation
30.4. Type state machines
30.5. Dependent type patterns
30.6. Type-level integers
30.7. Type families
30.8. Associated type constructors
30.9. Type-level proofs
30.10. Type inference helpers

31. OPTION AND NULL SAFETY PATTERNS
--------------------------------
31.1. Combinators Over Matching
     - Use .map() when transforming Some values
     - Use .and_then() for chaining Option-returning operations
     - Use .or_else() for fallback computations
     - Use .unwrap_or_else() for lazy default values

31.2. Collection Operations
     - Use .filter_map() instead of filter().map()
     - Use .and_then() for flattening nested Options
     - Use .zip() to combine two Options

31.3. Early Returns and Guards
     - Return None early in functions
     - Use if let Some(x) for single-case matching
     - Chain .ok_or()/.ok_or_else() when converting to Result

31.4. Default Values
     - Use .unwrap_or(default) for simple defaults
     - Use .unwrap_or_else(|| expensive_computation()) for lazy defaults
     - Use .unwrap_or_default() for types implementing Default

31.5. Pattern Matching Best Practices
     - Match on multiple Options using tuple patterns
     - Use @ bindings to reference matched values
     - Prefer if let over match for single patterns

31.6. Option Construction
     - Use Some(val) explicitly for clarity
     - Use None::<Type> when type inference fails
     - Convert from nullable types using .map(|x| Some(x))

31.7. Composition Patterns
     - Chain .as_ref() for borrowing Option contents
     - Use .as_mut() for mutable borrowing
     - Combine with Result using .ok() and .transpose()

31.8. When to Use Each Pattern:
     ┌────────────────────┬──────────────────────────────────────┐
     │ Pattern            │ When to Use                          │
     ├────────────────────┼──────────────────────────────────────┤
     │ .map()             │ Transform Some value without nesting  │
     │ .and_then()        │ Chain operations that return Option   │
     │ .filter()          │ Conditionally keep Some values       │
     │ .or()/.or_else()   │ Provide fallback Options            │
     │ if let Some()      │ Single-case pattern matching        │
     │ match              │ Multiple cases or complex logic      │
     │ .unwrap_or()       │ Simple default values               │
     │ .unwrap_or_else()  │ Expensive default computations      │
     └────────────────────┴──────────────────────────────────────┘

31.9. Anti-patterns to Avoid
     - Avoid .unwrap() in production code
     - Don't use .expect() unless truly impossible
     - Avoid nested match statements on Options
     - Don't use if x.is_some() { x.unwrap() }

31.10. Testing Patterns
     - Use assert_eq!(Some(expected), result)
     - Test None cases explicitly
     - Use Option::as_ref() in assertions

32. ASYNC CHANNEL PATTERNS
------------------------
32.1. Multi-producer channels
32.2. Bounded channel implementation
32.3. Priority channels
32.4. Channel selection
32.5. Channel composition
32.6. Channel broadcasting
32.7. Channel filtering
32.8. Channel transformation
32.9. Channel monitoring
32.10. Channel cleanup

33. UNSAFE CODE PATTERNS
----------------------
33.1. Safe abstraction boundaries
33.2. Pointer manipulation
33.3. Raw memory management
33.4. FFI boundary safety
33.5. Undefined behavior prevention
33.6. Memory mapping safety
33.7. Platform-specific unsafe
33.8. Atomic operation safety
33.9. Exception safety
33.10. Invariant maintenance

34. ASYNC EXECUTOR PATTERNS
-------------------------
34.1. Task spawning
34.2. Executor shutdown
34.3. Task prioritization
34.4. Resource limits
34.5. Executor metrics
34.6. Task grouping
34.7. Executor composition
34.8. Thread pool management
34.9. Work stealing
34.10. Task locality

35. ADVANCED TRAIT PATTERNS
-------------------------
35.1. Trait specialization
35.2. Trait aliases
35.3. Trait composition
35.4. Negative trait bounds
35.5. Conditional trait impl
35.6. Trait object safety
35.7. Associated type defaults
35.8. Trait upcasting
35.9. Trait downcasting
35.10. Trait coherence

36. ASYNC NETWORKING PATTERNS
---------------------------
36.1. Protocol implementation
36.2. Connection management
36.3. TLS integration
36.4. Proxy patterns
36.5. Network timeouts
36.6. Connection pooling
36.7. Protocol negotiation
36.8. Network error handling
36.9. Keep-alive management
36.10. Connection backoff

37. COMPILE-TIME VALIDATION
-------------------------
37.1. Type-level constraints
37.2. Const evaluation
37.3. Static assertions
37.4. Build-time checks
37.5. Compile-time verification
37.6. Type system proofs
37.7. Const generics validation
37.8. Macro-time validation
37.9. Link-time optimization
37.10. Dead code detection

38. ASYNC STATE MANAGEMENT
------------------------
38.1. State machine implementation
38.2. Shared state access
38.3. State synchronization
38.4. State transition validation
38.5. State persistence
38.6. State recovery
38.7. State snapshot
38.8. State migration
38.9. State replication
38.10. State consistency

39. ADVANCED MEMORY PATTERNS
--------------------------
39.1. Custom allocator implementation
39.2. Memory pool management
39.3. Garbage collection
39.4. Reference counting
39.5. Memory fence patterns
39.6. Cache line optimization
39.7. Memory prefetching
39.8. Stack vs heap decisions
39.9. Memory compaction
39.10. Memory defragmentation

40. ASYNC TESTING PATTERNS
------------------------
40.1. Async test harness
40.2. Mock async services
40.3. Async assertions
40.4. Time manipulation
40.5. Race condition testing
40.6. Async property testing
40.7. Network simulation
40.8. Async benchmarking
40.9. Fault injection
40.10. Concurrency testing

41. LIBRARY API DESIGN
--------------------
41.1. Versioning strategies
41.2. Breaking change management
41.3. API stability guarantees
41.4. Feature flagging
41.5. Documentation generation
41.6. Error type design
41.7. Type system ergonomics
41.8. Builder pattern design
41.9. Extension trait design
41.10. Conditional compilation

Each of these patterns represents advanced techniques commonly used in building production-grade async Rust libraries like Tokio and Axum. They focus on performance, safety, and maintainability while providing powerful abstractions for users.


================================================
FILE: Cargo.toml
================================================
[package]
name = "tweet-scrolls"
version = "0.1.0"
edition = "2021"

[[bin]]
name = "tweet-scrolls"
path = "src/main.rs"

[[bin]]
name = "test_dm_headers"
path = "src/bin/test_dm_headers.rs"

[[bin]]
name = "tweet_coverage_analysis"
path = "src/bin/tweet_coverage_analysis.rs"

[[bin]]
name = "file-splitter"
path = "src/bin/file_splitter.rs"

[dependencies]
anyhow = "1.0"
chrono = { version = "0.4", features = ["serde"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1.0", features = ["full"] }
csv = "1.1"
mimalloc = "0.1"
# New dependencies for relationship intelligence
blake3 = "1.5"
regex = "1.10"
indicatif = "0.17"
# CLI argument parsing (temporarily commented out due to network issues)
# clap = { version = "4.0", features = ["derive"] }

[dev-dependencies]
tempfile = "3.0"
float-cmp = "0.9"


================================================
FILE: samples/direct-messages_middle3.js
================================================
            "urls" : [ ],
            "text" : "Not suganda wala",
            "mediaUrls" : [ ],
            "senderId" : "1446445479068241923",
            "id" : "1538042145290219524",
            "createdAt" : "2022-06-18T06:13:17.568Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "funny",
                "eventId" : "1538042185773248513",
                "createdAt" : "2022-06-18T06:13:27.200Z"
              }
            ],
            "urls" : [ ],
            "text" : "I also Retweeted niche wala",
            "mediaUrls" : [ ],
            "senderId" : "1446445479068241923",
            "id" : "1538042125790908421",
            "createdAt" : "2022-06-18T06:13:12.915Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Yeah ok",
            "mediaUrls" : [ ],
            "senderId" : "1446445479068241923",
            "id" : "1538042087215869957",
            "createdAt" : "2022-06-18T06:13:03.732Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1446445479068241923",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "But am not retweeting",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1538042063756767236",
            "createdAt" : "2022-06-18T06:12:58.133Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1446445479068241923",
            "reactions" : [
              {
                "senderId" : "1446445479068241923",
                "reactionKey" : "funny",
                "eventId" : "1538042067087413248",
                "createdAt" : "2022-06-18T06:12:58.900Z"
              }
            ],
            "urls" : [ ],
            "text" : "Am liking",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1538042037202653188",
            "createdAt" : "2022-06-18T06:12:51.810Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "funny",
                "eventId" : "1538042017459994625",
                "createdAt" : "2022-06-18T06:12:47.069Z"
              }
            ],
            "urls" : [
              {
                "url" : "https://t.co/Yy0mlEor91",
                "expanded" : "https://twitter.com/paraschopra/status/1538034284199522304?s=20&t=xsY-EIOQBYYRq7Fjb_anNg",
                "display" : "twitter.com/paraschopra/st…"
              }
            ],
            "text" : "https://t.co/Yy0mlEor91\nParas got angryyy",
            "mediaUrls" : [ ],
            "senderId" : "1446445479068241923",
            "id" : "1538041624043061252",
            "createdAt" : "2022-06-18T06:11:13.314Z",
            "editHistory" : [ ]
          }


================================================
FILE: samples/direct-messages_start.js
================================================
window.YTD.direct_messages.part0 = [
  {
    "dmConversation" : {
      "conversationId" : "3382-1132151165410455552",
      "messages" : [
        {
          "messageCreate" : {
            "recipientId" : "3382",
            "reactions" : [
              {
                "senderId" : "3382",
                "reactionKey" : "like",
                "eventId" : "1927386486816542720",
                "createdAt" : "2025-05-27T15:28:42.241Z"
              }
            ],
            "urls" : [
              {
                "url" : "https://t.co/nsVswPpSDi",
                "expanded" : "https://x.com/hnshah/status/1927383046421893182",
                "display" : "x.com/hnshah/status/…"
              }
            ],
            "text" : "https://t.co/nsVswPpSDi\n\nI have been thinking about this - build products which are far better because of AI - might even have the intelligence of AI via deterministic wasy\n\nI was thinking of content automation tools where you do not generate dynamic content via AI - but run multiple loops of AI validation for automated content creation and then serve it as final files\n\nwe use AI but not for dynamic content - but for higher quality content via iteration",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1927384914816532581",
            "createdAt" : "2025-05-27T15:22:27.518Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "3382",
            "reactions" : [
              {
                "senderId" : "3382",
                "reactionKey" : "excited",
                "eventId" : "1921771505672978432",
                "createdAt" : "2025-05-12T03:36:46.408Z"
              }
            ],
            "urls" : [ ],
            "text" : "Just pure text predictions where your thoughts flow fast and you can solve your queries by using @web or @online docs in line while typing",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1921770762052173967",
            "createdAt" : "2025-05-12T03:33:49.162Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "3382",
            "reactions" : [ ],
            "urls" : [
              {
                "url" : "https://t.co/IOivmVgaCe",
                "expanded" : "https://x.com/amuldotexe/status/1921762737023029572?t=rT42ZOfki-_4nXF6xYQPRw&s=19",
                "display" : "x.com/amuldotexe/sta…"
              },
              {
                "url" : "https://t.co/npODyffYqC",
                "expanded" : "https://twitter.com/amuldotexe/status/1921762737023029572",
                "display" : "twitter.com/amuldotexe/sta…"
              }
            ],
            "text" : "https://t.co/IOivmVgaCe\n\nI should probably do a video on how cursor is useful for product ideation / general management use cases\n\nit's immensely powerful tool https://t.co/npODyffYqC",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1921770584486346796",
            "createdAt" : "2025-05-12T03:33:06.818Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "3382",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "but there's gotta be a more mature graceful low-drama way to navigate this game\n\ndoing it alone is not a great idea - I would ideally want to be the CTO - but I will still need someone to play a part on Ops Legal and so on - it is going to be a lot of - everyone playing so many different roles as required",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1916874358494040337",
            "createdAt" : "2025-04-28T15:17:15.577Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "3382",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Currently ideating with friends to build small indie-dev experimental apps - but very fluid - we will share profits and go home - no equity business",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1916873959955677303",
            "createdAt" : "2025-04-28T15:15:40.548Z",
            "editHistory" : [ ]
          }


================================================
FILE: samples/direct-messages_middle2.js
================================================
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Which can hurt",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730961540378628",
            "createdAt" : "2021-11-22T10:33:32.143Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "The issue I feel is one sided gyaan",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730924144005127",
            "createdAt" : "2021-11-22T10:33:23.253Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "so many people diverse paths",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730875343290372",
            "createdAt" : "2021-11-22T10:33:11.585Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "I am in awe",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730858733846532",
            "createdAt" : "2021-11-22T10:33:07.627Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "She has found her path",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730840161415174",
            "createdAt" : "2021-11-22T10:33:03.201Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Remote job",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730811753451528",
            "createdAt" : "2021-11-22T10:32:56.432Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "via a Open Source Contribution history",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730786734370822",
            "createdAt" : "2021-11-22T10:32:50.464Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1166688180705169408",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "I know a girl who makes 95k Euros at age 22",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1462730743256260613",
            "createdAt" : "2021-11-22T10:32:40.100Z",
            "editHistory" : [ ]


================================================
FILE: samples/direct-messages_end.js
================================================
            "recipientId" : "1452955672585203713",
            "reactions" : [ ],
            "urls" : [
              {
                "url" : "https://t.co/4NRwt8MmyC",
                "expanded" : "https://twitter.com/lillyeffed/status/1561250494021898240",
                "display" : "twitter.com/lillyeffed/sta…"
              }
            ],
            "text" : "https://t.co/4NRwt8MmyC",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1561299502958448649",
            "createdAt" : "2022-08-21T10:29:43.750Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1452955672585203713",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Please do share your selection of cafes in BLR Sunanda",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1561299459006377989",
            "createdAt" : "2022-08-21T10:29:33.257Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "excited",
                "eventId" : "1558797378433363968",
                "createdAt" : "2022-08-14T12:47:10.742Z"
              }
            ],
            "urls" : [ ],
            "text" : "The train is called the gol gumbaz",
            "mediaUrls" : [ ],
            "senderId" : "1452955672585203713",
            "id" : "1558791071291043845",
            "createdAt" : "2022-08-14T12:22:07.014Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1452955672585203713",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Helpful",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1558789430122426373",
            "createdAt" : "2022-08-14T12:15:35.732Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1452955672585203713",
            "reactions" : [ ],
            "urls" : [ ],
            "text" : "Thanks Sunanda",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1558789412045000708",
            "createdAt" : "2022-08-14T12:15:31.426Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "excited",
                "eventId" : "1558789394881859585",
                "createdAt" : "2022-08-14T12:15:27.314Z"
              }
            ],
            "urls" : [ ],
            "text" : "Badami hills. Overnight train from Bangalore.",
            "mediaUrls" : [ ],
            "senderId" : "1452955672585203713",
            "id" : "1558789367719927812",
            "createdAt" : "2022-08-14T12:15:20.849Z",
            "editHistory" : [ ]
          }
        }
      ]
    }
  }
]

================================================
FILE: samples/direct-messages_middle1.js
================================================
        {
          "messageCreate" : {
            "recipientId" : "3266771780",
            "reactions" : [ ],
            "urls" : [
              {
                "url" : "https://t.co/wHND8UD4Oj",
                "expanded" : "https://amuldotexe.fermion.app/course/jsg2024",
                "display" : "amuldotexe.fermion.app/course/jsg2024"
              }
            ],
            "text" : "Hi @sanidhyashukla2\n\nHere's the link to the Job Search Games course on Fermion App\nhttps://t.co/wHND8UD4Oj\n\nPlease do let me know what can I improve in the landing page, I am still learning this game",
            "mediaUrls" : [ ],
            "senderId" : "1132151165410455552",
            "id" : "1832772466143547692",
            "createdAt" : "2024-09-08T13:26:21.905Z",
            "editHistory" : [ ]
          }
        }
      ]
    }
  },
  {
    "dmConversation" : {
      "conversationId" : "3269816834-1132151165410455552",
      "messages" : [
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "funny",
                "eventId" : "1945477807192031232",
                "createdAt" : "2025-07-16T13:37:09.132Z"
              }
            ],
            "urls" : [ ],
            "text" : "dekh ke laga haa yaar ye sahi kuch kuch likha hai ruko image search maarta hoon",
            "mediaUrls" : [ ],
            "senderId" : "3269816834",
            "id" : "1945473224432664947",
            "createdAt" : "2025-07-16T13:18:56.556Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "funny",
                "eventId" : "1945477791664771072",
                "createdAt" : "2025-07-16T13:37:05.429Z"
              }
            ],
            "urls" : [ ],
            "text" : "are bhai... 😂 ee ma hasne ka ke baat hai ji \nsach me kiya hai not joking",
            "mediaUrls" : [ ],
            "senderId" : "3269816834",
            "id" : "1945473160306172204",
            "createdAt" : "2025-07-16T13:18:41.286Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "funny",
                "eventId" : "1945469744057913344",
                "createdAt" : "2025-07-16T13:05:06.744Z"
              }
            ],
            "urls" : [ ],
            "text" : "Wife has started tuition so 🙂‍↕️",
            "mediaUrls" : [ ],
            "senderId" : "3269816834",
            "id" : "1945458247785123916",
            "createdAt" : "2025-07-16T12:19:25.849Z",
            "editHistory" : [ ]
          }
        },
        {
          "messageCreate" : {
            "recipientId" : "1132151165410455552",
            "reactions" : [
              {
                "senderId" : "1132151165410455552",
                "reactionKey" : "funny",
                "eventId" : "1945469738110291968",
                "createdAt" : "2025-07-16T13:05:05.317Z"
              }
            ],
            "urls" : [ ],
            "text" : "Vo tuition vala post. Can you share full poster?",
            "mediaUrls" : [ ],


================================================
FILE: visualASCII202410.txt
================================================
More examples of visual explanations:

      Arrays are fixed-size collections of the same type. Slices are views into arrays or other slices.

      Example 1: Arrays
      ```rust
      fn main() {
          // Declare an array of 5 integers
          let numbers: [i32; 5] = [1, 2, 3, 4, 5];
          //   |       |    |     |
          //   |       |    |     Array literal
          //   |       |    Array size
          //   |       Array type (32-bit integers)
          //   Variable name

          // Access elements
          println!("First number: {}", numbers[0]);
          //                           |       |
          //                           |       Index
          //                           Array name

          // Get array length
          println!("Array length: {}", numbers.len());
          //                           |       |
          //                           |       len() method
          //                           Array name
      }
      ```

      Example 2: Slices
      ```rust
      fn print_slice(slice: &[i32]) {
      //  |          |      |
      //  |          |      Slice type (reference to array of i32)
      //  |          Parameter name
      //  Function name
          for number in slice {
          //  |      |  |
          //  |      |  Slice to iterate over
          //  |      'in' keyword for iteration
          //  Loop variable
              print!("{} ", number);
          }
          println!();
      }

      fn main() {
          let numbers = [1, 2, 3, 4, 5];
          
          // Create a slice of the whole array
          print_slice(&numbers);
          //          |
          //          Reference to create a slice

          // Create a slice of part of the array
          print_slice(&numbers[1..4]);
          //          |       |
          //          |       Range syntax for slicing
          //          Array to slice
      }
      ```

      These examples demonstrate:
      1. Creating and using arrays
      2. Accessing array elements and length
      3. Creating slices from arrays
      4. Passing slices to functions
      5. Using range syntax for slicing



      "Ever played 'Hide and Seek' where sometimes you find your friend, and sometimes you don't? That's Option<T> in a nutshell!"

      Imagine you're a detective trying to find a missing person. Sometimes you find them (that's `Some(T)`), and sometimes you don't (that's `None`). Rust's `Option<T>` is like your investigation report - it always tells you clearly whether you found the person or not.

      💡 Insight: `Option<T>` and pattern matching form the backbone of Rust's null safety, eliminating null pointer exceptions.

      🔍 Design Choice: Rust uses `Option<T>` instead of null values to make absence of value explicit and force handling of both cases.

      Code example with annotations:
      ```rust
      fn find_person(name: &str) -> Option<u32> {
      //  |           |      |        |
      //  |           |      |        Return type: Option<u32>
      //  |           |      Parameter: &str (string slice)
      //  |           Function name
      //  Function declaration keyword
          let people = vec![("Alice", 30), ("Bob", 25), ("Charlie", 35)];
          //  |        |     |                                        |
          //  |        |     Vector of tuples                         |
          //  |        Vector creation macro                          |
          //  Variable declaration                                    Semicolon
          
          for (person, age) in people {
          //  |          |    |    |
          //  |          |    |    Vector to iterate over
          //  |          |    'in' keyword for iteration
          //  |          Tuple unpacking
          //  'for' loop keyword
              if person == name {
              // |       |
              // |       Comparison operator
              // 'if' condition
                  return Some(age);  // Person found, return their age
                  //     |     |
                  //     |     Value wrapped in Some
                  //     Some variant of Option
              }
          }
          
          None  // Person not found
          // | 
          // None variant of Option (implicitly returned)
      }
      ```

      fn main() {
          let names = vec!["Alice", "David", "Bob"];
          
          for name in names {
              match find_person(name) {
                  Some(age) => println!("{} is {} years old", name, age),
                  None => println!("{} was not found", name),
              }
          }
      }
      ```

      This code demonstrates:
      1. Defining a function that returns an `Option<T>`
      2. Using `match` to handle both `Some` and `None` cases
      3. Safely working with potentially absent values



============================


Rule ZERO:
Start with a cool one liner real world conversation which explains the essence of the concept AND tell it as a verbal short story which makes it very relatable

Rule ZERO POINT FIVE:
The code example should have some println! statements which make the user get an intuitive understanding of what is happening

1. Provide memory layout diagrams for complex data structures:
    ```
    Vec<i32> in memory:
    ┌─────────┬─────────┬─────────┐
    │ Pointer │Capacity │  Length │
    └────┬────┴─────────┴─────────┘
         │
         ▼
    ┌────┬────┬────┬────┐
    │ 10 │ 20 │ 30 │    │
    └────┴────┴────┴────┘
    ```

2. Use ASCII art to illustrate complex relationships:
    ```
    Borrowing Rules:
    ┌─────────────┐
    │  Resource   │
    └─────────────┘
          ↑ ↑
          │ │ 
     ┌────┘ └────┐
     │           │
    &mut       &
    ```

3. Employ box drawings to group related code elements:
    ```rust
    struct Point {
        x: i32,  // ┐
        y: i32,  // ┴─ These are the struct fields
    }
    ```

4. Use visual cues to represent different data types:
    ```rust
    let a: i32 = 5;    // 📦 Integer box
    let b: f64 = 5.0;  // 🎁 Floating-point box
    let e: char = 'e'; // 🔤 Single Unicode character
    let f: bool = true;// ✅ Boolean value
    ```

5. Create visual metaphors for complex concepts:
    ```
    Ownership:
    📦 → 📦 (Move)
    📦 → 📦 → 📦 (Clone)
    📦 ← 👀 (Borrow)
    ```

6. Use extensive visual cues:
   - Emoji for key points: 💡 insights, 🔍 design choices, 🏗️ architecture, 🧲 physics, 📊 data, 🔒 safety, 🚀 performance
   - Arrows (↑ ↓ ← →) and comments for code explanation
   - ASCII art diagrams and box drawings (┌─┐└─┘) for relationships and important sections
   - Indentation and spacing for visual hierarchies
   - Color coding (if supported) for keywords, variables, functions, and types

7. Enhance code examples with comprehensive visual annotations and explanations:
   ```rust
   enum Result<T, E> {
       Ok(T),   // ┌─ Success variant
       Err(E),  // └─ Error variant
   }            // ^ Generic enum with two type parameters

   // The enum Result has type parameters T and E to make it generic.
   // This allows it to work with any types for the success (T) and error (E) cases.
   // For example, Result<f64, String> could represent a floating-point calculation
   // that might fail with a string error message.
   // Using generics here provides flexibility without runtime cost.
   
   fn divide(a: f64, b: f64) -> Result<f64, String> {
       //    ↑ ↑      ↑        └─ Return type: Result with f64 for success, String for error
       //    │ └─ Input parameters
       //    └─ Function name
       if b == 0.0 {
           Err("Division by zero".to_string())
           // └─ Returns an Err variant with a String
       } else {
           Ok(a / b)
           // └─ Returns an Ok variant with the division result
       }
   }
   ```

8. Use creative visual representations:
   ```
   Ownership Transfer:
   let s1 = String::from("hello");
   let s2 = s1;
   
   Memory:
   s1 ──┐
        │ 
   s2 ──┴─→ ["hello"]
   ```

9. Create visual timelines for concepts like lifetimes:
   ```
   'a: ┌───────────────────────────┐
       │                           │
   x:  │   [data]                  │
       │     ↑                     │
   y:  │   [data]                  │
       │                           │
       └───────────────────────────┘
   ```

10. Use tables to compare concepts:
    ```
    │ Rust Concept │ Excel/Notion    │ Physics/Architecture │
    ├─────────────┼─────────────────┼──────────────────────┤
    │ Enums       │ Dropdown menus  │ Material choices     │
    │ Structs     │ Custom templates│ Building blueprints  │
    │ Ownership   │ Cell references │ Conservation of mass │
    ```

11. Employ flowcharts for decision-making processes:
    ```
    Start
      │
      ▼
    Is data
    owned?
      │
      ├─── Yes ──→ Use directly
      │
      └─── No ───→ Borrow or clone
    ```

12. Use decision trees for complex concepts:
    ```
    Variable Access in Rust
            │
    ┌───────┴───────┐
    │               │
    Owned         Not Owned
    │ (let)         │
    │         ┌─────┴─────┐
    │         │           │
    │     Borrowed    Referenced
    │     │     │     (Lifetime 'a)
    │  ┌──┴──┐  │         │
    │  │     │  │         │
    │ &mut   &  │         &
    │ (mut)  (immut)      │
    │         \ │ /       │
    │          \│/        │
    │           V         │
    │    Safety Checks    │
    │           │         │
    └─────┐ ┌───┴───┐     │
          │ │       │     │
       Direct  Compile-time
       Access   Validation
    ```
    Key Concepts:
    - Ownership: Full control (let x = ...)
    - Borrowing: Temporary access (&mut x, &x)
    - References: Non-owning pointers (&T)
    - Mutability: Change permission (mut)
    - Lifetimes: Scope of references ('a)
    - Safety: Rust's core principle (enforced by compiler)




================================================
SUMMARY
================================================
Total files processed: 45
